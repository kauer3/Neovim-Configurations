!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/kaue/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/61166a75/
#	plugged/vim-polyglot/indent/dictconf.vim	/^inoremap <buffer> # X#$/;"	m
#	plugged/vim-polyglot/indent/dictdconf.vim	/^inoremap <buffer> # X#$/;"	m
#	plugged/vim-polyglot/indent/ps1.vim	/^inoremap <buffer> # X#$/;"	m
$NODE_CLIENT_LOG_FILE	plugged/coc.nvim/autoload/coc/client.vim	/^    let $NODE_CLIENT_LOG_FILE = s:logfile$/;"	v
$NODE_CLIENT_LOG_LEVEL	plugged/coc.nvim/autoload/coc/client.vim	/^  let $NODE_CLIENT_LOG_LEVEL = 'debug'$/;"	v
$PYTHONWARNINGS	plugged/vim-polyglot/compiler/python.vim	/^  let $PYTHONWARNINGS="ignore"$/;"	v
$TF_CLI_ARGS_fmt	plugged/vim-polyglot/autoload/terraform.vim	/^let $TF_CLI_ARGS_fmt=''$/;"	v
$ref	plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerCommand"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.1
$ref	plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerModule"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.0
$ref	plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerSocket"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.2
$ref	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	s	object:definitions.languageServerCommand.allOf.0
$ref	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	s	object:definitions.languageServerModule.allOf.0
$ref	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	s	object:definitions.languageServerSocket.allOf.0
$schema	plugged/coc.nvim/data/schema.json	/^  "$schema": "http:\/\/json-schema.org\/draft-07\/schema#",$/;"	s
**Q**  Pressing <kbd>i</kbd> after selecting words with <kbd>C-n</kbd> makes the plugin hang, why?	plugged/vim-multiple-cursors/README.md	/^#### **Q**  Pressing <kbd>i<\/kbd> after selecting words with <kbd>C-n<\/kbd> makes the plugin h/;"	t	section:vim-multiple-cursors""FAQ
**Q** <kbd>ALT</kbd>+<kbd>n</kbd> doesn't seem to work in VIM but works in gVIM, why?	plugged/vim-multiple-cursors/README.md	/^#### **Q** <kbd>ALT<\/kbd>+<kbd>n<\/kbd> doesn't seem to work in VIM but works in gVIM, why?$/;"	t	section:vim-multiple-cursors""FAQ
**Q** <kbd>CTRL</kbd>+<kbd>n</kbd> doesn't seem to work in gVIM?	plugged/vim-multiple-cursors/README.md	/^#### **Q** <kbd>CTRL<\/kbd>+<kbd>n<\/kbd> doesn't seem to work in gVIM?$/;"	t	section:vim-multiple-cursors""FAQ
**Q** How can I select `n` keywords with several keystrokes? `200<C-n>` does not work.	plugged/vim-multiple-cursors/README.md	/^#### **Q** How can I select `n` keywords with several keystrokes? `200<C-n>` does not work.$/;"	t	subsection:vim-multiple-cursors""FAQ""**Q** deoplete insert giberrish, how to fix this?
**Q** deoplete insert giberrish, how to fix this?	plugged/vim-multiple-cursors/README.md	/^### **Q** deoplete insert giberrish, how to fix this?$/;"	S	section:vim-multiple-cursors""FAQ
**Q** is it also working on Mac?	plugged/vim-multiple-cursors/README.md	/^#### **Q** is it also working on Mac?$/;"	t	subsection:vim-multiple-cursors""FAQ""**Q** deoplete insert giberrish, how to fix this?
**❗ This plugin is deprecated, use [vim-visual-multi](https://github.com/mg979/vim-visual-multi) instead ❗**	plugged/vim-multiple-cursors/README.md	/^# **❗ This plugin is deprecated, use [vim-visual-multi](https:\/\/github.com\/mg979\/vim-visua/;"	c
.gsub!(/\\s*?[|]{0,2}=\\s*?/,	plugged/vim-polyglot/autoload/rubycomplete.vim	/^                ln.gsub!(\/\\s*?[|]{0,2}=\\s*?\/, '||=')$/;"	m
/	init.vim	/^map  \/ <Plug>(easymotion-sn)$/;"	m
/	init.vim	/^omap \/ <Plug>(easymotion-tn)$/;"	m
0	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.global.<cr>
0	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
0	plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
0	plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
0	plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
0	plugged/coc.nvim/data/schema.json	/^        "%#CocListMode#-- %{get(b:list_status, \\"mode\\", \\"\\")} --%*",$/;"	s	array:properties.list.statusLineSegments.default
0	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	o	array:definitions.languageServerCommand.allOf
0	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	o	array:definitions.languageServerModule.allOf
0	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	o	array:definitions.languageServerSocket.allOf
0	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
0	plugged/coc.nvim/data/schema.json	/^      "default": [".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
0	plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
0	plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	s	array:properties.coc.source.file.triggerCharacters.default
0	plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["full", "short", "filename", "hidden"],$/;"	s	array:properties.list.source.diagnostics.pathFormat.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["length", "alphabetical"]$/;"	s	array:properties.suggest.defaultSortMethod.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
0	plugged/coc.nvim/data/schema.json	/^      "enum": ["quickfix", "location", "none"]$/;"	s	array:properties.coc.preferences.listOfWorkspaceEdit.enum
0	plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
0	plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
0	plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
0	plugged/coc.nvim/data/schema.json	/^      "type": ["array", "null"],$/;"	s	array:properties.list.statusLineSegments.type
0	plugged/coc.nvim/data/schema.json	/^      "type": ["null", "string"],$/;"	s	array:properties.http.proxyAuthorization.type
0	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	s	array:properties.dialog.floatBorderHighlight.type
0	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	s	array:properties.dialog.floatHighlight.type
0	plugged/coc.nvim/package.json	/^      "<rootDir>"$/;"	s	array:jest.projects
0	plugged/coc.nvim/package.json	/^      "ts",$/;"	s	array:jest.moduleFileExtensions
0	plugged/coc.nvim/package.json	/^    "complete",$/;"	s	array:keywords
1	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.global.<cr>
1	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
1	plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
1	plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
1	plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
1	plugged/coc.nvim/data/schema.json	/^        "%{get(b:list_status, \\"loading\\", \\"\\")}",$/;"	s	array:properties.list.statusLineSegments.default
1	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
1	plugged/coc.nvim/data/schema.json	/^      "default": [".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
1	plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
1	plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["full", "short", "filename", "hidden"],$/;"	s	array:properties.list.source.diagnostics.pathFormat.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["length", "alphabetical"]$/;"	s	array:properties.suggest.defaultSortMethod.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
1	plugged/coc.nvim/data/schema.json	/^      "enum": ["quickfix", "location", "none"]$/;"	s	array:properties.coc.preferences.listOfWorkspaceEdit.enum
1	plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
1	plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
1	plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
1	plugged/coc.nvim/data/schema.json	/^      "type": ["array", "null"],$/;"	s	array:properties.list.statusLineSegments.type
1	plugged/coc.nvim/data/schema.json	/^      "type": ["null", "string"],$/;"	s	array:properties.http.proxyAuthorization.type
1	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	s	array:properties.dialog.floatBorderHighlight.type
1	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	s	array:properties.dialog.floatHighlight.type
1	plugged/coc.nvim/package.json	/^      "tsx",$/;"	s	array:jest.moduleFileExtensions
1	plugged/coc.nvim/package.json	/^    "neovim"$/;"	s	array:keywords
1.0 (04/13/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.0 (04\/13\/2013)$/;"	s
1.1 (04/14/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.1 (04\/14\/2013)$/;"	s
1.10 (04/17/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.10 (04\/17\/2013)$/;"	s
1.11 (04/18/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.11 (04\/18\/2013)$/;"	s
1.12 (04/19/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.12 (04\/19\/2013)$/;"	s
1.13 (04/22/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.13 (04\/22\/2013)$/;"	s
1.14 (04/22/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.14 (04\/22\/2013)$/;"	s
1.15 (04/22/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.15 (04\/22\/2013)$/;"	s
1.16 (04/23/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.16 (04\/23\/2013)$/;"	s
1.2 (04/14/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.2 (04\/14\/2013)$/;"	s
1.3 (04/14/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.3 (04\/14\/2013)$/;"	s
1.4 (04/14/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.4 (04\/14\/2013)$/;"	s
1.5 (04/15/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.5 (04\/15\/2013)$/;"	s
1.6 (04/15/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.6 (04\/15\/2013)$/;"	s
1.7 (04/15/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.7 (04\/15\/2013)$/;"	s
1.8 (04/16/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.8 (04\/16\/2013)$/;"	s
1.9 (04/17/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 1.9 (04\/17\/2013)$/;"	s
1p	init.vim	/^nnoremap 1p "0p$/;"	m
2	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.global.<cr>
2	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
2	plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
2	plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
2	plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
2	plugged/coc.nvim/data/schema.json	/^        "%{get(b:list_status, \\"args\\", \\"\\")}",$/;"	s	array:properties.list.statusLineSegments.default
2	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
2	plugged/coc.nvim/data/schema.json	/^      "default": [".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
2	plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["full", "short", "filename", "hidden"],$/;"	s	array:properties.list.source.diagnostics.pathFormat.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
2	plugged/coc.nvim/data/schema.json	/^      "enum": ["quickfix", "location", "none"]$/;"	s	array:properties.coc.preferences.listOfWorkspaceEdit.enum
2	plugged/coc.nvim/package.json	/^      "json",$/;"	s	array:jest.moduleFileExtensions
2.0 (04/24/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 2.0 (04\/24\/2013)$/;"	s
2.1 (04/26/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 2.1 (04\/26\/2013)$/;"	s
2.2 (06/10/2013)	plugged/vim-multiple-cursors/CHANGELOG.md	/^## 2.2 (06\/10\/2013)$/;"	s
2018-07-12	plugged/coc.nvim/history.md	/^# 2018-07-12$/;"	c
2018-07-13	plugged/coc.nvim/history.md	/^# 2018-07-13$/;"	c
2018-07-14	plugged/coc.nvim/history.md	/^# 2018-07-14$/;"	c
2018-07-15	plugged/coc.nvim/history.md	/^# 2018-07-15$/;"	c
2018-07-16	plugged/coc.nvim/history.md	/^# 2018-07-16$/;"	c
2018-07-17	plugged/coc.nvim/history.md	/^# 2018-07-17$/;"	c
2018-07-19	plugged/coc.nvim/history.md	/^# 2018-07-19$/;"	c
2018-07-20	plugged/coc.nvim/history.md	/^# 2018-07-20$/;"	c
2018-07-21	plugged/coc.nvim/history.md	/^# 2018-07-21$/;"	c
2018-07-23	plugged/coc.nvim/history.md	/^# 2018-07-23$/;"	c
2018-07-24	plugged/coc.nvim/history.md	/^# 2018-07-24$/;"	c
2018-07-27	plugged/coc.nvim/history.md	/^# 2018-07-27$/;"	c
2018-07-28	plugged/coc.nvim/history.md	/^# 2018-07-28$/;"	c
2018-07-29	plugged/coc.nvim/history.md	/^# 2018-07-29$/;"	c
2018-07-30	plugged/coc.nvim/history.md	/^# 2018-07-30$/;"	c
2018-07-31	plugged/coc.nvim/history.md	/^# 2018-07-31$/;"	c
2018-08-02	plugged/coc.nvim/history.md	/^# 2018-08-02$/;"	c
2018-08-03	plugged/coc.nvim/history.md	/^# 2018-08-03$/;"	c
2018-08-04	plugged/coc.nvim/history.md	/^# 2018-08-04$/;"	c
2018-08-05	plugged/coc.nvim/history.md	/^# 2018-08-05$/;"	c
2018-08-07	plugged/coc.nvim/history.md	/^# 2018-08-07$/;"	c
2018-08-08	plugged/coc.nvim/history.md	/^# 2018-08-08$/;"	c
2018-08-09	plugged/coc.nvim/history.md	/^# 2018-08-09$/;"	c
2018-08-10	plugged/coc.nvim/history.md	/^# 2018-08-10$/;"	c
2018-08-11	plugged/coc.nvim/history.md	/^# 2018-08-11$/;"	c
2018-08-12	plugged/coc.nvim/history.md	/^# 2018-08-12$/;"	c
2018-08-14	plugged/coc.nvim/history.md	/^# 2018-08-14$/;"	c
2018-08-15	plugged/coc.nvim/history.md	/^# 2018-08-15$/;"	c
2018-08-16	plugged/coc.nvim/history.md	/^# 2018-08-16$/;"	c
2018-08-17	plugged/coc.nvim/history.md	/^# 2018-08-17$/;"	c
2018-08-21	plugged/coc.nvim/history.md	/^# 2018-08-21$/;"	c
2018-08-23	plugged/coc.nvim/history.md	/^# 2018-08-23$/;"	c
2018-08-30	plugged/coc.nvim/history.md	/^# 2018-08-30$/;"	c
2018-09-07	plugged/coc.nvim/history.md	/^# 2018-09-07$/;"	c
2018-09-10	plugged/coc.nvim/history.md	/^# 2018-09-10$/;"	c
2018-09-15	plugged/coc.nvim/history.md	/^# 2018-09-15$/;"	c
2018-09-20	plugged/coc.nvim/history.md	/^# 2018-09-20$/;"	c
2018-09-24	plugged/coc.nvim/history.md	/^# 2018-09-24$/;"	c
2018-09-27	plugged/coc.nvim/history.md	/^# 2018-09-27$/;"	c
2018-09-28	plugged/coc.nvim/history.md	/^# 2018-09-28$/;"	c
2018-09-30	plugged/coc.nvim/history.md	/^# 2018-09-30$/;"	c
2018-10-01	plugged/coc.nvim/history.md	/^# 2018-10-01$/;"	c
2018-10-05	plugged/coc.nvim/history.md	/^# 2018-10-05$/;"	c
2018-10-14	plugged/coc.nvim/history.md	/^# 2018-10-14$/;"	c
2018-10-18	plugged/coc.nvim/history.md	/^# 2018-10-18$/;"	c
2018-10-21	plugged/coc.nvim/history.md	/^# 2018-10-21$/;"	c
2018-10-25	plugged/coc.nvim/history.md	/^# 2018-10-25$/;"	c
2018-10-29	plugged/coc.nvim/history.md	/^# 2018-10-29$/;"	c
2018-11-02	plugged/coc.nvim/history.md	/^# 2018-11-02$/;"	c
2018-11-07	plugged/coc.nvim/history.md	/^# 2018-11-07$/;"	c
2018-11-13	plugged/coc.nvim/history.md	/^# 2018-11-13$/;"	c
2018-11-19	plugged/coc.nvim/history.md	/^# 2018-11-19$/;"	c
2018-11-24	plugged/coc.nvim/history.md	/^# 2018-11-24$/;"	c
2018-11-28	plugged/coc.nvim/history.md	/^# 2018-11-28$/;"	c
2018-12-05	plugged/coc.nvim/history.md	/^# 2018-12-05$/;"	c
2018-12-06	plugged/coc.nvim/history.md	/^# 2018-12-06$/;"	c
2018-12-08	plugged/coc.nvim/history.md	/^# 2018-12-08$/;"	c
2018-12-12	plugged/coc.nvim/history.md	/^# 2018-12-12$/;"	c
2018-12-17	plugged/coc.nvim/history.md	/^# 2018-12-17$/;"	c
2018-12-20	plugged/coc.nvim/history.md	/^# 2018-12-20$/;"	c
2018-12-27	plugged/coc.nvim/history.md	/^# 2018-12-27$/;"	c
2018-12-31	plugged/coc.nvim/history.md	/^# 2018-12-31$/;"	c
2019-01-01	plugged/coc.nvim/history.md	/^# 2019-01-01$/;"	c
2019-01-03	plugged/coc.nvim/history.md	/^# 2019-01-03$/;"	c
2019-01-09	plugged/coc.nvim/history.md	/^# 2019-01-09$/;"	c
2019-01-24	plugged/coc.nvim/history.md	/^# 2019-01-24$/;"	c
2019-01-28	plugged/coc.nvim/history.md	/^# 2019-01-28$/;"	c
2019-02-02	plugged/coc.nvim/history.md	/^# 2019-02-02$/;"	c
2019-02-04	plugged/coc.nvim/history.md	/^# 2019-02-04$/;"	c
2019-02-11	plugged/coc.nvim/history.md	/^# 2019-02-11$/;"	c
2019-02-12	plugged/coc.nvim/history.md	/^# 2019-02-12$/;"	c
2019-02-17	plugged/coc.nvim/history.md	/^# 2019-02-17$/;"	c
2019-02-22	plugged/coc.nvim/history.md	/^# 2019-02-22$/;"	c
2019-02-25	plugged/coc.nvim/history.md	/^# 2019-02-25$/;"	c
2019-03-03	plugged/coc.nvim/history.md	/^# 2019-03-03$/;"	c
2019-03-11	plugged/coc.nvim/history.md	/^# 2019-03-11$/;"	c
2019-03-16	plugged/coc.nvim/history.md	/^# 2019-03-16$/;"	c
2019-03-19	plugged/coc.nvim/history.md	/^# 2019-03-19$/;"	c
2019-03-24	plugged/coc.nvim/history.md	/^# 2019-03-24$/;"	c
2019-03-28	plugged/coc.nvim/history.md	/^# 2019-03-28$/;"	c
2019-03-31	plugged/coc.nvim/history.md	/^# 2019-03-31$/;"	c
2019-04-09	plugged/coc.nvim/history.md	/^# 2019-04-09$/;"	c
2019-04-27	plugged/coc.nvim/history.md	/^# 2019-04-27$/;"	c
2019-05-07	plugged/coc.nvim/history.md	/^# 2019-05-07$/;"	c
2019-05-30	plugged/coc.nvim/history.md	/^# 2019-05-30$/;"	c
2019-06-09	plugged/coc.nvim/history.md	/^# 2019-06-09$/;"	c
2019-06-12	plugged/coc.nvim/history.md	/^# 2019-06-12$/;"	c
2019-06-15	plugged/coc.nvim/history.md	/^# 2019-06-15$/;"	c
2019-07-01	plugged/coc.nvim/history.md	/^# 2019-07-01$/;"	c
2019-07-11 0.0.73	plugged/coc.nvim/history.md	/^# 2019-07-11 0.0.73$/;"	c
2019-08-18 0.0.74	plugged/coc.nvim/history.md	/^# 2019-08-18 0.0.74$/;"	c
3	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
3	plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
3	plugged/coc.nvim/data/schema.json	/^        "(%L\/%{get(b:list_status, \\"total\\", \\"\\")})",$/;"	s	array:properties.list.statusLineSegments.default
3	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
3	plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
3	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
3	plugged/coc.nvim/data/schema.json	/^      "enum": ["full", "short", "filename", "hidden"],$/;"	s	array:properties.list.source.diagnostics.pathFormat.enum
3	plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
3	plugged/coc.nvim/package.json	/^      "js"$/;"	s	array:jest.moduleFileExtensions
4	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	plugged/coc.nvim/data/schema.json	/^        "%=",$/;"	s	array:properties.list.statusLineSegments.default
4	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
4	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
5	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	plugged/coc.nvim/data/schema.json	/^        "%#CocListPath# %{get(b:list_status, \\"cwd\\", \\"\\")} %l\/%L%*"$/;"	s	array:properties.list.statusLineSegments.default
5	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
5	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	s	array:properties.coc.preferences.jumpCommand.enum
6	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	s	array:properties.suggest.invalidInsertCharacters.default
99	init.vim	/^nnoremap 99 %$/;"	m
<	plugged/vim-polyglot/ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> < :set opfunc=<SID>DecreaseFunc<CR>g@$/;"	m
<	plugged/vim-polyglot/ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> < :call CobolIndentBlock(-v:count1)<CR>$/;"	m
<<	plugged/vim-polyglot/ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> << :call CobolIndentBlock(-1)<CR>$/;"	m
<A-B>	init.vim	/^inoremap <A-B> <C-o>B$/;"	m
<A-W>	init.vim	/^inoremap <A-W> <C-o>W$/;"	m
<A-X>	init.vim	/^inoremap <A-X> <C-o>X$/;"	m
<A-b>	init.vim	/^inoremap <A-b> <C-o>b$/;"	m
<A-d>	init.vim	/^inoremap <A-d> <C-o><C-e>$/;"	m
<A-e>	init.vim	/^inoremap <A-e> <C-o>e<C-o>l$/;"	m
<A-f>	init.vim	/^inoremap <A-f> <ESC>f$/;"	m
<A-h>	init.vim	/^inoremap <A-h> <C-o>h$/;"	m
<A-h>	init.vim	/^nmap <A-h> 3h$/;"	m
<A-j>	init.vim	/^inoremap <A-j> <C-o>j$/;"	m
<A-j>	init.vim	/^nmap <A-j> 3j$/;"	m
<A-k>	init.vim	/^inoremap <A-k> <C-o>k$/;"	m
<A-k>	init.vim	/^nmap <A-k> 3k$/;"	m
<A-l>	init.vim	/^inoremap <A-l> <C-o>a$/;"	m
<A-l>	init.vim	/^nmap <A-l> 3l$/;"	m
<A-p>	init.vim	/^inoremap <A-p> <C-r>*$/;"	m
<A-p>	init.vim	/^nnoremap <A-p> "*p$/;"	m
<A-r>	init.vim	/^nnoremap <A-r> <C-r>$/;"	m
<A-u>	init.vim	/^inoremap <A-u> <C-o><C-y>$/;"	m
<A-w>	init.vim	/^inoremap <A-w> <C-o>w$/;"	m
<A-x>	init.vim	/^inoremap <A-x> <C-o>x$/;"	m
<A-x>	init.vim	/^nnoremap <A-x> ldlh$/;"	m
<A-ç>	init.vim	/^inoremap <expr> <A-ç> "<C-o>mp<C-o>A" . (nr2char(getchar())) . "<C-o>`p"$/;"	m
<A-ç>	init.vim	/^nnoremap <expr> <A-ç> "mpA" . (nr2char(getchar())) . "<ESC>`p"$/;"	m
<BS>	plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <BS> <c-g>c$/;"	m
<C-A>	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> <C-A> :<C-U><C-R>=v:count1<CR>Cycle<CR>$/;"	m
<C-D>	plugged/vim-polyglot/ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-D> <C-R>=<SID>DecreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth/;"	m
<C-N>	plugged/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-N> <C-R>=ada#Completion("\\<lt>C-N>")<cr>$/;"	m
<C-P>	plugged/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-P> <C-R>=ada#Completion("\\<lt>C-P>")<cr>$/;"	m
<C-Space>	init.vim	/^nnoremap <C-Space> i<space><right><ESC>$/;"	m
<C-T>	plugged/vim-polyglot/ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-T> <C-R>=<SID>IncreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth/;"	m
<C-T>	plugged/vim-polyglot/ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-T> :if len(b:pdf_tagstack) > 0 <Bar> call setpos('.',remove(b:pdf_t/;"	m
<C-U>	plugged/vim-polyglot/plugin/polyglot.vim	/^    inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-W>	plugged/vim-polyglot/plugin/polyglot.vim	/^    inoremap <C-W> <C-G>u<C-W>$/;"	m
<C-W><C-D>	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W><C-D>  :<C-U>exe <SID>jump('split',v:count)<SID>foldo/;"	m
<C-W>d	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W>d      :<C-U>exe <SID>jump('split',v:count)<SID>foldo/;"	m
<C-X>	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> <C-X> :<C-U><C-R>=v:count1<CR>Cycle!<CR>$/;"	m
<C-X><C-]>	plugged/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-X><C-]> <C-R>=<SID>ada#Completion("\\<lt>C-X>\\<lt>C-]>")<cr/;"	m
<C-]>	plugged/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#Jump_Tag ('', 'tjump')<cr>$/;"	m
<C-]>	plugged/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#List_Tag ()<cr>$/;"	m
<C-]>	plugged/vim-polyglot/ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-]> :call <SID>Tag()<CR>$/;"	m
<C-a>	plugged/coc.nvim/autoload/coc/float.vim	/^    inoremap <buffer> <C-a> <Home>$/;"	m
<C-e>	plugged/coc.nvim/autoload/coc/float.vim	/^    inoremap <buffer><expr><C-e> pumvisible() ? "\\<C-e>" : "\\<End>"$/;"	m
<C-v>	init.vim	/^inoremap <C-v> <C-r>0$/;"	m
<CR>	init.vim	/^map <CR> i<CR><ESC>$/;"	m
<CR>	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  imap <buffer> <CR> <Plug>L2UAutoSub$/;"	m
<DEL>	plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <DEL> <c-g>c$/;"	m
<F10>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F10> :emenu <C-Z>$/;"	m
<F12>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F12> :g!\/%.*\/normal 0i%<Return>$/;"	m
<F4>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F4> :w<Return>:se makeprg=lilypond\\ \\"%<\\"<Return>:make<Return>:!timidity "%<.m/;"	m
<F5>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F5> :w<Return>:se makeprg=lilypond\\ \\"%<\\"<Return>:make<Return>$/;"	m
<F6>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F6> :!gv --watch "%<.ps" &<Return>$/;"	m
<F7>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F7> :cp<Return>$/;"	m
<F8>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F8> :cn<Return>$/;"	m
<F9>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F9> :w<Return>:se makeprg=make\\ -k<Return>:make<Return>$/;"	m
<Leader>fr	plugged/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fr :FufFile <c-r>=scala#GetRootDirForFuzzyFinder('%:p:h/;"	m
<Leader>fs	plugged/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fs :FufFile <c-r>=scala#GetMainDirForFuzzyFinder('%:p:h/;"	m
<Leader>ft	plugged/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>ft :FufFile <c-r>=scala#GetTestDirForFuzzyFinder('%:p:h/;"	m
<Leader>rf	plugged/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rf :TextileRenderFile<CR>$/;"	m
<Leader>rp	plugged/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rp :TextilePreview<CR>$/;"	m
<Leader>rt	plugged/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rt :TextileRenderTab<CR>$/;"	m
<LeftRelease>	plugged/coc.nvim/autoload/coc/float.vim	/^      nnoremap <buffer><silent> <LeftRelease> :call coc#float#nvim_float_click()<CR>$/;"	m
<LeftRelease>	plugged/coc.nvim/autoload/coc/float.vim	/^    nnoremap <buffer><silent> <LeftRelease> :call coc#float#nvim_float_click()<CR>$/;"	m
<LocalLeader><LocalLeader>	plugged/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> <LocalLeader><LocalLeader> $/;"	m
<LocalLeader>C	plugged/vim-polyglot/ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	plugged/vim-polyglot/ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>C	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    xmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>S	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>S <Plug>OCamlSwitchNewWin$/;"	m
<LocalLeader>a	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>a 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTE/;"	m
<LocalLeader>b	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>b 0:call IdrisAddClause(0)<ENTER>$/;"	m
<LocalLeader>b	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>b 0:call IdrisAddClause(0)<ENTER>$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>c :call IdrisCaseSplit()<ENTER>$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>c :call IdrisCaseSplit()<ENTER>$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    xmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	plugged/vim-polyglot/ftplugin/spec.vim	/^		map <buffer> <LocalLeader>c <Plug>SpecChangelog$/;"	m
<LocalLeader>d	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>d 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTE/;"	m
<LocalLeader>d	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>d 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTE/;"	m
<LocalLeader>e	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>e :call IdrisEval()<ENTER>$/;"	m
<LocalLeader>e	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>e :call IdrisEval()<ENTER>$/;"	m
<LocalLeader>f	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>f :call IdrisRefine()<ENTER>$/;"	m
<LocalLeader>f	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>f :call IdrisRefine()<ENTER>$/;"	m
<LocalLeader>g	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>g :call IdrisGenerateDef()<ENTER>$/;"	m
<LocalLeader>h	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>h :call IdrisShowDoc()<ENTER>$/;"	m
<LocalLeader>h	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>h :call IdrisShowDoc()<ENTER>$/;"	m
<LocalLeader>i	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>i 0:call IdrisResponseWin()<ENTER>$/;"	m
<LocalLeader>i	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>i 0:call IdrisResponseWin()<ENTER>$/;"	m
<LocalLeader>l	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>l :call IdrisMakeLemma()<ENTER>$/;"	m
<LocalLeader>l	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>l :call IdrisMakeLemma()<ENTER>$/;"	m
<LocalLeader>m	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>m :call IdrisAddMissing()<ENTER>$/;"	m
<LocalLeader>m	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>m :call IdrisAddMissing()<ENTER>$/;"	m
<LocalLeader>mc	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>mc :call IdrisMakeCase()<ENTER>$/;"	m
<LocalLeader>mc	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>mc :call IdrisMakeCase()<ENTER>$/;"	m
<LocalLeader>md	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>md 0:call search(":")<ENTER>b:call IdrisAddClause(1)<ENT/;"	m
<LocalLeader>md	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>md 0:call search(":")<ENTER>b:call IdrisAddClause(1)<ENT/;"	m
<LocalLeader>o	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>o :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>o	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>o :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>p	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>p :call IdrisProofSearch(1)<ENTER>$/;"	m
<LocalLeader>p	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>p :call IdrisProofSearch(1)<ENTER>$/;"	m
<LocalLeader>q	plugged/vim-polyglot/ftplugin/mail.vim	/^    nmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>q	plugged/vim-polyglot/ftplugin/mail.vim	/^    vmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>r	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>r :call IdrisReload(0)<ENTER>$/;"	m
<LocalLeader>r	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>r :call IdrisReload(0)<ENTER>$/;"	m
<LocalLeader>s	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>s :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>s	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>s <Plug>OCamlSwitchEdit$/;"	m
<LocalLeader>t	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>t :call IdrisShowType()<ENTER>$/;"	m
<LocalLeader>t	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>t :call IdrisShowType()<ENTER>$/;"	m
<LocalLeader>t	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>t <Plug>OCamlPrintType$/;"	m
<LocalLeader>t	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  xmap <buffer> <LocalLeader>t <Plug>OCamlPrintType$/;"	m
<LocalLeader>w	plugged/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>w 0:call IdrisMakeWith()<ENTER>$/;"	m
<LocalLeader>w	plugged/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>w 0:call IdrisMakeWith()<ENTER>$/;"	m
<M-1>	init.vim	/^map <silent> <M-1> $/;"	m
<M-2>	init.vim	/^map <silent> <M-2> :bp<CR>$/;"	m
<M-3>	init.vim	/^map <silent> <M-3> :bn<CR>$/;"	m
<M-a>	init.vim	/^noremap <M-a> <C-i>$/;"	m
<M-b>	init.vim	/^noremap <M-b> <C-o>$/;"	m
<M-e>	init.vim	/^nmap <M-e> :NERDTreeToggle<CR>$/;"	m
<M-i>	init.vim	/^inoremap <M-i> <C-o>3<C-y>$/;"	m
<M-i>	init.vim	/^nnoremap <M-i> 3<C-y>$/;"	m
<M-o>	init.vim	/^inoremap <M-o> <C-o>3zl$/;"	m
<M-o>	init.vim	/^nnoremap <M-o> 3zl$/;"	m
<M-s>	init.vim	/^map <silent> <M-s> :Startify<CR>$/;"	m
<M-t>	init.vim	/^nmap <M-t> :TagbarToggle<CR>$/;"	m
<M-u>	init.vim	/^inoremap <M-u> <C-o>3<C-e>$/;"	m
<M-u>	init.vim	/^nnoremap <M-u> 3<C-e>$/;"	m
<M-y>	init.vim	/^inoremap <M-y> <C-o>3zh$/;"	m
<M-y>	init.vim	/^nnoremap <M-y> 3zh$/;"	m
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(JuliaDocPrompt)	plugged/vim-polyglot/ftplugin/julia.vim	/^nnoremap <silent><buffer> <Plug>(JuliaDocPrompt) :<C-u>call julia#doc#prompt()<CR>$/;"	m
<Plug>(JuliaDocPrompt)	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^nnoremap <silent><buffer> <Plug>(JuliaDocPrompt) :<C-u>call julia#doc#prompt()<CR>$/;"	m
<Plug>(coc-classobj-a)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-classobj-a)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-classobj-i)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-classobj-i)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-codeaction)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction-line)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-line)       :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction-selected)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSele/;"	m
<Plug>(coc-codeaction-selected)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction'/;"	m
<Plug>(coc-codelens-action)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-command-repeat)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')</;"	m
<Plug>(coc-cursors-operator)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-operator) :<C-u>set operatorfunc=<SID>CursorRangeFromSelect/;"	m
<Plug>(coc-cursors-position)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-position) :<C-u>call coc#rpc#request('cursorsSelect', [bufn/;"	m
<Plug>(coc-cursors-range)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-cursors-range)    :<C-u>call coc#rpc#request('cursorsSelect', [bufn/;"	m
<Plug>(coc-cursors-word)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-word)     :<C-u>call coc#rpc#request('cursorsSelect', [bufn/;"	m
<Plug>(coc-declaration)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-declaration)           :<C-u>call       CocActionAsync('jumpDeclara/;"	m
<Plug>(coc-definition)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-definition)            :<C-u>call       CocActionAsync('jumpDefinit/;"	m
<Plug>(coc-diagnostic-info)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticI/;"	m
<Plug>(coc-diagnostic-next)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticN/;"	m
<Plug>(coc-diagnostic-next-error)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticN/;"	m
<Plug>(coc-diagnostic-prev)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticP/;"	m
<Plug>(coc-diagnostic-prev-error)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticP/;"	m
<Plug>(coc-fix-current)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix'/;"	m
<Plug>(coc-float-hide)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-hide)            :<C-u>call       coc#float#close_all()<CR>$/;"	m
<Plug>(coc-float-jump)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-jump)            :<c-u>call       coc#float#jump()<cr>$/;"	m
<Plug>(coc-format)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR/;"	m
<Plug>(coc-format-selected)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFro/;"	m
<Plug>(coc-format-selected)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelec/;"	m
<Plug>(coc-funcobj-a)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-funcobj-a)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-funcobj-i)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-funcobj-i)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectSymbolRange', [/;"	m
<Plug>(coc-implementation)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-implementation)        :<C-u>call       CocActionAsync('jumpImpleme/;"	m
<Plug>(coc-openlink)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')</;"	m
<Plug>(coc-range-select)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     ''/;"	m
<Plug>(coc-range-select)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect/;"	m
<Plug>(coc-range-select-backward)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select-backward) :<C-u>call       CocActionAsync('rangeSelect/;"	m
<Plug>(coc-refactor)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-refactor)              :<C-u>call       CocActionAsync('refactor')</;"	m
<Plug>(coc-references)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references)            :<C-u>call       CocActionAsync('jumpReferen/;"	m
<Plug>(coc-references-used)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references-used)       :<C-u>call       CocActionAsync('jumpUsed')</;"	m
<Plug>(coc-rename)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR/;"	m
<Plug>(coc-type-definition)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-type-definition)       :<C-u>call       CocActionAsync('jumpTypeDef/;"	m
<Plug>(crystal-format)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-format)             :<C-u>CrystalFormat<CR>$/;"	m
<Plug>(crystal-jump-to-definition)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-jump-to-definition) :<C-u>CrystalDef<CR>$/;"	m
<Plug>(crystal-show-context)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-show-context)       :<C-u>CrystalContext<CR>$/;"	m
<Plug>(crystal-spec-run-all)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-all)       :<C-u>CrystalSpecRunAll<CR>$/;"	m
<Plug>(crystal-spec-run-current)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-current)   :<C-u>CrystalSpecRunCurrent<CR>$/;"	m
<Plug>(crystal-spec-switch)	plugged/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-switch)        :<C-u>CrystalSpecSwitch<CR>$/;"	m
<Plug>(llvm-goto-definition)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-goto-definition) :<C-u>call <SID>goto_definition()<CR>$/;"	m
<Plug>(llvm-move-block-next)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-move-block-next) :<C-u>call <SID>move_to_following_block()<CR>$/;"	m
<Plug>(llvm-move-block-prev)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-move-block-prev) :<C-u>call <SID>move_to_pred_block()<CR>$/;"	m
<Plug>(llvm-next-section-begin)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-next-section-begin) :<C-u>call <SID>next_section(1)<CR>$/;"	m
<Plug>(llvm-next-section-end)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-next-section-end) :<C-u>call <SID>next_section(0)<CR>$/;"	m
<Plug>(llvm-prev-section-begin)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-prev-section-begin) :<C-u>call <SID>prev_section(1)<CR>$/;"	m
<Plug>(llvm-prev-section-end)	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-prev-section-end) :<C-u>call <SID>prev_section(0)<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-apply) :<C-u>call <SID>apply_user_input_next('v')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-detect) :<C-u>call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-input) :<C-u>call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-new)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
<Plug>(multiple-cursors-prev)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-wait) :<C-u>call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug><cfile>	plugged/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
<Plug><ctag>	plugged/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug>AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
<Plug>BUncomOff	plugged/vim-polyglot/ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOff	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  xnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOn	plugged/vim-polyglot/ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i\/*<ESC>`>o<ESC>0i*\/<ESC>`<$/;"	m
<Plug>BUncomOn	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  xnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i(*<ESC>`>o<ESC>0i*)<ESC>`<$/;"	m
<Plug>CocRefresh	plugged/coc.nvim/plugin/coc.vim	/^inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>$/;"	m
<Plug>Comment	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Comment          :call <SID>Comment('c')<CR>$/;"	m
<Plug>DeComment	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>DeComment        :call <SID>Comment('u')<CR>$/;"	m
<Plug>L2UAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  inoremap <buffer><expr> <Plug>L2UAutoSub LaTeXtoUnicode#AutoSub("\\n", "\\<CR>")$/;"	m
<Plug>L2UTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  inoremap <buffer><expr> <Plug>L2UTab LaTeXtoUnicode#Tab()$/;"	m
<Plug>LUncomOff	plugged/vim-polyglot/ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOff <ESC>:s\/^\\\/\\* \\(.*\\) \\*\\\/\/\\1\/<CR>$/;"	m
<Plug>LUncomOff	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>LUncomOn	plugged/vim-polyglot/ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i\/* <ESC>$A *\/<ESC>`z$/;"	m
<Plug>LUncomOn	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn gI(* <End> *)<ESC>$/;"	m
<Plug>MailQuote	plugged/vim-polyglot/ftplugin/mail.vim	/^  nnoremap <buffer> <Plug>MailQuote :.,$s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>MailQuote	plugged/vim-polyglot/ftplugin/mail.vim	/^  vnoremap <buffer> <Plug>MailQuote :s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>Markdown_EditUrlUnderCursor	plugged/vim-polyglot/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_EditUrlUnderCursor :call <sid>EditUrlUnderCursor()<cr>$/;"	m
<Plug>Markdown_OpenUrlUnderCursor	plugged/vim-polyglot/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_OpenUrlUnderCursor :call <sid>OpenUrlUnderCursor()<cr>$/;"	m
<Plug>OCamlPrintType	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <silent> <Plug>OCamlPrintType :<C-U>call Ocaml_print_type("normal")<CR>$/;"	m
<Plug>OCamlPrintType	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  xnoremap <silent> <Plug>OCamlPrintType :<C-U>call Ocaml_print_type("visual")<CR>`<$/;"	m
<Plug>OCamlSwitchEdit	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <Plug>OCamlSwitchEdit :<C-u>call OCaml_switch(0)<CR>$/;"	m
<Plug>OCamlSwitchNewWin	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <Plug>OCamlSwitchNewWin :<C-u>call OCaml_switch(1)<CR>$/;"	m
<Plug>RacketDoc	plugged/vim-polyglot/ftplugin/racket.vim	/^nnoremap <buffer> <Plug>RacketDoc :silent !raco docs <cword><cr>:redraw!<cr>$/;"	m
<Plug>RacketDoc	plugged/vim-polyglot/ftplugin/racket.vim	/^vnoremap <buffer> <Plug>RacketDoc :call <SID>Racket_visual_doc()<cr>$/;"	m
<Plug>SpecChangelog	plugged/vim-polyglot/ftplugin/spec.vim	/^       noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>$/;"	m
<Plug>Traditional	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Traditional      :call <SID>Comment('t')<CR>$/;"	m
<Plug>VisualComment	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualComment     :'<,'>call <SID>Comment('c')<CR>$/;"	m
<Plug>VisualDeComment	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualDeComment   :'<,'>call <SID>Comment('u')<CR>$/;"	m
<Plug>VisualTraditional	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualTraditional :'<,'>call <SID>Comment('t')<CR>$/;"	m
<S-F12>	plugged/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <S-F12> :g\/%.*\/normal 0x<Return>$/;"	m
<S-TAB>	init.vim	/^imap <S-TAB> <C-d>$/;"	m
<S-TAB>	init.vim	/^map <S-TAB> <<$/;"	m
<SID>:	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<SID>c:	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>foldopen	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  cnoremap <SID>foldopen <Bar>if &foldopen =~# 'tag'<Bar>exe 'norm! zv'<Bar>endif$/;"	m
<SID>tagzv	plugged/vim-polyglot/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
<SPACE>	init.vim	/^nnoremap <SPACE> <Nop>$/;"	m
<TAB>	init.vim	/^map <TAB> i<TAB><ESC>l$/;"	m
<Tab>	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  imap <buffer> <Tab> <Plug>L2UTab$/;"	m
<Tab>	plugged/vim-polyglot/ftplugin/cobol.vim	/^        inoremap <silent> <buffer> <Tab> <C-R>=<SID>Tab()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<bs>	plugged/vim-polyglot/ftplugin/ada.vim	/^      inoremap <silent> <unique> <buffer> <bs> <C-R>=ada#Insert_Backspace ()<cr>$/;"	m
<c-h>	plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <c-h> <c-g>c$/;"	m
<c-r>	plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	a	object:explorer.keyMappings.global
<esc>	plugged/coc.nvim/autoload/coc/list.vim	/^  nnoremap <silent><nowait><buffer> <esc> <C-w>c$/;"	m
<leader>	init.vim	/^nnoremap <silent> <leader> :WhichKey '<Space>'<CR>$/;"	m
<leader>	init.vim	/^vnoremap <leader> <ESC>$/;"	m
<leader>3	init.vim	/^map <leader>3 gcc$/;"	m
<leader><leader>w	init.vim	/^nnoremap <leader><leader>w :w<CR>$/;"	m
<leader>E	init.vim	/^map <leader>E <Plug>(easymotion-bd-E)$/;"	m
<leader>O	init.vim	/^nnoremap <silent> <leader>O :<C-u>call append(line(".")-1,, v:count1))<CR>$/;"	m
<leader>W	init.vim	/^map <leader>W <Plug>(easymotion-bd-W)$/;"	m
<leader>b	init.vim	/^nnoremap <leader>b ^$/;"	m
<leader>cb	init.vim	/^map <leader>cb :bd<CR>$/;"	m
<leader>ct	init.vim	/^map <leader>ct :tabclose<CR>$/;"	m
<leader>e	init.vim	/^map <leader>e <Plug>(easymotion-bd-e)$/;"	m
<leader>e	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <leader>e :CocCommand explorer<CR>$/;"	m
<leader>f	init.vim	/^map <silent> <leader>f :Files<CR>$/;"	m
<leader>g.	init.vim	/^nmap <leader>g. :Git add .<CR>$/;"	m
<leader>ga	init.vim	/^nmap <leader>ga :Git add$/;"	m
<leader>gc	init.vim	/^nmap <leader>gc :Git commit<CR>$/;"	m
<leader>gf	init.vim	/^nmap <leader>gf :diffget \/\/2<CR>$/;"	m
<leader>gh	init.vim	/^nmap <leader>gh :diffget \/\/3<CR>$/;"	m
<leader>gs	init.vim	/^nmap <leader>gs :Git<CR>$/;"	m
<leader>hh	init.vim	/^nnoremap <leader>hh :set cursorline! cursorcolumn!<CR>$/;"	m
<leader>j	init.vim	/^map <leader>j <Plug>(easymotion-j)$/;"	m
<leader>k	init.vim	/^map <leader>k <Plug>(easymotion-k)$/;"	m
<leader>l	init.vim	/^map <leader>l <Plug>(easymotion-overwin-line)$/;"	m
<leader>n	init.vim	/^nnoremap <leader>n :e %:h\/$/;"	m
<leader>nt	init.vim	/^map <leader>nt :tabnew<CR>$/;"	m
<leader>o	init.vim	/^nnoremap <silent> <leader>o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>$/;"	m
<leader>q	init.vim	/^map <leader>q <Plug>(easymotion-overwin-w)   $/;"	m
<leader>qq	init.vim	/^nnoremap <leader>qq :q!<CR>$/;"	m
<leader>t	init.vim	/^map <silent> <leader>t :FloatermNew<CR>$/;"	m
<leader>v	init.vim	/^nnoremap <leader>v <C-v>$/;"	m
<leader>w	init.vim	/^map <leader>w <Plug>(easymotion-overwin-w)$/;"	m
<leader>z	init.vim	/^nnoremap <leader>z :MaximizerToggle<CR>$/;"	m
<leader>ç	init.vim	/^nnoremap <leader>ç ZZ$/;"	m
<localleader>R	plugged/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>R :call smt2#RunSolverAndShowResult()<cr>$/;"	m
<localleader>r	plugged/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>r :call smt2#RunSolver()<cr>$/;"	m
<localleader>v	plugged/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>v :call smt2#PrintSolverVersion()<cr>$/;"	m
<plug>(-fzf-/)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<space>e	plugged/coc.nvim/plugin/coc.vim	/^nmap <silent> <space>e :CocCommand explorer<CR>$/;"	m
<space>f	plugged/coc.nvim/plugin/coc.vim	/^nmap <space>f :CocCommand explorer --preset floatingRightside<CR>$/;"	m
<tab>	plugged/vim-polyglot/autoload/ledger.vim	/^    nnoremap <silent> <buffer> <tab> <c-w><c-w>$/;"	m
<tab>	plugged/vim-polyglot/autoload/ledger.vim	/^  nnoremap <silent> <buffer> <tab> <c-w><c-p>$/;"	m
=	plugged/vim-polyglot/autoload/rubycomplete.vim	/^          ln = buf[x]$/;"	m
=	plugged/vim-polyglot/autoload/rubycomplete.vim	/^      ln = buf[x]$/;"	m
=	plugged/vim-polyglot/autoload/rubycomplete.vim	/^      nm = "%s(::.*)*\\", %s, \\"" % [ name, nums.last ]$/;"	m
=	plugged/vim-polyglot/ftplugin/terraform.vim	/^  inoremap <buffer> <silent> = =<Esc>:call terraform#align()<CR>a$/;"	m
=>	plugged/vim-polyglot/after/ftplugin/puppet.vim	/^    inoremap <buffer> <silent> => =><Esc>:call puppet#align#AlignHashrockets()<CR>$a$/;"	m
>	plugged/vim-polyglot/ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> > :set opfunc=<SID>IncreaseFunc<CR>g@$/;"	m
>	plugged/vim-polyglot/ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> > :call CobolIndentBlock(v:count1)<CR>$/;"	m
>>	plugged/vim-polyglot/ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> >> :call CobolIndentBlock(1)<CR>$/;"	m
Abaqus_ToggleComment	plugged/vim-polyglot/ftplugin/abaqus.vim	/^function! <SID>Abaqus_ToggleComment() range$/;"	f
About	plugged/vim-multiple-cursors/README.md	/^## About$/;"	s	chapter:vim-multiple-cursors
Add a cursor to each line of your visual selection	plugged/vim-multiple-cursors/README.md	/^### Add a cursor to each line of your visual selection$/;"	S	section:vim-multiple-cursors""About
AddEntry	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function AddEntry()$/;"	f
AddIndentByInd	plugged/vim-polyglot/indent/autohotkey.vim	/^function! AddIndentByInd(indent)$/;"	f
Advanced customization	plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
AnonymousFunctionaf1e5c4a0100	plugged/coc.nvim/build/index.js	/^\/******\/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__./;"	f	function:__webpack_require__.t
AntSyntaxScript	plugged/vim-polyglot/syntax/ant.vim	/^    fun AntSyntaxScript(tagname, synfilename)$/;"	f
Articles	plugged/coc.nvim/Readme.md	/^## Articles$/;"	s
Auto Pairs	plugged/auto-pairs/README.md	/^Auto Pairs$/;"	c
AutoPairsBackInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsBackInsert()$/;"	f
AutoPairsDefaultPairs	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefaultPairs()$/;"	f
AutoPairsDefine	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefine(pairs, ...)$/;"	f
AutoPairsDelete	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDelete()$/;"	f
AutoPairsFastWrap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsFastWrap()$/;"	f
AutoPairsInit	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInit()$/;"	f
AutoPairsInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInsert(key)$/;"	f
AutoPairsJump	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsJump()$/;"	f
AutoPairsMap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMap(key)$/;"	f
AutoPairsMoveCharacter	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsReturn()$/;"	f
AutoPairsSpace	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsSpace()$/;"	f
AutoPairsToggle	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsToggle()$/;"	f
AutoPairsTryInit	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsTryInit()$/;"	f
Autoindent	plugged/vim-polyglot/README.md	/^## Autoindent$/;"	s
BASE_URL	plugged/vim-polyglot/scripts/build	/^BASE_URL = 'https:\/\/raw.githubusercontent.com\/github\/linguist\/master'$/;"	C
Backers	plugged/coc.nvim/Readme.md	/^## Backers$/;"	s
Before submitting	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
Buffer Level Pairs Setting	plugged/auto-pairs/README.md	/^Buffer Level Pairs Setting$/;"	s	chapter:Auto Pairs
Builtin	plugged/vim-polyglot/syntax/8th.vim	/^com! -nargs=+ Builtin syn keyword eighthBuiltin <args>$/;"	c
Builtin	plugged/vim-polyglot/syntax/reva.vim	/^com! -nargs=+ Builtin syn keyword revaBuiltin <args>$/;"	c
BzlFoldText	plugged/vim-polyglot/ftplugin/bzl.vim	/^function BzlFoldText() abort$/;"	f
CCode	plugged/vim-polyglot/ftplugin/vala.vim	/^command! -buffer -bar CCode call CCode()$/;"	c
CCode	plugged/vim-polyglot/ftplugin/vala.vim	/^function! CCode() abort$/;"	f
CMakeGetIndent	plugged/vim-polyglot/indent/cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
CSVCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVCol(...) "{{{3$/;"	f
CSVCount	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVCount(col, fmt, first, last, ...) "{{{3$/;"	f
CSVField	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVField(x, y, ...) "{{{3$/;"	f
CSVMax	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVMax(col, fmt, first, last) "{{{3$/;"	f
CSVMin	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVMin(col, fmt, first, last) "{{{3$/;"	f
CSVPat	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVPat(colnr, ...) "{{{3$/;"	f
CSVSum	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVSum(col, fmt, first, last) "{{{3$/;"	f
CSVWidth	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSVWidth(...) "{{{3$/;"	f
CSV_CloseBuffer	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSV_CloseBuffer(buffer) "{{{3$/;"	f
CSV_Menu	plugged/vim-polyglot/autoload/csv.vim	/^        augroup CSV_Menu$/;"	a
CSV_Preview	plugged/vim-polyglot/autoload/csv.vim	/^          aug CSV_Preview$/;"	a
CSV_Preview	plugged/vim-polyglot/autoload/csv.vim	/^        aug CSV_Preview$/;"	a
CSV_QuitPre	plugged/vim-polyglot/autoload/csv.vim	/^        augroup CSV_QuitPre$/;"	a
CSV_QuitPre	plugged/vim-polyglot/autoload/csv.vim	/^    aug CSV_QuitPre$/;"	a
CSV_SetSplitOptions	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSV_SetSplitOptions(window) "{{{3$/;"	f
CSV_WCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! CSV_WCol(...) "{{{3$/;"	f
CdlAsignment	plugged/vim-polyglot/indent/cdl.vim	/^fun! CdlAsignment(lnum, line)$/;"	f
CdlGetIndent	plugged/vim-polyglot/indent/cdl.vim	/^fun! CdlGetIndent(lnum)$/;"	f
CheckItems	plugged/vim-polyglot/tests/native.vim	/^func CheckItems(checks)$/;"	f
CheckSaneSearchPattern	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>CheckSaneSearchPattern() "{{{3$/;"	f
CloseBug	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function CloseBug()$/;"	f
CobolIndentBlock	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! CobolIndentBlock(shift)$/;"	f
CocAction	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f/;"	c
CocAction	plugged/coc.nvim/plugin/coc.vim	/^function! CocAction(name, ...) abort$/;"	f
CocActionAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(name, ...) abort$/;"	f
CocCommand	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runComm/;"	c
CocConfig	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocDiagnostics	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? CocDiagnostics  :call s:OpenDiagnostics(<f-args>)$/;"	c
CocDisable	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocEnable	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable(0)$/;"	c
CocFirst	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocFirst        :call coc#rpc#notify('listFirs/;"	c
CocFix	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'q/;"	c
CocHasProvider	plugged/coc.nvim/plugin/coc.vim	/^function! CocHasProvider(name) abort$/;"	f
CocInfo	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInstall	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -bar -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_ext/;"	c
CocLast	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocLast         :call coc#rpc#notify('listLast/;"	c
CocList	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList'/;"	c
CocListCancel	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -complete=custom,coc#list#names CocListCancel   :call coc#rpc#notify('listCanc/;"	c
CocListResume	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocListResume   :call coc#rpc#notify('listResu/;"	c
CocLocalConfig	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocLocalConfig  :call coc#rpc#notify('openLocalConfig', [])$/;"	c
CocLocations	plugged/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocationsAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocNext	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocNext         :call coc#rpc#notify('listNext/;"	c
CocNotify	plugged/coc.nvim/plugin/coc.vim	/^function! CocNotify(...) abort$/;"	f
CocOpenLog	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocPopupCallback	plugged/coc.nvim/plugin/coc.vim	/^function! CocPopupCallback(bufnr, arglist) abort$/;"	f
CocPrev	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocPrev         :call coc#rpc#notify('listPrev/;"	c
CocRebuild	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRebuild      :call coc#util#rebuild()$/;"	c
CocRegistNotification	plugged/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRequest	plugged/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequestAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRestart	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocSearch	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:SearchOptions  CocSearch    :call coc#rpc#notify('search', /;"	c
CocStart	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocTagFunc	plugged/coc.nvim/plugin/coc.vim	/^function! CocTagFunc(pattern, flags, info) abort$/;"	f
CocUninstall	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call CocActionAsync('uninstall/;"	c
CocUpdate	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdateSync	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -bar CocUpdateSync   :call coc#util#update_extensions()$/;"	c
CocWatch	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=1 -complete=custom,s:LoadedExtensions  CocWatch    :call coc#rpc#notify('watchEx/;"	c
CoffeeAuWatch	plugged/vim-polyglot/ftplugin/coffee.vim	/^  augroup CoffeeAuWatch$/;"	a
CoffeeBufNew	plugged/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufNew | augroup END$/;"	a
CoffeeBufUpdate	plugged/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufUpdate | augroup END$/;"	a
CoffeeCompile	plugged/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeLint	plugged/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bang -bar -nargs=* CoffeeLint$/;"	c
CoffeeMake	plugged/vim-polyglot/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake$/;"	c
CoffeeRun	plugged/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bar -nargs=* CoffeeRun$/;"	c
CoffeeUpdateMakePrg	plugged/vim-polyglot/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
CoffeeWatch	plugged/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeWatch call s:CoffeeWatch(<q-args>)$/;"	c
Command-local options	plugged/fzf.vim/README.md	/^### Command-local options$/;"	S	section:fzf :heart: vim""Customization
Commands	plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
CompilerSet	plugged/vim-polyglot/compiler/ant.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/cargo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/cs.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/cucumber.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/dot.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/gradle.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/gradlew.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/haml.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/ledger.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/nim.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/nix-build.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/powershell.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/python.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/rustc.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/sass.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/sbt.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/swift.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/tcl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/tex.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-polyglot/compiler/tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Completion functions	plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
Contents	plugged/vim-multiple-cursors/README.md	/^## Contents$/;"	s	chapter:vim-multiple-cursors
Contributing	plugged/vim-multiple-cursors/README.md	/^## Contributing$/;"	s	chapter:vim-multiple-cursors
Contributing	plugged/vim-polyglot/README.md	/^## Contributing$/;"	s
Contributors	plugged/auto-pairs/README.md	/^Contributors$/;"	s	chapter:Auto Pairs
Contributors	plugged/vim-multiple-cursors/README.md	/^### Contributors$/;"	S	section:vim-multiple-cursors""Contributing
CountWrapper	plugged/vim-polyglot/ftplugin/vhdl.vim	/^function! <SID>CountWrapper(cmd)$/;"	f
Credit	plugged/vim-multiple-cursors/README.md	/^## Credit$/;"	s	chapter:vim-multiple-cursors
CrystalContext	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalContext        echo crystal_lang#context(expand('%'), getpos('./;"	c
CrystalDef	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=0 CrystalDef            call crystal_lang#jump_to_definition(expand('%')/;"	c
CrystalExpand	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalExpand         echo crystal_lang#expand(expand('%'), getpos('.'/;"	c
CrystalFormat	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* -bar CrystalFormat    call crystal_lang#format(<q-args>, 0)$/;"	c
CrystalHierarchy	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalHierarchy      echo crystal_lang#type_hierarchy(expand('%'), <q/;"	c
CrystalImpl	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalImpl           echo crystal_lang#impl(expand('%'), getpos('.'),/;"	c
CrystalSpecRunAll	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunAll     call crystal_lang#run_all_spec(<f-args>)$/;"	c
CrystalSpecRunCurrent	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunCurrent call crystal_lang#run_current_spec(<f-args>)$/;"	c
CrystalSpecSwitch	plugged/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecSwitch     call crystal_lang#switch_spec_file(<f-args>)$/;"	c
CucumberComplete	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
Custom completion	plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom statusline	plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Cycle	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -count=1 -bar -bang Cycle call s:cycle(<bang>0 ? -<count> : <count>)$/;"	c
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DartIndent	plugged/vim-polyglot/indent/dart.vim	/^function! DartIndent()$/;"	f
Date	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Date()$/;"	f
DebChangelogFoldText	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebChangelogFoldText()$/;"	f
DebCompleteBugs	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^fun! DebCompleteBugs(findstart, base)$/;"	f
DebControlFold	plugged/vim-polyglot/ftplugin/debcontrol.vim	/^function! DebControlFold(l)$/;"	f
DebControlFoldText	plugged/vim-polyglot/ftplugin/debcontrol.vim	/^function! DebControlFoldText()$/;"	f
DebGetChangelogFold	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebGetChangelogFold(lnum)$/;"	f
DebGetPkgSrcName	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebGetPkgSrcName(lineno)$/;"	f
Debugging	plugged/nvim-yarp/README.md	/^## Debugging$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Default settings	plugged/vim-polyglot/README.md	/^## Default settings$/;"	s
Dependencies	plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Describe the bug	plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Describe the bug$/;"	s
DhallFormat	plugged/vim-polyglot/ftplugin/dhall.vim	/^function! DhallFormat()$/;"	f
DiffGitCached	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^  command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:git/;"	c
DiffGitCached	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdi/;"	c
Distribution	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function Distribution(dist)$/;"	f
DoHighlight	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>DoHighlight() "{{{3$/;"	f
DoSyntaxDefinitions	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>DoSyntaxDefinitions() "{{{3$/;"	f
Drop	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Drop   :<line1>,<line2>call s:choose('drop')$/;"	c
DylanGetIndent	plugged/vim-polyglot/indent/dylan.vim	/^function DylanGetIndent()$/;"	f
E2v	plugged/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range E2v :<line1>,<line2>call <SID>ExtendedRegex2VimRegexLineWise(<q-args>)$/;"	c
E2v	plugged/vim-polyglot/scripts/eregex.vim	/^function! E2v(extendedregex, ...)$/;"	f
Edit	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Edit   :<line1>,<line2>call s:choose('edit')$/;"	c
Email	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Email()$/;"	f
Environment Information	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Environment Information$/;"	s	chapter:Problems summary
ErlangFoldText	plugged/vim-polyglot/ftplugin/erlang.vim	/^function ErlangFoldText()$/;"	f
ErlangIndent	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangIndent()$/;"	f
ErlangShowTokensInCurrentLine	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInCurrentLine()$/;"	f
ErlangShowTokensInLine	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInLine(line)$/;"	f
ErubyAtCursor	plugged/vim-polyglot/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
Esc	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>Esc(val, char) "{{{3 $/;"	f
Example for existing neovim rplugin porting to Vim 8	plugged/nvim-yarp/README.md	/^## Example for existing neovim rplugin porting to Vim 8$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Example vim configuration	plugged/coc.nvim/Readme.md	/^## Example vim configuration$/;"	s
Example: Advanced ripgrep integration	plugged/fzf.vim/README.md	/^#### Example: Advanced ripgrep integration$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: Customizing `Files` command	plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `Rg` command with preview window	plugged/fzf.vim/README.md	/^#### Example: `Rg` command with preview window$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Expected	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Expected$/;"	s	chapter:Problems summary
ExtendedRegex2VimRegex	plugged/vim-polyglot/scripts/eregex.vim	/^function! ExtendedRegex2VimRegex(data)$/;"	f
FAQ	plugged/vim-multiple-cursors/README.md	/^## FAQ$/;"	s	chapter:vim-multiple-cursors
FalconGetIndent	plugged/vim-polyglot/indent/falcon.vim	/^function FalconGetIndent(...)$/;"	f
Features	plugged/auto-pairs/README.md	/^Features$/;"	s	chapter:Auto Pairs
Feedback	plugged/coc.nvim/Readme.md	/^## Feedback$/;"	s
FermHiLink	plugged/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight default link <args>$/;"	c
FermHiLink	plugged/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight link <args>$/;"	c
Finalise	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function Finalise()$/;"	f
FinaliseMenu	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>FinaliseMenu()$/;"	f
Finalised	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Finalised()$/;"	f
FindOpenBrace	plugged/vim-polyglot/indent/llvm.vim	/^function! FindOpenBrace(lnum)$/;"	f
FindReferences_nim	plugged/vim-polyglot/autoload/nim.vim	/^fun! FindReferences_nim() abort$/;"	f
FixBeginfigs	plugged/vim-polyglot/ftplugin/mp.vim	/^  command -nargs=0 FixBeginfigs call s:fix_beginfigs()$/;"	c
Fixedgq	plugged/vim-polyglot/ftplugin/typescript.vim	/^function! Fixedgq(lnum, count)$/;"	f
Fixup	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Fixup  :<line1>,<line2>call s:choose('fixup')$/;"	c
Fly Mode	plugged/auto-pairs/README.md	/^Fly Mode$/;"	s	chapter:Auto Pairs
FormatRmd	plugged/vim-polyglot/ftplugin/rmd.vim	/^function! FormatRmd()$/;"	f
FormatRrst	plugged/vim-polyglot/ftplugin/rrst.vim	/^function! FormatRrst()$/;"	f
FortranGetFixedIndent	plugged/vim-polyglot/indent/fortran.vim	/^function FortranGetFixedIndent()$/;"	f
FortranGetFreeIndent	plugged/vim-polyglot/indent/fortran.vim	/^function FortranGetFreeIndent()$/;"	f
FortranGetIndent	plugged/vim-polyglot/indent/fortran.vim	/^function FortranGetIndent(lnum)$/;"	f
FullName	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>FullName()$/;"	f
G	plugged/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range=% -bang G :<line1>,<line2>call <SID>Eglobal(<q-bang>, <q-args>)$/;"	c
GCUpper	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpper(what)$/;"	f
GCUpperCommon	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperCommon(what)$/;"	f
GCUpperDot	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperDot(what)$/;"	f
GCUpperSpace	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperSpace(what)$/;"	f
Generate a logfile if appropriate	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Generate a logfile if appropriate$/;"	s	chapter:Problems summary
GetAdaIndent	plugged/vim-polyglot/indent/ada.vim	/^function GetAdaIndent()$/;"	f
GetAnsibleIndent	plugged/vim-polyglot/indent/ansible.vim	/^function GetAnsibleIndent(lnum)$/;"	f
GetAppleScriptIndent	plugged/vim-polyglot/indent/applescript.vim	/^func! GetAppleScriptIndent()$/;"	f
GetAutoHotkeyIndent	plugged/vim-polyglot/indent/autohotkey.vim	/^function! GetAutoHotkeyIndent()$/;"	f
GetAwkIndent	plugged/vim-polyglot/indent/awk.vim	/^function! GetAwkIndent()$/;"	f
GetBladeIndent	plugged/vim-polyglot/indent/blade.vim	/^function! GetBladeIndent()$/;"	f
GetBstIndent	plugged/vim-polyglot/indent/bst.vim	/^function! GetBstIndent(lnum) abort$/;"	f
GetBzlIndent	plugged/vim-polyglot/indent/bzl.vim	/^function GetBzlIndent(lnum) abort$/;"	f
GetCSIndent	plugged/vim-polyglot/indent/cs.vim	/^function! GetCSIndent(lnum) abort$/;"	f
GetCSSIndent	plugged/vim-polyglot/indent/css.vim	/^function GetCSSIndent()$/;"	f
GetCabalIndent	plugged/vim-polyglot/indent/cabal.vim	/^function! GetCabalIndent()$/;"	f
GetCaddyfileIndent	plugged/vim-polyglot/indent/caddyfile.vim	/^function! GetCaddyfileIndent(lnum)$/;"	f
GetChaiScriptIndent	plugged/vim-polyglot/indent/chaiscript.vim	/^function! GetChaiScriptIndent()$/;"	f
GetClojureIndent	plugged/vim-polyglot/indent/clojure.vim	/^	function! GetClojureIndent()$/;"	f
GetCobolIndent	plugged/vim-polyglot/indent/cobol.vim	/^function! GetCobolIndent(lnum) abort$/;"	f
GetCoffeeIndent	plugged/vim-polyglot/indent/coffee.vim	/^function! GetCoffeeIndent(curlnum)$/;"	f
GetConfigIndent	plugged/vim-polyglot/indent/config.vim	/^function GetConfigIndent()$/;"	f
GetCrystalIndent	plugged/vim-polyglot/indent/crystal.vim	/^function! GetCrystalIndent(...) abort$/;"	f
GetCucumberIndent	plugged/vim-polyglot/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetDIndent	plugged/vim-polyglot/indent/d.vim	/^function GetDIndent()$/;"	f
GetDTDIndent	plugged/vim-polyglot/indent/dtd.vim	/^function GetDTDIndent()$/;"	f
GetDosBatchIndent	plugged/vim-polyglot/indent/dosbatch.vim	/^function! GetDosBatchIndent(lnum)$/;"	f
GetEcrystalFold	plugged/vim-polyglot/indent/ecrystal.vim	/^function! GetEcrystalFold() abort$/;"	f
GetEcrystalIndent	plugged/vim-polyglot/indent/ecrystal.vim	/^function! GetEcrystalIndent() abort$/;"	f
GetEelixirIndent	plugged/vim-polyglot/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
GetElmIndent	plugged/vim-polyglot/indent/elm.vim	/^function! GetElmIndent()$/;"	f
GetErlangFold	plugged/vim-polyglot/ftplugin/erlang.vim	/^function GetErlangFold(lnum)$/;"	f
GetErubyIndent	plugged/vim-polyglot/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetEtermIndent	plugged/vim-polyglot/indent/eterm.vim	/^function GetEtermIndent()$/;"	f
GetFennelIndent	plugged/vim-polyglot/indent/fennel.vim	/^	function! GetFennelIndent()$/;"	f
GetFrameScriptIndent	plugged/vim-polyglot/indent/framescript.vim	/^function GetFrameScriptIndent()$/;"	f
GetFsharpIndent	plugged/vim-polyglot/indent/fsharp.vim	/^function! GetFsharpIndent()$/;"	f
GetGitconfigIndent	plugged/vim-polyglot/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetGitoliteIndent	plugged/vim-polyglot/indent/gitolite.vim	/^function! GetGitoliteIndent()$/;"	f
GetGoHTMLTmplIndent	plugged/vim-polyglot/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
GetGraphQLIndent	plugged/vim-polyglot/indent/graphql.vim	/^function GetGraphQLIndent()$/;"	f
GetHamlIndent	plugged/vim-polyglot/indent/haml.vim	/^function! GetHamlIndent()$/;"	f
GetHandlebarsIndent	plugged/vim-polyglot/indent/handlebars.vim	/^function! GetHandlebarsIndent(...)$/;"	f
GetHaskellIndent	plugged/vim-polyglot/indent/haskell.vim	/^function! GetHaskellIndent()$/;"	f
GetHelp	plugged/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp echo system(s:pwsh_cmd . ' -NoLogo -NoProfile -NonInteract/;"	c
GetHelp	plugged/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp silent exe '!' . s:pwsh_cmd . ' -NoLogo -NoProfile -NonInt/;"	c
GetHelp	plugged/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp silent exe 'term ' . s:pwsh_cmd . ' -NoLogo -NoProfile -No/;"	c
GetHogIndent	plugged/vim-polyglot/indent/hog.vim	/^function GetHogIndent()$/;"	f
GetIdrisIndent	plugged/vim-polyglot/indent/idris.vim	/^function! GetIdrisIndent()$/;"	f
GetIdrisIndent	plugged/vim-polyglot/indent/idris2.vim	/^function! GetIdrisIndent()$/;"	f
GetJIndent	plugged/vim-polyglot/indent/j.vim	/^function GetJIndent() abort$/;"	f
GetJSONIndent	plugged/vim-polyglot/indent/json.vim	/^function GetJSONIndent()$/;"	f
GetJavaIndent	plugged/vim-polyglot/indent/java.vim	/^function GetJavaIndent()$/;"	f
GetJavascriptGraphQLIndent	plugged/vim-polyglot/after/indent/javascript-2.vim	/^function GetJavascriptGraphQLIndent()$/;"	f
GetJavascriptIndent	plugged/vim-polyglot/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetJsIndent	plugged/vim-polyglot/indent/qml.vim	/^function! GetJsIndent()$/;"	f
GetJstIndent	plugged/vim-polyglot/indent/jst.vim	/^function! GetJstIndent(...)$/;"	f
GetJsxIndent	plugged/vim-polyglot/after/indent/jsx.vim	/^function! GetJsxIndent()$/;"	f
GetJsxIndent	plugged/vim-polyglot/after/indent/tsx.vim	/^function! GetJsxIndent()$/;"	f
GetJuliaIndent	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaIndent()$/;"	f
GetJuliaNestingBrackets	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingBrackets(lnum, c)$/;"	f
GetJuliaNestingStruct	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingStruct(lnum, ...)$/;"	f
GetKotlinIndent	plugged/vim-polyglot/indent/kotlin.vim	/^function! GetKotlinIndent()$/;"	f
GetLDIndent	plugged/vim-polyglot/indent/ld.vim	/^function GetLDIndent()$/;"	f
GetLLVMIndent	plugged/vim-polyglot/indent/llvm.vim	/^function! GetLLVMIndent()$/;"	f
GetLedgerIndent	plugged/vim-polyglot/indent/ledger.vim	/^function GetLedgerIndent(...)$/;"	f
GetLilyPondIndent	plugged/vim-polyglot/indent/lilypond.vim	/^function GetLilyPondIndent()$/;"	f
GetLiquidIndent	plugged/vim-polyglot/indent/liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
GetLitCoffeeIndent	plugged/vim-polyglot/indent/litcoffee.vim	/^function GetLitCoffeeIndent()$/;"	f
GetLiveScriptIndent	plugged/vim-polyglot/indent/ls.vim	/^function! GetLiveScriptIndent(curlinenum)$/;"	f
GetLogtalkIndent	plugged/vim-polyglot/indent/logtalk.vim	/^function! GetLogtalkIndent()$/;"	f
GetLuaIndent	plugged/vim-polyglot/indent/lua.vim	/^function GetLuaIndent()$/;"	f
GetMakeIndent	plugged/vim-polyglot/indent/make.vim	/^function GetMakeIndent()$/;"	f
GetMakeIndent	plugged/vim-polyglot/indent/omake.vim	/^function GetMakeIndent()$/;"	f
GetMakoIndent	plugged/vim-polyglot/indent/mako.vim	/^function GetMakoIndent()$/;"	f
GetMarkdownIndent	plugged/vim-polyglot/indent/markdown.vim	/^function GetMarkdownIndent()$/;"	f
GetMesonIndent	plugged/vim-polyglot/indent/meson.vim	/^function GetMesonIndent(lnum)$/;"	f
GetMetaPostIndent	plugged/vim-polyglot/indent/mp.vim	/^function GetMetaPostIndent()$/;"	f
GetMetaPostIndentIntern	plugged/vim-polyglot/indent/mp.vim	/^function! GetMetaPostIndentIntern()$/;"	f
GetMoonIndent	plugged/vim-polyglot/indent/moon.vim	/^function! GetMoonIndent(curlinenum)$/;"	f
GetNimIndent	plugged/vim-polyglot/indent/nim.vim	/^function! GetNimIndent(lnum)$/;"	f
GetNixIndent	plugged/vim-polyglot/indent/nix.vim	/^function! GetNixIndent()$/;"	f
GetNsisIndent	plugged/vim-polyglot/indent/nsis.vim	/^function! GetNsisIndent(lnum)$/;"	f
GetOCamlIndent	plugged/vim-polyglot/indent/ocaml.vim	/^function! GetOCamlIndent()$/;"	f
GetObjCIndentImproved	plugged/vim-polyglot/after/indent/objc.vim	/^function! GetObjCIndentImproved()$/;"	f
GetOccamIndent	plugged/vim-polyglot/indent/occam.vim	/^function GetOccamIndent()$/;"	f
GetOctaveIndent	plugged/vim-polyglot/indent/octave.vim	/^function! GetOctaveIndent()$/;"	f
GetOdinIndent	plugged/vim-polyglot/indent/odin.vim	/^function! GetOdinIndent(lnum)$/;"	f
GetPHPGraphQLIndent	plugged/vim-polyglot/after/indent/php.vim	/^function GetPHPGraphQLIndent()$/;"	f
GetPascalIndent	plugged/vim-polyglot/indent/pascal.vim	/^function! GetPascalIndent( line_num )$/;"	f
GetPerlIndent	plugged/vim-polyglot/indent/perl.vim	/^function! GetPerlIndent()$/;"	f
GetPlantUMLIndent	plugged/vim-polyglot/indent/plantuml.vim	/^function! GetPlantUMLIndent(...) abort$/;"	f
GetPoVRayIndent	plugged/vim-polyglot/indent/pov.vim	/^function GetPoVRayIndent()$/;"	f
GetPotionFold	plugged/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! GetPotionFold(lnum)$/;"	f
GetPrologIndent	plugged/vim-polyglot/indent/prolog.vim	/^function! GetPrologIndent()$/;"	f
GetPugIndent	plugged/vim-polyglot/indent/pug.vim	/^function! GetPugIndent()$/;"	f
GetPuppetIndent	plugged/vim-polyglot/indent/puppet.vim	/^function! GetPuppetIndent(...)$/;"	f
GetPurescriptIndent	plugged/vim-polyglot/indent/purescript.vim	/^function! GetPurescriptIndent()$/;"	f
GetPythonIndent	plugged/vim-polyglot/indent/gdscript3.vim	/^function GetPythonIndent(lnum)$/;"	f
GetPythonPEPIndent	plugged/vim-polyglot/indent/cython.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
GetPythonPEPIndent	plugged/vim-polyglot/indent/python.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
GetRSTIndent	plugged/vim-polyglot/indent/rst.vim	/^function GetRSTIndent()$/;"	f
GetRakuIndent	plugged/vim-polyglot/indent/raku.vim	/^function! GetRakuIndent()$/;"	f
GetReadlineIndent	plugged/vim-polyglot/indent/readline.vim	/^function GetReadlineIndent()$/;"	f
GetReasonIndent	plugged/vim-polyglot/indent/reason.vim	/^function GetReasonIndent(lnum)$/;"	f
GetRmdIndent	plugged/vim-polyglot/indent/rmd.vim	/^function GetRmdIndent()$/;"	f
GetRnowebIndent	plugged/vim-polyglot/indent/rnoweb.vim	/^function GetRnowebIndent()$/;"	f
GetRrstIndent	plugged/vim-polyglot/indent/rrst.vim	/^function GetRrstIndent()$/;"	f
GetRstIndent	plugged/vim-polyglot/indent/rrst.vim	/^function GetRstIndent()$/;"	f
GetRubyIndent	plugged/vim-polyglot/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
GetRustIndent	plugged/vim-polyglot/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
GetSASIndent	plugged/vim-polyglot/indent/sas.vim	/^function! GetSASIndent()$/;"	f
GetSCSSIndent	plugged/vim-polyglot/indent/scss.vim	/^function GetSCSSIndent()$/;"	f
GetSDLIndent	plugged/vim-polyglot/indent/sdl.vim	/^function! GetSDLIndent()$/;"	f
GetSMLIndent	plugged/vim-polyglot/indent/sml.vim	/^function! GetSMLIndent()$/;"	f
GetSQLIndent	plugged/vim-polyglot/indent/pgsql.vim	/^function! GetSQLIndent()$/;"	f
GetSassIndent	plugged/vim-polyglot/indent/sass.vim	/^function! GetSassIndent()$/;"	f
GetScalaIndent	plugged/vim-polyglot/indent/scala.vim	/^function! GetScalaIndent()$/;"	f
GetSlimIndent	plugged/vim-polyglot/indent/slim.vim	/^function! GetSlimIndent()$/;"	f
GetSlimeIndent	plugged/vim-polyglot/indent/slime.vim	/^function! GetSlimeIndent()$/;"	f
GetSolidityIndent	plugged/vim-polyglot/indent/solidity.vim	/^function GetSolidityIndent()$/;"	f
GetSshconfigIndent	plugged/vim-polyglot/indent/sshconfig.vim	/^function GetSshconfigIndent(lnum)$/;"	f
GetStylusIndent	plugged/vim-polyglot/indent/stylus.vim	/^function! GetStylusIndent()$/;"	f
GetSvelteIndent	plugged/vim-polyglot/indent/svelte.vim	/^function! GetSvelteIndent()$/;"	f
GetTFIndent	plugged/vim-polyglot/indent/tf.vim	/^function GetTFIndent()$/;"	f
GetTclIndent	plugged/vim-polyglot/indent/tcl.vim	/^function GetTclIndent()$/;"	f
GetTeXIndent	plugged/vim-polyglot/indent/tex.vim	/^function! GetTeXIndent() " {{{$/;"	f
GetTeraTermIndent	plugged/vim-polyglot/indent/teraterm.vim	/^function! GetTeraTermIndent(lnum)$/;"	f
GetTildeIndent	plugged/vim-polyglot/indent/tilde.vim	/^function GetTildeIndent(lnum)$/;"	f
GetTreetopIndent	plugged/vim-polyglot/indent/treetop.vim	/^function GetTreetopIndent()$/;"	f
GetTsxIndent	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! GetTsxIndent()$/;"	f
GetTwigIndent	plugged/vim-polyglot/indent/twig.vim	/^fun! GetTwigIndent(currentLineNumber)$/;"	f
GetTypescriptGraphQLIndent	plugged/vim-polyglot/after/indent/typescript.vim	/^function GetTypescriptGraphQLIndent()$/;"	f
GetTypescriptIndent	plugged/vim-polyglot/indent/typescript.vim	/^function GetTypescriptIndent()$/;"	f
GetVHDLindent	plugged/vim-polyglot/indent/vhdl.vim	/^function GetVHDLindent()$/;"	f
GetValaIndent	plugged/vim-polyglot/indent/vala.vim	/^function GetValaIndent(lnum)$/;"	f
GetVerilogIndent	plugged/vim-polyglot/indent/verilog.vim	/^function GetVerilogIndent()$/;"	f
GetVueIndent	plugged/vim-polyglot/indent/vue.vim	/^function! GetVueIndent()$/;"	f
GetXF86ConfIndent	plugged/vim-polyglot/indent/xf86conf.vim	/^function GetXF86ConfIndent()$/;"	f
GetXinetdIndent	plugged/vim-polyglot/indent/xinetd.vim	/^function GetXinetdIndent()$/;"	f
GetYAMLIndent	plugged/vim-polyglot/indent/yaml.vim	/^function GetYAMLIndent(lnum)$/;"	f
GetYaccIndent	plugged/vim-polyglot/indent/yacc.vim	/^function GetYaccIndent()$/;"	f
GetZigIndent	plugged/vim-polyglot/indent/zig.vim	/^function! GetZigIndent(lnum)$/;"	f
GetZimbuIndent	plugged/vim-polyglot/indent/zimbu.vim	/^func GetZimbuIndent(lnum)$/;"	f
Global options	plugged/fzf.vim/README.md	/^### Global options$/;"	S	section:fzf :heart: vim""Customization
GoIndent	plugged/vim-polyglot/indent/go.vim	/^function! GoIndent(lnum) abort$/;"	f
GotoDefinition_nim	plugged/vim-polyglot/autoload/nim.vim	/^fun! GotoDefinition_nim() abort$/;"	f
GotoDefinition_nim_ready	plugged/vim-polyglot/autoload/nim.vim	/^fun! GotoDefinition_nim_ready(def_output) abort$/;"	f
HamGetFreeIndent	plugged/vim-polyglot/indent/hamster.vim	/^function HamGetFreeIndent()$/;"	f
HamGetIndent	plugged/vim-polyglot/indent/hamster.vim	/^function HamGetIndent(lnum)$/;"	f
HaxeHiLink	plugged/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi def link <args>$/;"	c
HaxeHiLink	plugged/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi link <args>$/;"	c
HeaderDecrease	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderDecrease call s:HeaderDecrease(<line1>, <line2>)$/;"	c
HeaderIncrease	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderIncrease call s:HeaderDecrease(<line1>, <line2>, 1)$/;"	c
Hi	plugged/vim-polyglot/syntax/sdl.vim	/^command -nargs=+ Hi     hi def <args>$/;"	c
Hi	plugged/vim-polyglot/syntax/xpm2.vim	/^command -nargs=+ Hi hi def <args>$/;"	c
HiLink	plugged/vim-polyglot/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/common.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>HiLink(name, target) "{{{3$/;"	f
HiLink	plugged/vim-polyglot/syntax/fbs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/fbs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/jinja2.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/lilypond.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/lilypond.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/llvm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/llvm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/puppet.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/python.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/python.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/raku.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/raku.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/sexplib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/sexplib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/tablegen.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/tablegen.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/tptp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/tptp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/unison.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/unison.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
Hide statusline	plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Highlight	plugged/vim-multiple-cursors/README.md	/^### Highlight$/;"	S	section:vim-multiple-cursors""Settings
HtmlHiLink	plugged/vim-polyglot/syntax/handlebars.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	plugged/vim-polyglot/syntax/handlebars.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	plugged/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	plugged/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlIndent	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndentClose	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
HtmlIndentCloseAlt	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentOpen	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentOpenAlt	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlIndent_CheckUserSettings	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CheckUserSettings	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_CountBraces	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindStartTag	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagEnd	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_FindTagStart	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	plugged/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
HtmlIndent_IsOpenTag	plugged/vim-polyglot/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
IWrite	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IWrite(str)$/;"	f
IWrite	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IWrite(str)$/;"	f
IcalHiLink	plugged/vim-polyglot/syntax/icalendar.vim	/^command! -nargs=+ IcalHiLink hi def link <args>$/;"	c
IdrisAddClause	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisAddClause(proof)$/;"	f
IdrisAddClause	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisAddClause(proof)$/;"	f
IdrisAddMissing	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisAddMissing()$/;"	f
IdrisAddMissing	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisAddMissing()$/;"	f
IdrisCaseSplit	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisCaseSplit()$/;"	f
IdrisCaseSplit	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisCaseSplit()$/;"	f
IdrisDocFold	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisDocFold(lineNum)$/;"	f
IdrisDocFold	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisDocFold(lineNum)$/;"	f
IdrisEval	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisEval()$/;"	f
IdrisEval	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisEval()$/;"	f
IdrisFold	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisFold(lineNum)$/;"	f
IdrisFold	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisFold(lineNum)$/;"	f
IdrisGenerateDef	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisGenerateDef()$/;"	f
IdrisHideResponseWin	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisHideResponseWin()$/;"	f
IdrisHideResponseWin	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisHideResponseWin()$/;"	f
IdrisMakeCase	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeCase()$/;"	f
IdrisMakeCase	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeCase()$/;"	f
IdrisMakeLemma	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeLemma()$/;"	f
IdrisMakeLemma	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeLemma()$/;"	f
IdrisMakeWith	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeWith()$/;"	f
IdrisMakeWith	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeWith()$/;"	f
IdrisProofSearch	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisProofSearch(hint)$/;"	f
IdrisProofSearch	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisProofSearch(hint)$/;"	f
IdrisRefine	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisRefine()$/;"	f
IdrisRefine	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisRefine()$/;"	f
IdrisReload	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisReload(q)$/;"	f
IdrisReload	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisReload(q)$/;"	f
IdrisReloadToLine	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisReloadToLine(cline)$/;"	f
IdrisReloadToLine	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisReloadToLine(cline)$/;"	f
IdrisResponseWin	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisResponseWin()$/;"	f
IdrisResponseWin	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisResponseWin()$/;"	f
IdrisShowDoc	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowDoc()$/;"	f
IdrisShowDoc	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowDoc()$/;"	f
IdrisShowResponseWin	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowResponseWin()$/;"	f
IdrisShowResponseWin	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowResponseWin()$/;"	f
IdrisShowType	plugged/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowType()$/;"	f
IdrisShowType	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowType()$/;"	f
IndentLevel	plugged/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! IndentLevel(lnum)$/;"	f
InitPureScript	plugged/vim-polyglot/ftplugin/purescript.vim	/^fun! InitPureScript()$/;"	f
InsertNToc	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertNToc call s:InsertToc('numbers', <args>)$/;"	c
InsertToc	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertToc call s:InsertToc('bullets', <args>)$/;"	c
Installation	plugged/auto-pairs/README.md	/^Installation$/;"	s	chapter:Auto Pairs
Installation	plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	plugged/vim-multiple-cursors/README.md	/^## Installation$/;"	s	chapter:vim-multiple-cursors
Installation	plugged/vim-polyglot/README.md	/^## Installation$/;"	s
Interactions with other plugins	plugged/vim-multiple-cursors/README.md	/^### Interactions with other plugins$/;"	S	section:vim-multiple-cursors""Settings
IsBeginBlockByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsBeginBlockByStr(str)$/;"	f
IsDoubleCoronByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsDoubleCoronByStr(str)$/;"	f
IsEndBlockByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsEndBlockByStr(str)$/;"	f
IsFunctionArgPar	plugged/vim-polyglot/indent/julia.vim	/^function IsFunctionArgPar(lnum, c)$/;"	f
IsIfStatementByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsIfStatementByStr(str)$/;"	f
IsInBrackets	plugged/vim-polyglot/indent/julia.vim	/^function IsInBrackets(lnum, c)$/;"	f
IsInContinuationImportLine	plugged/vim-polyglot/indent/julia.vim	/^function IsInContinuationImportLine(lnum)$/;"	f
IsInDocString	plugged/vim-polyglot/indent/julia.vim	/^function IsInDocString(lnum)$/;"	f
IsInsideOfBlockByNum	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsInsideOfBlockByNum(line_num)$/;"	f
IsInsidePythonBlock	plugged/vim-polyglot/indent/mako.vim	/^function IsInsidePythonBlock(startline)$/;"	f
IsReturnByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsReturnByStr(str)$/;"	f
Issue Creation	plugged/vim-multiple-cursors/README.md	/^### Issue Creation$/;"	S	section:vim-multiple-cursors""Contributing
It's great for quick refactoring	plugged/vim-multiple-cursors/README.md	/^### It's great for quick refactoring$/;"	S	section:vim-multiple-cursors""About
JsonnetFmt	plugged/vim-polyglot/ftplugin/jsonnet.vim	/^command! -nargs=0 JsonnetFmt call jsonnet#Format()$/;"	c
JuliaBlocks	plugged/vim-polyglot/autoload/julia_blocks.vim	/^  augroup JuliaBlocks$/;"	a
JuliaDoc	plugged/vim-polyglot/ftplugin/julia.vim	/^command! -nargs=1 -buffer -complete=customlist,julia#doc#complete JuliaDoc call julia#doc#open(</;"	c
JuliaDoc	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^command! -nargs=1 -buffer -complete=customlist,julia#doc#complete JuliaDoc call julia#doc#open(</;"	c
JuliaDocKeywordprg	plugged/vim-polyglot/ftplugin/julia.vim	/^command! -nargs=1 -buffer JuliaDocKeywordprg call julia#doc#keywordprg(<q-args>)$/;"	c
JuliaDocKeywordprg	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^command! -nargs=1 -buffer JuliaDocKeywordprg call julia#doc#keywordprg(<q-args>)$/;"	c
JuliaGetMatchWords	plugged/vim-polyglot/ftplugin/julia.vim	/^  function! JuliaGetMatchWords()$/;"	f
JuliaMatch	plugged/vim-polyglot/indent/julia.vim	/^function JuliaMatch(lnum, str, regex, st, ...)$/;"	f
JumpToMatch	plugged/vim-polyglot/indent/julia.vim	/^function JumpToMatch(lnum, last_closed_bracket)$/;"	f
K	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>K <Plug>(llvm-goto-definition)$/;"	m
K	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\/;"	m
K	plugged/vim-polyglot/ftplugin/racket.vim	/^  nmap <buffer> K <Plug>RacketDoc$/;"	m
K	plugged/vim-polyglot/ftplugin/racket.vim	/^  vmap <buffer> K <Plug>RacketDoc$/;"	m
Known Issues	plugged/auto-pairs/README.md	/^Known Issues$/;"	s	chapter:Auto Pairs
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L2UAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  augroup L2UAutoSub$/;"	a
L2UInit	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^    augroup L2UInit$/;"	a
L2UTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  augroup L2UTab$/;"	a
LLI	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    command! -buffer -nargs=? -bar -complete=file LLI call <SID>run_lli(<f-args>)$/;"	c
LYRICS	plugged/vim-polyglot/scripts/build	/^LYRICS = "Never gonna give you up.  Never gonna let you down.  " +$/;"	C	method:copy_file
LaTeXtoUnicode#AutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#AutoSub(...)$/;"	f
LaTeXtoUnicode#CmdTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#CmdTab(trigger)$/;"	f
LaTeXtoUnicode#Disable	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Disable(...)$/;"	f
LaTeXtoUnicode#Enable	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Enable(...)$/;"	f
LaTeXtoUnicode#FallbackCallback	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#FallbackCallback()$/;"	f
LaTeXtoUnicode#Init	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Init(...)$/;"	f
LaTeXtoUnicode#PutLiteral	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#PutLiteral(k)$/;"	f
LaTeXtoUnicode#Refresh	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Refresh()$/;"	f
LaTeXtoUnicode#Tab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Tab()$/;"	f
LaTeXtoUnicode#Toggle	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Toggle()$/;"	f
LaTeXtoUnicode#omnifunc	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#omnifunc(findstart, base)$/;"	f
Language packs	plugged/vim-polyglot/README.md	/^## Language packs$/;"	s
LastBlockIndent	plugged/vim-polyglot/indent/julia.vim	/^function LastBlockIndent(lnum)$/;"	f
License	plugged/auto-pairs/README.md	/^License$/;"	s	chapter:Auto Pairs
License	plugged/coc.nvim/Readme.md	/^## License$/;"	s
License	plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	plugged/vim-polyglot/README.md	/^## License$/;"	s
LiveScriptCompile	plugged/vim-polyglot/ftplugin/ls.vim	/^\\        LiveScriptCompile call s:LiveScriptCompile(<line1>, <line2>, <q-args>)$/;"	c
LiveScriptCompileAuWatch	plugged/vim-polyglot/ftplugin/ls.vim	/^    augroup LiveScriptCompileAuWatch$/;"	a
LiveScriptMake	plugged/vim-polyglot/compiler/ls.vim	/^command! -bang -bar -nargs=* LiveScriptMake make<bang> <args>$/;"	c
LiveScriptRun	plugged/vim-polyglot/ftplugin/ls.vim	/^command! -range=% -bar LiveScriptRun <line1>,<line2>:w !lsc -sp$/;"	c
LiveScriptUpdateMakePrg	plugged/vim-polyglot/compiler/ls.vim	/^augroup LiveScriptUpdateMakePrg$/;"	a
LoadBufferMenu	plugged/vim-polyglot/extras/menu.vim	/^  augroup LoadBufferMenu$/;"	a
M	plugged/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -count=1 M :let s:eregex_tmp_hlsearch = &hlsearch | let v:searchforward = <SID/;"	c
MakeMenu	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>MakeMenu()$/;"	f
MakoIndentClose	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentClose(lnum)$/;"	f
MakoIndentOpen	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentOpen(lnum)$/;"	f
MakoIndentPush	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentPush(tag)$/;"	f
Mapping	plugged/vim-multiple-cursors/README.md	/^## Mapping$/;"	s	chapter:vim-multiple-cursors
Mappings	plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Match characters from visual selection	plugged/vim-multiple-cursors/README.md	/^### Match characters from visual selection$/;"	S	section:vim-multiple-cursors""About
MatchCount	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MatchCount(expr, pat)$/;"	f
MenuExplOpen	plugged/vim-polyglot/extras/menu.vim	/^  fun MenuExplOpen()$/;"	f
Methods	plugged/nvim-yarp/README.md	/^## Methods$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Mkd	plugged/vim-polyglot/ftplugin/markdown.vim	/^augroup Mkd$/;"	a
Multibyte Pairs	plugged/auto-pairs/README.md	/^Multibyte Pairs$/;"	s	chapter:Auto Pairs
Multiple Cursors	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^describe "Multiple Cursors" do$/;"	d
Multiple Cursors misc	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors misc" do$/;"	d
Multiple Cursors op pending & exit from insert|visual mode	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors op pending & exit from insert|visual mode" do$/;"	d
Multiple Cursors when changing the line count	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when changing the line count" do$/;"	d
Multiple Cursors when normal_maps is empty	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when normal_maps is empty" do$/;"	d
Multiple Cursors when using insert mappings	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when using insert mappings" do$/;"	d
Multiple Cursors when visual_maps is empty	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when visual_maps is empty" do$/;"	d
MultipleCursorsFind	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
NewTest_filetype_detection	plugged/vim-polyglot/tests/native.vim	/^func NewTest_filetype_detection()$/;"	f
NewVersion	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function NewVersion()$/;"	f
NextNonBlankLine	plugged/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! NextNonBlankLine(lnum)$/;"	f
NimAsyncCmdComplete	plugged/vim-polyglot/autoload/nim.vim	/^fun! NimAsyncCmdComplete(cmd, output) abort$/;"	f
NimComplete	plugged/vim-polyglot/autoload/nim.vim	/^fun! NimComplete(findstart, base) abort$/;"	f
NimExec	plugged/vim-polyglot/autoload/nim.vim	/^fun! NimExec(op) abort$/;"	f
NimExecAsync	plugged/vim-polyglot/autoload/nim.vim	/^fun! NimExecAsync(op, Handler) abort$/;"	f
NimLog	plugged/vim-polyglot/autoload/nim.vim	/^command! NimLog :e log:\/\/nim$/;"	c
NimRestartService	plugged/vim-polyglot/autoload/nim.vim	/^command! NimRestartService$/;"	c
NimTerminateService	plugged/vim-polyglot/autoload/nim.vim	/^command! NimTerminateService$/;"	c
NimVim	plugged/vim-polyglot/autoload/nim.vim	/^augroup NimVim$/;"	a
OCaml_switch	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
OMLetFoldLevel	plugged/vim-polyglot/ftplugin/ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
Ocaml_get_type	plugged/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_get_type(mode)$/;"	f
Ocaml_get_type_or_not	plugged/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_get_type_or_not(mode)$/;"	f
Ocaml_print_type	plugged/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_print_type(mode)$/;"	f
Ocpgrep	plugged/vim-polyglot/ftplugin/ocaml.vim	/^command! -bar -bang -complete=file -nargs=+ Ocpgrep exe s:OcpGrep(<q-bang>, <q-args>)$/;"	c
Options	plugged/auto-pairs/README.md	/^Options$/;"	s	chapter:Auto Pairs
Options	plugged/nvim-yarp/README.md	/^## Options$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Pick	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Pick   :<line1>,<line2>call s:choose('pick')$/;"	c
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
PolyglotVerify	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! PolyglotVerify()$/;"	f
PostscrIndentGet	plugged/vim-polyglot/indent/postscr.vim	/^function! PostscrIndentGet(lnum)$/;"	f
Preview window	plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Global options
Problems summary	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^# Problems summary$/;"	c
Provide a minimal .vimrc with less than 50 lines	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Provide a minimal .vimrc with less than 50 lines$/;"	s	chapter:Problems summary
Pull Requests	plugged/vim-multiple-cursors/README.md	/^### Pull Requests$/;"	S	section:vim-multiple-cursors""Contributing
Python2Syntax	plugged/vim-polyglot/syntax/python.vim	/^command! -buffer Python2Syntax let b:python_version_2 = 1 | let &syntax=&syntax$/;"	c
Python3Syntax	plugged/vim-polyglot/syntax/python.vim	/^command! -buffer Python3Syntax let b:python_version_2 = 0 | let &syntax=&syntax$/;"	c
Quick Start	plugged/coc.nvim/Readme.md	/^## Quick Start$/;"	s
Quick Start	plugged/vim-multiple-cursors/README.md	/^## Quick Start$/;"	s	chapter:vim-multiple-cursors
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
RandomID	plugged/vim-polyglot/ftplugin/mma.vim	/^	function! RandomID()$/;"	f
Rationale	plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
ReadOnPath	plugged/vim-polyglot/syntax/ragel.vim	/^fun! <SID>ReadOnPath(script)$/;"	f
Reducer example	plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Reproduce the bug	plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Reproduce the bug$/;"	s
Requirements	plugged/nvim-yarp/README.md	/^## Requirements$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Result from CocInfo	plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Result from CocInfo$/;"	s
Reword	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Reword :<line1>,<line2>call s:choose('reword')$/;"	c
RplGetFreeIndent	plugged/vim-polyglot/indent/rpl.vim	/^function RplGetFreeIndent()$/;"	f
RplGetIndent	plugged/vim-polyglot/indent/rpl.vim	/^function RplGetIndent(lnum)$/;"	f
RstFold	plugged/vim-polyglot/ftplugin/rst.vim	/^  augroup RstFold$/;"	a
RstFold#GetRstFold	plugged/vim-polyglot/autoload/RstFold.vim	/^function RstFold#GetRstFold()$/;"	f
RstFold#GetRstFoldText	plugged/vim-polyglot/autoload/RstFold.vim	/^function RstFold#GetRstFoldText()$/;"	f
RubyBalloonexpr	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
RubyCursorFile	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
RubyCursorIdentifier	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
Run_script_detection	plugged/vim-polyglot/tests/native.vim	/^func Run_script_detection(test_dict)$/;"	f
Rust	plugged/vim-polyglot/ctags/rust.ctags	/^--langdef=Rust$/;"	l
RustCargoQuickFixHooks	plugged/vim-polyglot/compiler/cargo.vim	/^augroup RustCargoQuickFixHooks$/;"	a
RustEmitAsm	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustEmitIr	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustExpand	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Ex/;"	c
RustFmt	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -bar -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustInfo	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -bar RustInfo call rust#debugging#Info()$/;"	c
RustInfoToClipboard	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -bar RustInfoToClipboard call rust#debugging#InfoToClipboard()$/;"	c
RustInfoToFile	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -bar -nargs=1 RustInfoToFile call rust#debugging#InfoToFile(<f-args>)$/;"	c
RustPlay	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustRun	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustTest	plugged/vim-polyglot/ftplugin/rust.vim	/^command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-ar/;"	c
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	init.vim	/^map  S <Plug>(easymotion-bd-t)$/;"	m
S	plugged/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range S :<line1>,<line2>call <SID>Esubstitute(<q-args>) <Bar> :noh$/;"	c
SQLGetType	plugged/vim-polyglot/ftplugin/sql.vim	/^    command! -nargs=0 SQLGetType :call SQL_GetType()$/;"	c
SQLSetType	plugged/vim-polyglot/ftplugin/sql.vim	/^    command! -nargs=* -complete=custom,SQL_GetList SQLSetType :call SQL_SetType(<q-args>)$/;"	c
SQL_GetList	plugged/vim-polyglot/ftplugin/sql.vim	/^    function SQL_GetList(ArgLead, CmdLine, CursorPos)$/;"	f
SQL_GetType	plugged/vim-polyglot/ftplugin/sql.vim	/^    function SQL_GetType()$/;"	f
SQL_SetType	plugged/vim-polyglot/ftplugin/sql.vim	/^    function SQL_SetType(name)$/;"	f
SassIncludeExpr	plugged/vim-polyglot/ftplugin/sass.vim	/^function! SassIncludeExpr(file) abort$/;"	f
Screen shot (if possible)	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Screen shot (if possible)$/;"	s	chapter:Problems summary
Screenshots (optional)	plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Screenshots (optional)$/;"	s
SetexToAtx	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% SetexToAtx call s:SetexToAtx(<line1>, <line2>)$/;"	c
Settings	plugged/vim-multiple-cursors/README.md	/^## Settings$/;"	s	chapter:vim-multiple-cursors
SetupLazyloadMenus	plugged/vim-polyglot/extras/menu.vim	/^  augroup SetupLazyloadMenus$/;"	a
Shortcuts	plugged/auto-pairs/README.md	/^Shortcuts$/;"	s	chapter:Auto Pairs
SkipBlanksAndComments	plugged/vim-polyglot/indent/d.vim	/^function! SkipBlanksAndComments(startline)$/;"	f
SkipJavaBlanksAndComments	plugged/vim-polyglot/indent/java.vim	/^function! SkipJavaBlanksAndComments(startline)$/;"	f
Sleuth	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  command! -bar -bang Sleuth call s:detect_indent()$/;"	c
SleuthIndicator	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  func! SleuthIndicator() abort$/;"	f
SpellPopupMenu	plugged/vim-polyglot/extras/menu.vim	/^  augroup SpellPopupMenu$/;"	a
Split	plugged/vim-polyglot/syntax/ragel.vim	/^function! <SID>Split(path) abort " {{{1$/;"	f
Squash	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Squash :<line1>,<line2>call s:choose('squash')$/;"	c
Start Vim with a minimal configuration	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
Status line of terminal buffer	plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
StripTrailingWhitespace	plugged/vim-polyglot/ftplugin/dhall.vim	/^function! StripTrailingWhitespace()$/;"	f
Stylus	plugged/vim-polyglot/ftplugin/stylus.vim	/^command! Stylus !clear; cat % | stylus$/;"	c
SvgIndentGet	plugged/vim-polyglot/indent/svg.vim	/^fun! SvgIndentGet(lnum, use_syntax_check)$/;"	f
SvgIndentSum	plugged/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentSum(lnum, style, add)$/;"	f
SvgIndentSynCheck	plugged/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentSynCheck(lnum)$/;"	f
SvgIndentWithPattern	plugged/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentWithPattern(line, pat)$/;"	f
SwiftIndent	plugged/vim-polyglot/indent/swift.vim	/^function! SwiftIndent(...)$/;"	f
SynAttrXMLish	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynAttrXMLish(synattr)$/;"	f
SynDisplay	plugged/vim-polyglot/syntax/inform.vim	/^command -nargs=+ SynDisplay syntax <args> display$/;"	c
SynEOL	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynEOL(lnum)$/;"	f
SynFold	plugged/vim-polyglot/syntax/crystal.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SynFold	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args> fold$/;"	c
SynFold	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args>$/;"	c
SynFold	plugged/vim-polyglot/syntax/ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SynFold	plugged/vim-polyglot/syntax/yacc.vim	/^ com! -nargs=+ SynFold	<args> fold$/;"	c
SynFold	plugged/vim-polyglot/syntax/yacc.vim	/^ com! -nargs=+ SynFold	<args>$/;"	c
SynFoldDoc	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args> fold$/;"	c
SynFoldDoc	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args>$/;"	c
SynSOL	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynSOL(lnum)$/;"	f
SynStack	init.vim	/^function! SynStack()$/;"	f
SynTSXBlockEnd	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXBlockEnd(syns)$/;"	f
SynTSXContinues	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXContinues(cursyn, prevsyn)$/;"	f
SynTSXDepth	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXDepth(syns)$/;"	f
SynXMLish	plugged/vim-polyglot/indent/typescriptreact.vim	/^fu! SynXMLish(syns)$/;"	f
SyntaxCheckers_nim_nim_GetLocList	plugged/vim-polyglot/autoload/nim.vim	/^fun! SyntaxCheckers_nim_nim_GetLocList() abort$/;"	f
SyntaxCheckers_nim_nim_IsAvailable	plugged/vim-polyglot/autoload/nim.vim	/^function! SyntaxCheckers_nim_nim_IsAvailable() abort$/;"	f
SystemVerilogIndent	plugged/vim-polyglot/indent/systemverilog.vim	/^function SystemVerilogIndent()$/;"	f
TAPTestLine_foldtext	plugged/vim-polyglot/syntax/tap.vim	/^function! TAPTestLine_foldtext()$/;"	f
TableFormat	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer TableFormat call s:TableFormat()$/;"	c
Terraform	plugged/vim-polyglot/ftplugin/terraform.vim	/^command! -nargs=+ -complete=custom,terraform#commands -buffer Terraform$/;"	c
TerraformFmt	plugged/vim-polyglot/ftplugin/terraform.vim	/^command! -nargs=0 -buffer TerraformFmt call terraform#fmt()$/;"	c
TerraformIndent	plugged/vim-polyglot/indent/terraform.vim	/^function! TerraformIndent(lnum)$/;"	f
Test	plugged/vim-polyglot/ftplugin/mma.vim	/^	function! Test()$/;"	f
TestExtension	plugged/vim-polyglot/tests/extensions.vim	/^function! TestExtension(filetype, filename, content)$/;"	f
TestFiletype	plugged/vim-polyglot/tests/filetypes.vim	/^func! TestFiletype(filetype)$/;"	f
TestFiletypeFuncs	plugged/vim-polyglot/extras/filetype.vim	/^func! TestFiletypeFuncs(testlist)$/;"	f
Test_conf_type	plugged/vim-polyglot/tests/native.vim	/^func Test_conf_type()$/;"	f
Test_detection	plugged/vim-polyglot/tests/native.vim	/^func Test_detection()$/;"	f
Test_emptybuf_ftdetect	plugged/vim-polyglot/tests/native.vim	/^func Test_emptybuf_ftdetect()$/;"	f
Test_filetype_indent_off	plugged/vim-polyglot/tests/native.vim	/^func Test_filetype_indent_off()$/;"	f
Test_hook_file	plugged/vim-polyglot/tests/native.vim	/^func Test_hook_file()$/;"	f
Test_other_type	plugged/vim-polyglot/tests/native.vim	/^func Test_other_type()$/;"	f
Test_script_detection	plugged/vim-polyglot/tests/native.vim	/^func Test_script_detection()$/;"	f
Test_setfiletype_completion	plugged/vim-polyglot/tests/native.vim	/^func Test_setfiletype_completion()$/;"	f
TexFold	plugged/vim-polyglot/syntax/tex.vim	/^ com! -nargs=* TexFold <args> $/;"	c
TexFold	plugged/vim-polyglot/syntax/tex.vim	/^ com! -nargs=* TexFold <args> fold $/;"	c
TexNewMathZone	plugged/vim-polyglot/syntax/tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/;"	f
TextilePreview	plugged/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextilePreview call TextileRenderBufferToPreview()$/;"	c
TextileRender	plugged/vim-polyglot/ftplugin/textile.vim	/^function! TextileRender(lines)$/;"	f
TextileRenderBufferToFile	plugged/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToFile()$/;"	f
TextileRenderBufferToPreview	plugged/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToPreview()$/;"	f
TextileRenderBufferToTab	plugged/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToTab()$/;"	f
TextileRenderFile	plugged/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderFile call TextileRenderBufferToFile()$/;"	c
TextileRenderFile	plugged/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderFile(lines, filename)$/;"	f
TextileRenderTab	plugged/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderTab call TextileRenderBufferToTab()$/;"	c
Toc	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toc call s:Toc()$/;"	c
Toch	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toch call s:Toc('horizontal')$/;"	c
Toct	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toct call s:Toc('tab')$/;"	c
Tocv	plugged/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Tocv call s:Toc('vertical')$/;"	c
Trim	plugged/vim-polyglot/indent/qml.vim	/^function! Trim(line)$/;"	f
Trouble shooting	plugged/coc.nvim/Readme.md	/^## Trouble shooting$/;"	s
TroubleShooting	plugged/auto-pairs/README.md	/^TroubleShooting$/;"	s	chapter:Auto Pairs
Troubleshooting	plugged/vim-polyglot/README.md	/^## Troubleshooting$/;"	s
TsIncludeExpr	plugged/vim-polyglot/ftplugin/typescript.vim	/^function! TsIncludeExpr(file)$/;"	f
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UnIndentByInd	plugged/vim-polyglot/indent/autohotkey.vim	/^function! UnIndentByInd(indent)$/;"	f
Unfinalise	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function Unfinalise()$/;"	f
UnfinaliseMenu	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>UnfinaliseMenu()$/;"	f
Updating	plugged/vim-polyglot/README.md	/^## Updating$/;"	s
Upload the log file	plugged/vim-multiple-cursors/CONTRIBUTING.md	/^## Upload the log file$/;"	s	chapter:Problems summary
Urgency	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function Urgency(urg)$/;"	f
Usage	plugged/nvim-yarp/README.md	/^## Usage$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Use case	plugged/nvim-yarp/README.md	/^## Use case$/;"	s	chapter:Yet Another Remote Plugin Framework for Neovim
Use the command to match regexp	plugged/vim-multiple-cursors/README.md	/^### Use the command to match regexp$/;"	S	section:vim-multiple-cursors""About
Using [vim-plug](https://github.com/junegunn/vim-plug)	plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
V	plugged/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range=% V :<line1>,<line2>call <SID>Evglobal(<q-args>)$/;"	c
ValaCodingStyle	plugged/vim-polyglot/ftplugin/vala.vim	/^command! -buffer -bar ValaCodingStyle call ValaCodingStyle()$/;"	c
ValaCodingStyle	plugged/vim-polyglot/ftplugin/vala.vim	/^function! ValaCodingStyle() abort$/;"	f
VbGetIndent	plugged/vim-polyglot/indent/vb.vim	/^fun! VbGetIndent(lnum)$/;"	f
VbSearch	plugged/vim-polyglot/ftplugin/vb.vim	/^fun! <SID>VbSearch(pattern, flags)$/;"	f
Vim functions	plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
VlangIndent	plugged/vim-polyglot/indent/vlang.vim	/^function! VlangIndent(lnum) abort$/;"	f
WarnIfNotUnfinalised	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>WarnIfNotUnfinalised()$/;"	f
Warning	plugged/vim-polyglot/syntax/csv.vim	/^fu! <sid>Warning(msg) "{{{3$/;"	f
Why you should use fzf on Vim	plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	plugged/coc.nvim/Readme.md	/^## Why?$/;"	s
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
Xf86confdeclopt	plugged/vim-polyglot/syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained nextgroup=xf86/;"	c
Xf86confdeclopt	plugged/vim-polyglot/syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained$/;"	c
Y	init.vim	/^map Y y\$$/;"	m
Yet Another Remote Plugin Framework for Neovim	plugged/nvim-yarp/README.md	/^# Yet Another Remote Plugin Framework for Neovim$/;"	c
ZimbuGoEndBlock	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! ZimbuGoEndBlock()$/;"	f
ZimbuGoStartBlock	plugged/vim-polyglot/ftplugin/zimbu.vim	/^func! ZimbuGoStartBlock()$/;"	f
[#	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [# :call search('^\\s*#\\@!', "bW")<CR>$/;"	m
[<C-D>	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldop/;"	m
[M	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR/;"	m
[M	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','v')<CR/;"	m
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[[ <Plug>(llvm-prev-section-begin)$/;"	m
[[	plugged/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> [[ ?^\\*\\a<CR>:nohlsearch<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> [[ m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z/;"	m
[[	plugged/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [[ :call search('^\\s*sub\\>', "bW")<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/handlebars.vim	/^nnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','n',v:count1)<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/handlebars.vim	/^xnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','v',v:count1)<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> [[ :<C-U>call <SID>SearchSection(0, 1, '')<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/j.vim	/^xnoremap <buffer> <silent> [[ :<C-U>call <SID>SearchSection(0, 1, visualmode())<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false/;"	m
[[	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)/;"	m
[[	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false/;"	m
[[	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)/;"	m
[[	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
[[	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
[[	plugged/vim-polyglot/ftplugin/rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/rust.vim	/^xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> [[ :call <SID>NextSection(1)<cr>$/;"	m
[[	plugged/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> [[ :call search('\\c^\\s*begin\\>', 'bW' )<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/sql.vim	/^xnoremap <buffer> <silent> [[ :<C-U>exec "normal! gv"<Bar>call search('\\c^\\s*begin\\>', 'bW' )/;"	m
[[	plugged/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> [[ :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(/;"	m
[[	plugged/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>[[ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\/;"	m
[[	plugged/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[[ :<C-u>cal <SID>CountWrapper('[[')<CR>$/;"	m
[[	plugged/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [[ :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'bW')</;"	m
[[	plugged/vim-polyglot/ftplugin/zimbu.vim	/^  nnoremap <silent> <buffer> [[ m`:call ZimbuGoStartBlock()<CR>$/;"	m
[]	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[] <Plug>(llvm-prev-section-end)$/;"	m
[]	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> [] m':call <SID>toend('b')<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	plugged/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [] :call search('^\\s*endsub\\>', "bW")<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> [] :<C-U>call <SID>SearchSection(1, 1, '')<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/j.vim	/^xnoremap <buffer> <silent> [] :<C-U>call <SID>SearchSection(1, 1, visualmode())<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false/;"	m
[]	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)/;"	m
[]	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false/;"	m
[]	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)/;"	m
[]	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
[]	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
[]	plugged/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> [] :call search('\\c^\\s*end\\W*$', 'bW' )<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/sql.vim	/^xnoremap <buffer> <silent> [] :<C-U>exec "normal! gv"<Bar>call search('\\c^\\s*end\\W*$', 'bW' )/;"	m
[]	plugged/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> [] :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', /;"	m
[]	plugged/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>[] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\/;"	m
[]	plugged/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[] :<C-u>cal <SID>CountWrapper('[]')<CR>$/;"	m
[]	plugged/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [] :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'bW'/;"	m
[b	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[b <Plug>(llvm-move-block-prev)$/;"	m
[d	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
[m	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR/;"	m
[m	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','v')<CR/;"	m
[{	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false/;"	m
[{	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)/;"	m
[{	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false/;"	m
[{	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)/;"	m
\\bl	init.vim	/^map <silent> \\bl :Lines<CR>$/;"	m
\\l	init.vim	/^map <silent> \\l :BLines<CR>$/;"	m
]#	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ]# :call search('^\\s*#\\@!', "W")<CR>$/;"	m
]<C-D>	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldop/;"	m
]M	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
]M	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','v')<CR>$/;"	m
][	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>][ <Plug>(llvm-next-section-end)$/;"	m
][	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> ][ m':call <SID>toend('')<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	plugged/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ][ :call search('^\\s*endsub\\>', "W")<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> ][ :<C-U>call <SID>SearchSection(1, 0, '')<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/j.vim	/^xnoremap <buffer> <silent> ][ :<C-U>call <SID>SearchSection(1, 0, visualmode())<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false/;"	m
][	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)/;"	m
][	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false/;"	m
][	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)/;"	m
][	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
][	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
][	plugged/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> ][ :call search('\\c^\\s*end\\W*$', 'W' )<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/sql.vim	/^xnoremap <buffer> <silent> ][ :<C-U>exec "normal! gv"<Bar>call search('\\c^\\s*end\\W*$', 'W' )</;"	m
][	plugged/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> ][ :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', /;"	m
][	plugged/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>][ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\/;"	m
][	plugged/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>][ :<C-u>cal <SID>CountWrapper('][')<CR>$/;"	m
][	plugged/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ][ :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'W')/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>]] <Plug>(llvm-next-section-begin)$/;"	m
]]	plugged/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> ]] \/^\\*\\a<CR>:nohlsearch<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> ]] m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z/;"	m
]]	plugged/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ]] :call search('^\\s*sub\\>', "W")<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/handlebars.vim	/^nnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'n',v:count1)<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/handlebars.vim	/^xnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'v',v:count1)<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> ]] :<C-U>call <SID>SearchSection(0, 0, '')<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/j.vim	/^xnoremap <buffer> <silent> ]] :<C-U>call <SID>SearchSection(0, 0, visualmode())<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false/;"	m
]]	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)/;"	m
]]	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false/;"	m
]]	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)/;"	m
]]	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
]]	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
]]	plugged/vim-polyglot/ftplugin/rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/rust.vim	/^xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> ]] :call <SID>NextSection(0)<cr>$/;"	m
]]	plugged/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> ]] :call search('\\c^\\s*begin\\>', 'W' )<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/sql.vim	/^xnoremap <buffer> <silent> ]] :<C-U>exec "normal! gv"<Bar>call search('\\c^\\s*begin\\>', 'W' )</;"	m
]]	plugged/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> ]] :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(/;"	m
]]	plugged/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>]] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\/;"	m
]]	plugged/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>]] :<C-u>cal <SID>CountWrapper(']]')<CR>$/;"	m
]]	plugged/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ]] :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'W')<C/;"	m
]]	plugged/vim-polyglot/ftplugin/zimbu.vim	/^  nnoremap <silent> <buffer> ]] m`:call ZimbuGoEndBlock()<CR>$/;"	m
]b	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>]b <Plug>(llvm-move-block-next)$/;"	m
]d	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
]m	plugged/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
]m	plugged/vim-polyglot/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','v')<CR>$/;"	m
]}	plugged/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false/;"	m
]}	plugged/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)/;"	m
]}	plugged/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false/;"	m
]}	plugged/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)/;"	m
^.+\\\\.tsx?$	plugged/coc.nvim/package.json	/^      "^.+\\\\.tsx?$": "ts-jest"$/;"	s	object:jest.transform
^[_a-zA-Z]+$	plugged/coc.nvim/data/schema.json	/^        "^[_a-zA-Z]+$": {$/;"	o	object:properties.languageserver.patternProperties
__TEST__	plugged/coc.nvim/package.json	/^      "__TEST__": true$/;"	b	object:jest.globals
__webpack_require__	plugged/coc.nvim/build/index.js	/^\/******\/ 	function __webpack_require__(moduleId) {$/;"	f
_fzf_statusline	plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
```Multiple_cursors_before/Multiple_cursors_after``` (Default: `nothing`)	plugged/vim-multiple-cursors/README.md	/^### ```Multiple_cursors_before\/Multiple_cursors_after``` (Default: `nothing`)$/;"	S	section:vim-multiple-cursors""Settings
```g:multi_cursor_exit_from_insert_mode``` (Default: 0)	plugged/vim-multiple-cursors/README.md	/^### ```g:multi_cursor_exit_from_insert_mode``` (Default: 0)$/;"	S	section:vim-multiple-cursors""Settings
```g:multi_cursor_exit_from_visual_mode``` (Default: 0)	plugged/vim-multiple-cursors/README.md	/^### ```g:multi_cursor_exit_from_visual_mode``` (Default: 0)$/;"	S	section:vim-multiple-cursors""Settings
```g:multi_cursor_normal_maps``` (Default: see below)	plugged/vim-multiple-cursors/README.md	/^### ```g:multi_cursor_normal_maps``` (Default: see below)$/;"	S	section:vim-multiple-cursors""Settings
```g:multi_cursor_support_imap``` (Default: 1)	plugged/vim-multiple-cursors/README.md	/^### ```g:multi_cursor_support_imap``` (Default: 1)$/;"	S	section:vim-multiple-cursors""Settings
```g:multi_cursor_visual_maps``` (Default: see below)	plugged/vim-multiple-cursors/README.md	/^### ```g:multi_cursor_visual_maps``` (Default: see below)$/;"	S	section:vim-multiple-cursors""Settings
aM	plugged/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
aM	plugged/vim-polyglot/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
about: Create a report to help us improve	plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^about: Create a report to help us improve$/;"	s
abstract classes	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*abstract class[ \\t]+([a-zA-Z0-9_]+)\/\\2\/a,abstra/;"	k	langdef:typescript
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-v/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby'/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_r/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abutton_dec	plugged/vim-polyglot/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|tex/;"	v
ada#Completion	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Completion (cmd)$/;"	f
ada#Completion_End	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Completion_End ()$/;"	f
ada#Create_Tags	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Create_Tags (option)$/;"	f
ada#Insert_Backspace	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Insert_Backspace ()$/;"	f
ada#Jump_Tag	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Jump_Tag (Word, Mode)$/;"	f
ada#List_Tag	plugged/vim-polyglot/autoload/ada.vim	/^function ada#List_Tag (...)$/;"	f
ada#Map_Menu	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Map_Menu (Text, Keys, Command)$/;"	f
ada#Map_Popup	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Map_Popup (Text, Keys, Command)$/;"	f
ada#Pretty_Print_Folding	plugged/vim-polyglot/autoload/ada.vim	/^   function ada#Pretty_Print_Folding (Line)			     " {{{2$/;"	f
ada#Switch_Session	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Switch_Session (New_Session)$/;"	f
ada#Switch_Syntax_Option	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Switch_Syntax_Option (option)$/;"	f
ada#User_Complete	plugged/vim-polyglot/autoload/ada.vim	/^function! ada#User_Complete(findstart, base)$/;"	f
ada#Word	plugged/vim-polyglot/autoload/ada.vim	/^function ada#Word (...)$/;"	f
ada_session	plugged/vim-polyglot/autoload/ada.vim	/^	 augroup ada_session$/;"	a
additionalProperties	plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false$/;"	b	object:properties.suggest.completionItemKindLabels
additionalProperties	plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerCommand
additionalProperties	plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerModule
additionalProperties	plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerSocket
additionalProperties	plugged/coc.nvim/data/schema.json	/^  "additionalProperties": false,$/;"	b
additionalSchemes	plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {$/;"	o	object:definitions.languageServerBase.properties
additionalSchemes	plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerCommand.properties
additionalSchemes	plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerModule.properties
additionalSchemes	plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerSocket.properties
ae	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  onoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
ae	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  xnoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
after	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
after	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
allOf	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	a	object:definitions.languageServerCommand
allOf	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	a	object:definitions.languageServerModule
allOf	plugged/coc.nvim/data/schema.json	/^      "allOf": [{ "$ref": "#\/definitions\/languageServerBase" }],$/;"	a	object:definitions.languageServerSocket
am	plugged/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
am	plugged/vim-polyglot/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
args	plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerCommand.properties
args	plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerModule.properties
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes_value	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
at	plugged/vim-polyglot/syntax/sed.vim	/^let __at = char2nr("@")$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
author	plugged/coc.nvim/package.json	/^  "author": "Qiming Zhao <chemzqm@gmail.com>",$/;"	s
autofill_tokens	plugged/vim-polyglot/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name',/;"	v
b:	plugged/vim-polyglot/syntax/liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:AutoPairs	plugged/vim-polyglot/ftplugin/crystal.vim	/^  let b:AutoPairs = { '{%': '%}' }$/;"	v
b:AutoPairs	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:AutoPairs = {$/;"	v
b:AutoPairs	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}$/;"	v
b:Xsl_SyntaxFold_by	plugged/vim-polyglot/syntax/xsl.vim	/^	let b:Xsl_SyntaxFold_by=''$/;"	v
b:ale_fixers	plugged/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_fixers = ['eslint', 'prettier', 'prettier_standard']$/;"	v
b:ale_linter_aliases	plugged/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_linter_aliases = ['css', 'javascript']$/;"	v
b:ale_linters	plugged/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_linters = ['stylelint', 'eslint']$/;"	v
b:bdf_minlines	plugged/vim-polyglot/syntax/bdf.vim	/^  let b:bdf_minlines = 30$/;"	v
b:bdf_minlines	plugged/vim-polyglot/syntax/bdf.vim	/^  let b:bdf_minlines = bdf_minlines$/;"	v
b:block_begin	plugged/vim-polyglot/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	plugged/vim-polyglot/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/abap.vim	/^  let b:browsefilter = "ABAP Source Files (*.abap)\\t*.abap\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:browsefilter = "Abaqus Input Files (*.inp *.inc)\\t*.inp;*.inc\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/ant.vim	/^    let b:browsefilter = "Build Files (build.xml)\\tbuild.xml\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^    let  b:browsefilter="ASP Files (*.asp)\\t*.asp\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/awk.vim	/^  let b:browsefilter = "Awk Source Files (*.awk,*.gawk)\\t*.awk;*.gawk\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/cobol.vim	/^  let b:browsefilter = "COBOL Source Files (*.cbl, *.cob)\\t*.cbl;*.cob;*.lib\\n".$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/config.vim	/^    let  b:browsefilter="Configure Scripts (configure.*, config.*)\\tconfigure*;config.*\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/cs.vim	/^    let b:browsefilter = "C# Source Files (*.cs)\\t*.cs\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/dosbatch.vim	/^  let b:browsefilter = "DOS Batch Files (*.bat, *.cmd)\\t*.bat;*.cmd\\nAll Files (*.*)\\t*.*\\n"$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/dtd.vim	/^    let  b:browsefilter="DTD Files (*.dtd)\\t*.dtd\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:browsefilter='eCrystal Files (*.ecr)\\t*.ecr\\n' . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/falcon.vim	/^  let b:browsefilter = "Falcon Source Files (*.fal *.ftd)\\t*.fal;*.ftd\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let b:browsefilter = "Fortran Files (*.f;*.for;*.f77;*.f90;*.f95;*.f03;*.f08;*.fpp;*.ftn)\\t*./;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browse/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/html.vim	/^    let  b:browsefilter="HTML Files (*.html,*.htm)\\t*.htm;*.html\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/j.vim	/^  let b:browsefilter = "J Script Files (*.ijs)\\t*.ijs\\n"$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/java.vim	/^    let  b:browsefilter="Java Files (*.java)\\t*.java\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let  b:browsefilter="JSP Files (*.jsp)\\t*.jsp\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:browsefilter = "Julia Source Files (*.jl)\\t*.jl\\n"$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/kwt.vim	/^    let b:browsefilter = "Kimwitu\/Kimwitu++ Files (*.k)\\t*.k\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = "\\n".b:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = ''$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter="Liquid Files (*.liquid)\\t*.liquid" . b:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/occam.vim	/^  let b:browsefilter = "All Occam Files (*.occ *.inc)\\t*.occ;*.inc\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/postscr.vim	/^  let b:browsefilter = "PostScript Files (*.ps)\\t*.ps\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/ps1.vim	/^	let b:browsefilter =$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/ps1xml.vim	/^  let b:browsefilter = $/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/pug.vim	/^  let b:browsefilter="Pug Files (*.pug)\\t*.pug\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/pyrex.vim	/^    let  b:browsefilter = "Pyrex files (*.pyx,*.pxd)\\t*.pyx;*.pxd\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/qml.vim	/^   let b:browsefilter =$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/rmd.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/rrst.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/sql.vim	/^    let b:browsefilter = "SQL Files (*.sql)\\t*.sql\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/stylus.vim	/^  let b:browsefilter="Stylus Files (*.styl)\\t*.styl\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/tcl.vim	/^    let b:browsefilter = "Tcl Source Files (.tcl)\\t*.tcl\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/vala.vim	/^  let b:browsefilter = "Vala Source Files (*.vala)\\t*.vala\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/verilog.vim	/^  let b:browsefilter = "Verilog Source Files (*.v)\\t*.v\\n" .$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let  b:browsefilter="XHTML files (*.xhtml, *.xhtm)\\t*.xhtml;*.xhtm\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/xsd.vim	/^    let  b:browsefilter="XSD Files (*.xsd)\\t*.xsd\\n" . s:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/ftplugin/xslt.vim	/^    let  b:browsefilter="XSLT Files (*.xsl,*.xslt)\\t*.xsl;*.xslt\\n" . b:browsefilter$/;"	v
b:browsefilter	plugged/vim-polyglot/syntax/lpc.vim	/^    let b:browsefilter = "LPC Source Files (*.c *.d *.h)\\t*.c;*.d;*.h\\n" .$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/autodoc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/autodoc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/autodoc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/calendar.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/calendar.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/calendar.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/indent.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/indent.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/indent.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/lpc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/lpc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/lpc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/pike.vim	/^    let b:c_minlines = 200	" mostly for multiline strings$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/pike.vim	/^    let b:c_minlines = 400	" #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/pike.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:comment_end	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:comment_end = '\\(^\\s*'.b:comment_leader.'.*\\n\\)'.$/;"	v
b:comment_jump_over	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:comment_jump_over  = "call search('".$/;"	v
b:comment_leader	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:comment_leader = '\\(--\\\\|\\\/\\\/\\\\|\\*\\\\|\\\/\\*\\\\|\\*\\\/\\)'$/;"	v
b:comment_skip_back	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:comment_skip_back  = "call search('".$/;"	v
b:comment_start	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:comment_start  = '^\\(\\s*'.b:comment_leader.'.*\\n\\)\\@<!'.$/;"	v
b:commentary_format	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:commentary_format = "# %s"           " for tpope\/vim-commentary$/;"	v
b:control_statement	plugged/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
b:control_statement	plugged/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	plugged/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
b:control_statement	plugged/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:crystal_no_expensive	plugged/vim-polyglot/syntax/crystal.vim	/^  let b:crystal_no_expensive = 1$/;"	v
b:csv_end	plugged/vim-polyglot/ftplugin/csv.vim	/^let b:csv_end   = get(g:, 'csv_end', line('$'))$/;"	v
b:csv_result	plugged/vim-polyglot/ftplugin/csv.vim	/^let b:csv_result = ''$/;"	v
b:csv_start	plugged/vim-polyglot/ftplugin/csv.vim	/^let b:csv_start = get(g:, 'csv_start', 1)$/;"	v
b:cucumber_root	plugged/vim-polyglot/ftplugin/cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:cucumber_steps_glob	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  let b:cucumber_steps_glob = b:cucumber_root.'\/**\/*.rb'$/;"	v
b:current_ftplugin	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:current_ftplugin = 'sql'$/;"	v
b:current_indent	plugged/vim-polyglot/indent/pgsql.vim	/^let b:current_indent = "pgsql"$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/coffee.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/haskell.vim	/^let b:current_syntax = old_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/javascript/sql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/jsx.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/jsx.vim	/^let b:current_syntax = 'javascript.jsx'$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/mdx.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/php/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/reason/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/rspec.vim	/^let b:current_syntax = 'rspec'$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/tsx.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/tsx.vim	/^let b:current_syntax = 'typescript.tsx'$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/8th.vim	/^let b:current_syntax = "8th"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/Jenkinsfile.vim	/^let b:current_syntax = 'Jenkinsfile'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/a2ps.vim	/^let b:current_syntax = "a2ps"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/a65.vim	/^let b:current_syntax = "a65"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aap.vim	/^let b:current_syntax = "aap"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/abap.vim	/^let b:current_syntax = "abap"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/abaqus.vim	/^let b:current_syntax = "abaqus"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/abc.vim	/^let b:current_syntax = "abc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/abel.vim	/^let b:current_syntax = "abel"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/acedb.vim	/^let b:current_syntax = "acedb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ada.vim	/^let b:current_syntax = "ada"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ahdl.vim	/^let b:current_syntax = "ahdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aidl.vim	/^let b:current_syntax = "aidl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/alsaconf.vim	/^let b:current_syntax = "alsaconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aml.vim	/^let b:current_syntax = "aml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ampl.vim	/^let b:current_syntax = "ampl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = "ansible"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible_hosts.vim	/^let b:current_syntax = "ansible_hosts"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ant.vim	/^let b:current_syntax = "ant"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/apache.vim	/^let b:current_syntax = "apache"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/apachestyle.vim	/^let b:current_syntax = "apachestyle"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/apiblueprint.vim	/^let b:current_syntax = 'apiblueprint'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/applescript.vim	/^let b:current_syntax = "applescript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aptconf.vim	/^let b:current_syntax = "aptconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/arch.vim	/^let b:current_syntax = "arch"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/art.vim	/^let b:current_syntax = "art"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asciidoc.vim	/^let b:current_syntax = "asciidoc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asl.vim	/^let b:current_syntax = "asl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asn.vim	/^let b:current_syntax = "asn"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aspperl.vim	/^let b:current_syntax = "aspperl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/aspvbs.vim	/^let b:current_syntax = "aspvbs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asterisk.vim	/^let b:current_syntax = "asterisk" $/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asteriskvm.vim	/^let b:current_syntax = "asteriskvm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/atlas.vim	/^let b:current_syntax = "atlas"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/autodoc.vim	/^let b:current_syntax = "autodoc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/autoit.vim	/^let b:current_syntax = "autoit"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/automake.vim	/^let b:current_syntax = 'automake'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ave.vim	/^let b:current_syntax = "ave"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/awk.vim	/^let b:current_syntax = "awk"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/b.vim	/^let b:current_syntax = "b"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/basic.vim	/^let b:current_syntax = "basic"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bc.vim	/^let b:current_syntax = "bc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bdf.vim	/^let b:current_syntax = "bdf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bib.vim	/^let b:current_syntax = "bib"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bindzone.vim	/^let b:current_syntax = "bindzone"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/blade.vim	/^let b:current_syntax = 'blade'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/blank.vim	/^let b:current_syntax = "blank"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/brewfile.vim	/^let b:current_syntax = "brewfile"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bsdl.vim	/^let b:current_syntax = "bsdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bst.vim	/^let b:current_syntax = "bst"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bzl.vim	/^let b:current_syntax = 'bzl'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/bzr.vim	/^let b:current_syntax = "bzr"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cabal-1.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cabal-2.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/caddyfile.vim	/^let b:current_syntax = "caddyfile"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/calendar.vim	/^let b:current_syntax = "calendar"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/carp.vim	/^let b:current_syntax = "carp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/catalog.vim	/^let b:current_syntax = "catalog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cdl.vim	/^let b:current_syntax = "cdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cdrdaoconf.vim	/^let b:current_syntax = "cdrdaoconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cdrtoc.vim	/^let b:current_syntax = "cdrtoc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cf.vim	/^let b:current_syntax = "cfml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cfg.vim	/^let b:current_syntax = "cfg"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ch.vim	/^let b:current_syntax = "ch"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/chaiscript.vim	/^let b:current_syntax = "chaiscript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/chill.vim	/^let b:current_syntax = "chill"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/chordpro.vim	/^let b:current_syntax = "chordpro"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cl.vim	/^let b:current_syntax = "cl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/clean.vim	/^let b:current_syntax = "clean"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cmod.vim	/^let b:current_syntax = "cmod"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cmusrc.vim	/^let b:current_syntax = "cmusrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cobol.vim	/^let b:current_syntax = "cobol"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/conaryrecipe.vim	/^let b:current_syntax = "conaryrecipe"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/conf.vim	/^let b:current_syntax = "conf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/config.vim	/^let b:current_syntax = "config"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cql.vim	/^let b:current_syntax = "cql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/crm.vim	/^let b:current_syntax = "crm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/crontab.vim	/^let b:current_syntax = "crontab"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cryptol.vim	/^let b:current_syntax = "cryptol"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/crystal.vim	/^let b:current_syntax = 'crystal'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cs.vim	/^let b:current_syntax = 'cs'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/csc.vim	/^let b:current_syntax = "csc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/csdl.vim	/^let b:current_syntax = "csdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/csp.vim	/^let b:current_syntax = "csp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/css.vim	/^let b:current_syntax = "css"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/csv.vim	/^let b:current_syntax="csv"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cterm.vim	/^let b:current_syntax = "cterm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cuda.vim	/^let b:current_syntax = "cuda"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cuesheet.vim	/^let b:current_syntax='cuesheet'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cupl.vim	/^let b:current_syntax = "cupl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cuplsim.vim	/^let b:current_syntax = "cuplsim"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cvs.vim	/^let b:current_syntax = "cvs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cvsrc.vim	/^let b:current_syntax = "cvsrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cynpp.vim	/^let b:current_syntax = "cynpp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/d.vim	/^let b:current_syntax = "d"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dart.vim	/^let b:current_syntax = 'dart'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/datascript.vim	/^let b:current_syntax = "datascript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dcd.vim	/^let b:current_syntax = "dcd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dcov.vim	/^let b:current_syntax = "dcov"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ddoc.vim	/^    let b:current_syntax = "ddoc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/debchangelog.vim	/^let b:current_syntax = 'debchangelog'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/debcontrol.vim	/^let b:current_syntax = 'debcontrol'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/debcopyright.vim	/^let b:current_syntax = 'debcopyright'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/debsources.vim	/^let b:current_syntax = 'debsources'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/def.vim	/^let b:current_syntax = "def"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/denyhosts.vim	/^let b:current_syntax = "denyhosts"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/desc.vim	/^let b:current_syntax = "desc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/desktop.vim	/^let b:current_syntax = "desktop"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dhall.vim	/^let b:current_syntax = 'dhall'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dictconf.vim	/^let b:current_syntax = "dictconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dictdconf.vim	/^let b:current_syntax = "dictdconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/diff.vim	/^let b:current_syntax = "diff"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dircolors.vim	/^let b:current_syntax = "dircolors"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dnsmasq.vim	/^let b:current_syntax = "dnsmasq"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/docker-compose.vim	/^let b:current_syntax = "dockercompose"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dosbatch.vim	/^let b:current_syntax = "dosbatch"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dosini.vim	/^let b:current_syntax = "dosini"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dot.vim	/^let b:current_syntax = "dot"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dracula.vim	/^let b:current_syntax = "dracula"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dsdl.vim	/^let b:current_syntax = "dsdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dsl.vim	/^let b:current_syntax = "dsl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dtd.vim	/^let b:current_syntax = "dtd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dune.vim	/^let b:current_syntax = "dune"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dylan.vim	/^let b:current_syntax = "dylan"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dylanintr.vim	/^let b:current_syntax = "dylanintr"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dylanlid.vim	/^let b:current_syntax = "dylanlid"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ecd.vim	/^let b:current_syntax = "ecd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ecrystal.vim	/^let b:current_syntax = 'ecrystal'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/edif.vim	/^let b:current_syntax = "edif"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elf.vim	/^let b:current_syntax = "elf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elinks.vim	/^let b:current_syntax = "elinks"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elmfilt.vim	/^let b:current_syntax = "elmfilt"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/embeddedpuppet.vim	/^let b:current_syntax = "embeddedpuppet"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ember-script.vim	/^let b:current_syntax = 'ember-script'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/emblem.vim	/^let b:current_syntax = 'emblem'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/esmtprc.vim	/^let b:current_syntax = "esmtprc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/esqlc.vim	/^let b:current_syntax = "esqlc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/esterel.vim	/^let b:current_syntax = "esterel"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/eterm.vim	/^let b:current_syntax = "eterm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/exim.vim	/^let b:current_syntax = "exim"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/expect.vim	/^let b:current_syntax = "expect"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/exports.vim	/^let b:current_syntax = "exports"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/falcon.vim	/^let b:current_syntax = "falcon"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fan.vim	/^let b:current_syntax = "fan"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fbs.vim	/^let b:current_syntax = "fbs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fennel.vim	/^let b:current_syntax = "fennel"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ferm.vim	/^let b:current_syntax = "ferm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fetchmail.vim	/^let b:current_syntax = "fetchmail"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fgl.vim	/^let b:current_syntax = "fgl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fish.vim	/^let b:current_syntax = 'fish'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/focexec.vim	/^let b:current_syntax = "focexec"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/forth.vim	/^let b:current_syntax = "forth"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fortran.vim	/^let b:current_syntax = "fortran"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/framescript.vim	/^let b:current_syntax = "framescript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/freebasic.vim	/^let b:current_syntax = "freebasic"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fsharp.vim	/^let b:current_syntax = 'fsharp'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fstab.vim	/^let b:current_syntax = "fstab"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fvwm.vim	/^let b:current_syntax = "fvwm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gdb.vim	/^let b:current_syntax = "gdb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gdmo.vim	/^let b:current_syntax = "gdmo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gdscript3.vim	/^let b:current_syntax = "gdscript3"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gedcom.vim	/^let b:current_syntax = "gedcom"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitignore.vim	/^let b:current_syntax = 'gitignore'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitolite.vim	/^let b:current_syntax = "gitolite"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gkrellmrc.vim	/^let b:current_syntax = "gkrellmrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/glsl.vim	/^  let b:current_syntax = "glsl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gmpl.vim	/^let b:current_syntax = "gmpl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gnash.vim	/^let b:current_syntax = "gnash"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gomod.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gp.vim	/^let b:current_syntax = "gp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gpg.vim	/^let b:current_syntax = "gpg"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/grads.vim	/^let b:current_syntax = "grads"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/graphql.vim	/^let b:current_syntax = 'graphql'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gretl.vim	/^let b:current_syntax="gretl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/group.vim	/^let b:current_syntax = "group"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/grub.vim	/^let b:current_syntax = "grub"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gsl.vim	/^let b:current_syntax = "gsl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gsp.vim	/^let b:current_syntax = "gsp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gtkrc.vim	/^let b:current_syntax = "gtkrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hamster.vim	/^let b:current_syntax = "hamster"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/handlebars.vim	/^let b:current_syntax = "handlebars"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haproxy.vim	/^let b:current_syntax = "haproxy"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haste.vim	/^let b:current_syntax = "haste"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hastepreproc.vim	/^let b:current_syntax = "hastepreproc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haxe.vim	/^let b:current_syntax = "haxe"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hb.vim	/^let b:current_syntax = "hb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hcl.vim	/^let b:current_syntax = "hcl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/helm.vim	/^let b:current_syntax = "helm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/helm.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/help.vim	/^let b:current_syntax = "help"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hercules.vim	/^let b:current_syntax = "hercules"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hex.vim	/^let b:current_syntax = "hex"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hgcommit.vim	/^let b:current_syntax = "hgcommit"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hive.vim	/^let b:current_syntax = "hive"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hog.vim	/^let b:current_syntax = "hog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hollywood.vim	/^let b:current_syntax = "hollywood"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hostconf.vim	/^let b:current_syntax = "hostconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/hostsaccess.vim	/^let b:current_syntax = "hostsaccess"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/htmldjango.vim	/^let b:current_syntax = "htmldjango"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/htmlm4.vim	/^let b:current_syntax = "htmlm4"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/i3config.vim	/^let b:current_syntax = "i3config"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ibasic.vim	/^let b:current_syntax = "ibasic"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/icalendar.vim	/^let b:current_syntax = "icalendar"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/icemenu.vim	/^let b:current_syntax = "IceMenu"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/icon.vim	/^let b:current_syntax = "icon"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/idris.vim	/^let b:current_syntax = "idris"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/idris2.vim	/^let b:current_syntax = "idris2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/indent.vim	/^let b:current_syntax = "indent"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/inform.vim	/^let b:current_syntax = "inform"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/initng.vim	/^let b:current_syntax = "initng"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/inittab.vim	/^let b:current_syntax = "inittab"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/iss.vim	/^let b:current_syntax = "iss"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ist.vim	/^let b:current_syntax = "ist"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/j.vim	/^let b:current_syntax = 'j'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jal.vim	/^let b:current_syntax = "jal"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jam.vim	/^let b:current_syntax = "jam"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/java.vim	/^let b:current_syntax = "java"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/javacc.vim	/^let b:current_syntax = "javacc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jess.vim	/^let b:current_syntax = "jess"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jgraph.vim	/^let b:current_syntax = "jgraph"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = "jinja2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jovial.vim	/^let b:current_syntax = "jovial"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jproperties.vim	/^let b:current_syntax = "jproperties"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/json5.vim	/^  let b:current_syntax = 'json5'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jsp.vim	/^let b:current_syntax = "jsp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jst.vim	/^let b:current_syntax = 'jst'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/julia.vim	/^let b:current_syntax = "julia"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/juliadoc.vim	/^let b:current_syntax = "juliadoc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kconfig.vim	/^let b:current_syntax = "kconfig"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kivy.vim	/^let b:current_syntax = "kivy"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kix.vim	/^let b:current_syntax = "kix"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kotlin.vim	/^let b:current_syntax = 'kotlin'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kscript.vim	/^let b:current_syntax = "kscript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kwt.vim	/^let b:current_syntax = "kwt"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lace.vim	/^let b:current_syntax = "lace"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/latte.vim	/^let b:current_syntax = "latte"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ld.vim	/^let b:current_syntax = "ld"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ldif.vim	/^let b:current_syntax = "ldif"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ledger.vim	/^let b:current_syntax = b:is_hledger ? 'hledger' : 'ledger'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/less.vim	/^let b:current_syntax = "less"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lex.vim	/^let b:current_syntax = "lex"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lftp.vim	/^let b:current_syntax = "lftp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lhaskell.vim	/^let b:current_syntax = "lhaskell"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/libao.vim	/^let b:current_syntax = "libao"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lidris.vim	/^let b:current_syntax = "lidris"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lidris2.vim	/^let b:current_syntax = "lidris2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lifelines.vim	/^let b:current_syntax = "lifelines"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lilo.vim	/^let b:current_syntax = "lilo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lilypond.vim	/^let b:current_syntax = "lilypond"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/limits.vim	/^let b:current_syntax = "limits"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lisp.vim	/^let b:current_syntax = "lisp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/litcoffee.vim	/^let b:current_syntax = "litcoffee"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lite.vim	/^let b:current_syntax = "lite"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/litestep.vim	/^let b:current_syntax = "litestep"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/llvm.vim	/^let b:current_syntax = "llvm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/log.vim	/^let b:current_syntax = 'log'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/loginaccess.vim	/^let b:current_syntax = "loginaccess"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/logindefs.vim	/^let b:current_syntax = "logindefs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/logtalk.vim	/^let b:current_syntax = "logtalk"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lotos.vim	/^let b:current_syntax = "lotos"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lout.vim	/^let b:current_syntax = "lout"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lpc.vim	/^let b:current_syntax = "lpc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lprolog.vim	/^let b:current_syntax = "lprolog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ls.vim	/^  let b:current_syntax = 'livescript'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ls.vim	/^let b:current_syntax = "ls"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lsl.vim	/^let b:current_syntax = "lsl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lss.vim	/^let b:current_syntax = "lss"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/lynx.vim	/^let b:current_syntax = "lynx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/m4.vim	/^let b:current_syntax = "m4"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mailaliases.vim	/^let b:current_syntax = "mailaliases"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mailcap.vim	/^let b:current_syntax = "mailcap"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mako.vim	/^let b:current_syntax = b:mako_outer_lang$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mallard.vim	/^let b:current_syntax = "mallard"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/manconf.vim	/^let b:current_syntax = "manconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/maple.vim	/^let b:current_syntax = "maple"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/markdown.vim	/^let b:current_syntax = "mkd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/master.vim	/^let b:current_syntax = "master"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mel.vim	/^let b:current_syntax = "mel"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/merlin.vim	/^let b:current_syntax = "merlin"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/meson.vim	/^let b:current_syntax = "meson"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/messages.vim	/^let b:current_syntax = "messages"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mf.vim	/^let b:current_syntax = "mf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mgl.vim	/^let b:current_syntax = "mgl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mgp.vim	/^let b:current_syntax = "mgp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mib.vim	/^let b:current_syntax = "mib"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mix.vim	/^let b:current_syntax = "mix"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mmp.vim	/^let b:current_syntax = "mmp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/modconf.vim	/^let b:current_syntax = "modconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/modula2.vim	/^let b:current_syntax = "modula2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/modula3.vim	/^let b:current_syntax = "modula3"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/monk.vim	/^let b:current_syntax = "monk"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/moo.vim	/^let b:current_syntax = "moo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/moon.vim	/^  let b:current_syntax = 'moon'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mp.vim	/^let b:current_syntax = "mp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mplayerconf.vim	/^let b:current_syntax = "mplayerconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mrxvtrc.vim	/^let b:current_syntax = "mrxvtrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/msidl.vim	/^let b:current_syntax = "msidl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/msql.vim	/^let b:current_syntax = "msql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/murphi.vim	/^let b:current_syntax = "murphi"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mush.vim	/^let b:current_syntax = "mush"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/muttrc.vim	/^let b:current_syntax = "muttrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mysql.vim	/^let b:current_syntax = "mysql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/n1ql.vim	/^let b:current_syntax = "n1ql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/named.vim	/^let b:current_syntax = "named"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nanorc.vim	/^let b:current_syntax = "nanorc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/natural.vim	/^let b:current_syntax = "natural"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ncf.vim	/^let b:current_syntax = "ncf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/neomuttrc.vim	/^let b:current_syntax = "neomuttrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/netrc.vim	/^let b:current_syntax = "netrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nim.vim	/^let b:current_syntax = 'nim'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ninja.vim	/^let b:current_syntax = "ninja"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nix.vim	/^let b:current_syntax = "nix"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nqc.vim	/^let b:current_syntax = "nqc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nroff.vim	/^let b:current_syntax = "nroff"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nsis.vim	/^let b:current_syntax = "nsis"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/oasis.vim	/^let b:current_syntax = "oasis"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/obj.vim	/^let b:current_syntax = "obj"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ocamlbuild_tags.vim	/^let b:current_syntax = "ocamlbuild_tags"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/occam.vim	/^let b:current_syntax = "occam"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ocpbuild.vim	/^let b:current_syntax = "ocpbuild"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ocpbuildroot.vim	/^let b:current_syntax = "ocpbuildroot"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/octave.vim	/^let b:current_syntax = "octave"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/odin.vim	/^let b:current_syntax = "odin"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/omake.vim	/^let b:current_syntax = "omake"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/omnimark.vim	/^let b:current_syntax = "omnimark"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/opam.vim	/^let b:current_syntax = "opam"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/opencl.vim	/^let b:current_syntax = "opencl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/openroad.vim	/^let b:current_syntax = "openroad"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/opl.vim	/^let b:current_syntax = "opl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ora.vim	/^let b:current_syntax = "ora"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pamconf.vim	/^let b:current_syntax = "pamconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pamenv.vim	/^let b:current_syntax = "pamenv"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/papp.vim	/^let b:current_syntax = "papp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pascal.vim	/^let b:current_syntax = "pascal"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/passwd.vim	/^let b:current_syntax = "passwd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pccts.vim	/^let b:current_syntax = "pccts"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pdf.vim	/^let b:current_syntax = "pdf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/perl.vim	/^let b:current_syntax = "perl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pf.vim	/^let b:current_syntax = "pf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pfmain.vim	/^let b:current_syntax = "pfmain"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pgsql.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pike.vim	/^let b:current_syntax = "pike"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pilrc.vim	/^let b:current_syntax = "pilrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pine.vim	/^let b:current_syntax = "pine"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pinfo.vim	/^let b:current_syntax = "pinfo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/plantuml.vim	/^let b:current_syntax = 'plantuml'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pli.vim	/^let b:current_syntax = "pl1"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/plm.vim	/^let b:current_syntax = "plm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/plp.vim	/^let b:current_syntax = "plp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/plsql.vim	/^let b:current_syntax = "plsql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/po.vim	/^let b:current_syntax = "po"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pony.vim	/^let b:current_syntax = 'pony'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/postscr.vim	/^let b:current_syntax = "postscr"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pov.vim	/^let b:current_syntax = "pov"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/povini.vim	/^let b:current_syntax = "povini"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ppd.vim	/^let b:current_syntax = "ppd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ppwiz.vim	/^let b:current_syntax = "ppwiz"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/privoxy.vim	/^let b:current_syntax = "privoxy"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/procmail.vim	/^let b:current_syntax = "procmail"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/prolog.vim	/^let b:current_syntax = "prolog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/promela.vim	/^let b:current_syntax = "promela"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/proto.vim	/^let b:current_syntax = "proto"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/protocols.vim	/^let b:current_syntax = "protocols"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ps1.vim	/^let b:current_syntax = "ps1"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ps1xml.vim	/^let b:current_syntax = "ps1xml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/psf.vim	/^let b:current_syntax = "psf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/puppet.vim	/^let b:current_syntax = "puppet"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/purescript.vim	/^let b:current_syntax = "purescript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pyrex.vim	/^let b:current_syntax = "pyrex"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/python.vim	/^let b:current_syntax = 'python'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/qmake.vim	/^let b:current_syntax = "qmake"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/qml.vim	/^let b:current_syntax = "qml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/quake.vim	/^let b:current_syntax = "quake"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/racket.vim	/^let b:current_syntax = "racket"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/radiance.vim	/^let b:current_syntax = "radiance"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ragel.vim	/^let b:current_syntax = "ragel"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/raku.vim	/^let b:current_syntax = "raku"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/raml.vim	/^let b:current_syntax = "raml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ratpoison.vim	/^let b:current_syntax = "ratpoison"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/razor.vim	/^let b:current_syntax = "razor"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rc.vim	/^let b:current_syntax = "rc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rcs.vim	/^let b:current_syntax = "rcs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/readline.vim	/^let b:current_syntax = 'readline'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/reason.vim	/^let b:current_syntax = "reason"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rego.vim	/^let b:current_syntax = 'rego'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/remind.vim	/^let b:current_syntax = "remind"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/requirements.vim	/^let b:current_syntax = "requirements"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/resolv.vim	/^let b:current_syntax = "resolv"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/reva.vim	/^let b:current_syntax = "reva"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rexx.vim	/^let b:current_syntax = "rexx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rib.vim	/^let b:current_syntax = "rib"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rmd.vim	/^  let b:current_syntax = "rmd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rmd.vim	/^let b:current_syntax = "rmd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rnc.vim	/^let b:current_syntax = "rnc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rng.vim	/^let b:current_syntax = 'rng'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rnoweb-1.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rnoweb-2.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/robots.vim	/^let b:current_syntax = "robots"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rpcgen.vim	/^let b:current_syntax = "rpcgen"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rpl.vim	/^let b:current_syntax = "rpl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rrst.vim	/^let b:current_syntax = "rrst"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rst.vim	/^let b:current_syntax = "rst"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rtf.vim	/^let b:current_syntax = "rtf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/samba.vim	/^let b:current_syntax = "samba"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sas.vim	/^let b:current_syntax = "sas"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sass.vim	/^let b:current_syntax = "sass"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sather.vim	/^let b:current_syntax = "sather"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = "scala"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = 'scala'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scheme.vim	/^let b:current_syntax = 'scheme'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scilab.vim	/^let b:current_syntax = "scilab"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/screen.vim	/^let b:current_syntax = "screen"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sd.vim	/^let b:current_syntax = "sd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sdc.vim	/^let b:current_syntax = "sdc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sdl.vim	/^let b:current_syntax = "sdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sed.vim	/^let b:current_syntax = "sed"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sensors.vim	/^let b:current_syntax = "sensors"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/services.vim	/^let b:current_syntax = "services"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/setserial.vim	/^let b:current_syntax = "setserial"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sexplib.vim	/^let b:current_syntax = "sexplib"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sieve.vim	/^let b:current_syntax = "sieve"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sil.vim	/^let b:current_syntax = "sil"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/simula.vim	/^let b:current_syntax = "simula"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sinda.vim	/^let b:current_syntax = "sinda"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sisu.vim	/^let b:current_syntax = "sisu"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/skill.vim	/^let b:current_syntax = "skill"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slang.vim	/^let b:current_syntax = "slang"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slice.vim	/^let b:current_syntax = "slice"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slim.vim	/^let b:current_syntax = "slim"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slime.vim	/^let b:current_syntax = "slime"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slpconf.vim	/^let b:current_syntax = "slpconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slpreg.vim	/^let b:current_syntax = "slpreg"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slpspi.vim	/^let b:current_syntax = "slpspi"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slrnrc.vim	/^let b:current_syntax = "slrnrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slrnsc.vim	/^let b:current_syntax = "slrnsc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sm.vim	/^let b:current_syntax = "sm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/smarty.vim	/^let b:current_syntax = "smarty"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/smcl.vim	/^let b:current_syntax = "smcl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/smith.vim	/^let b:current_syntax = "smith"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sml.vim	/^let b:current_syntax = "sml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/smt2.vim	/^let b:current_syntax = "smt2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/snobol4.vim	/^let b:current_syntax = "snobol4"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/spec.vim	/^let b:current_syntax = "spec"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/spice.vim	/^let b:current_syntax = "spice"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/spup.vim	/^let b:current_syntax = "spup"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/spyce.vim	/^let b:current_syntax = "spyce"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sqlj.vim	/^let b:current_syntax = "sqlj"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sqloracle.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sqr.vim	/^let b:current_syntax = "sqr"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/squid.vim	/^let b:current_syntax = "squid"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/srec.vim	/^let b:current_syntax = "srec"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sshconfig.vim	/^let b:current_syntax = "sshconfig"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sshdconfig.vim	/^let b:current_syntax = "sshdconfig"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/st.vim	/^let b:current_syntax = "st"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/stata.vim	/^let b:current_syntax = "stata"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/stp.vim	/^let b:current_syntax = "stp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/stylus.vim	/^let b:current_syntax = "stylus"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sudoers.vim	/^let b:current_syntax = "sudoers"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/svelte.vim	/^let b:current_syntax = "svelte"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/svg.vim	/^let b:current_syntax = "svg"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/svn.vim	/^let b:current_syntax = "svn"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/swift.vim	/^let b:current_syntax = "swift"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/swiftgyb.vim	/^let b:current_syntax = "swiftgyb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sxhkdrc.vim	/^let b:current_syntax = "sxhkdrc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sysctl.vim	/^let b:current_syntax = "sysctl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/systemd.vim	/^let b:current_syntax = "systemd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/systemverilog.vim	/^let b:current_syntax = "systemverilog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tablegen.vim	/^let b:current_syntax = "tablegen"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tads.vim	/^let b:current_syntax = "tads"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tags.vim	/^let b:current_syntax = "tags"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tak.vim	/^let b:current_syntax = "tak"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tap.vim	/^let b:current_syntax="tapVerboseOutput"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/taskdata.vim	/^let b:current_syntax = "taskdata"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/taskedit.vim	/^let b:current_syntax = "taskedit"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tcl.vim	/^let b:current_syntax = "tcl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/teraterm.vim	/^let b:current_syntax = "teraterm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/terminfo.vim	/^let b:current_syntax = "terminfo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/terraform.vim	/^let b:current_syntax = 'terraform'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tex.vim	/^let   b:current_syntax = "tex"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/texinfo.vim	/^let b:current_syntax = "texinfo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/texmf.vim	/^let b:current_syntax = "texmf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tf.vim	/^let b:current_syntax = "tf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/thrift.vim	/^let b:current_syntax = "thrift"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tidy.vim	/^let b:current_syntax = "tidy"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tilde.vim	/^let b:current_syntax = "tilde"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tli.vim	/^let b:current_syntax = "tli"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tmux.vim	/^let b:current_syntax = "tmux"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/toml.vim	/^let b:current_syntax = 'toml'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tpp.vim	/^let b:current_syntax = 'tpp'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tptp.vim	/^let b:current_syntax = "tptp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/trasys.vim	/^let b:current_syntax = "trasys"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/treetop.vim	/^let b:current_syntax = 'treetop'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tsalt.vim	/^let b:current_syntax = "tsalt"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tsscl.vim	/^let b:current_syntax = "tsscl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tssgm.vim	/^let b:current_syntax = "tssgm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tssop.vim	/^let b:current_syntax = "tssop"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tt2.vim	/^let b:current_syntax = "tt2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tt2html.vim	/^let b:current_syntax = "tt2html"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tt2js.vim	/^let b:current_syntax = "tt2js"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/typescriptreact.vim	/^let b:current_syntax = "typescriptreact"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/uc.vim	/^let b:current_syntax = "uc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/udevconf.vim	/^let b:current_syntax = "udevconf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/udevperm.vim	/^let b:current_syntax = "udevperm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/uil.vim	/^let b:current_syntax = "uil"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/unison.vim	/^let b:current_syntax = "unison"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/updatedb.vim	/^let b:current_syntax = "updatedb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/upstart.vim	/^let b:current_syntax = "upstart"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/upstreamdat.vim	/^let b:current_syntax = "upstreamdat"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/upstreaminstalllog.vim	/^let b:current_syntax = "upstreaminstalllog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/upstreamlog.vim	/^let b:current_syntax = "upstreamlog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/usserverlog.vim	/^let b:current_syntax = "usserverlog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/usw2kagtlog.vim	/^let b:current_syntax = "usw2kagentlog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vala.vim	/^let b:current_syntax = "vala"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vb.vim	/^let b:current_syntax = "vb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vbnet.vim	/^let b:current_syntax = "vbnet"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/velocity.vim	/^let b:current_syntax = "velocity"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vera.vim	/^let b:current_syntax = "vera"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/verilog.vim	/^let b:current_syntax = "verilog"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/verilogams.vim	/^let b:current_syntax = "verilogams"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vgrindefs.vim	/^let b:current_syntax = "vgrindefs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vhdl.vim	/^let b:current_syntax = "vhdl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/viminfo.vim	/^let b:current_syntax = "viminfo"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vlang.vim	/^let b:current_syntax = 'vlang'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vmasm.vim	/^let b:current_syntax = "vmasm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/voscm.vim	/^let b:current_syntax = "voscm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vrml.vim	/^let b:current_syntax = "vrml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vroom.vim	/^let b:current_syntax = 'vroom'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wast.vim	/^let b:current_syntax = "wast"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/webmacro.vim	/^let b:current_syntax = "webmacro"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wget.vim	/^let b:current_syntax = "wget"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/winbatch.vim	/^let b:current_syntax = "winbatch"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wml.vim	/^let b:current_syntax = "wml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wsh.vim	/^let b:current_syntax = "wsh"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wsml.vim	/^let b:current_syntax = "wsml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/wvdial.vim	/^let b:current_syntax = "wvdial"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xdc.vim	/^let b:current_syntax = "xdc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xdefaults.vim	/^let b:current_syntax = "xdefaults"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xf86conf.vim	/^let b:current_syntax = "xf86conf"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xhtml.vim	/^let b:current_syntax = "xhtml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xinetd.vim	/^let b:current_syntax = "xinetd"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xmath.vim	/^let b:current_syntax = "xmath"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xml.vim	/^let b:current_syntax = "xml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xmodmap.vim	/^let b:current_syntax = "xmodmap"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xpm.vim	/^let b:current_syntax = "xpm"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xpm2.vim	/^let b:current_syntax = "xpm2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xquery.vim	/^let b:current_syntax = "xquery"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xsl.vim	/^let b:current_syntax = "xsl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/yacc.vim	/^let b:current_syntax = "yacc"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/yaml.vim	/^let b:current_syntax = "yaml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/z8a.vim	/^let b:current_syntax = "z8a"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/zephir.vim	/^let b:current_syntax = "zephir"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/zig.vim	/^let b:current_syntax = "zig"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/zimbu.vim	/^let b:current_syntax = "zimbu"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/zir.vim	/^let b:current_syntax = "zir"$/;"	v
b:current_syntax_embed	plugged/vim-polyglot/syntax/rust.vim	/^    let b:current_syntax_embed = 1$/;"	v
b:dc_next_index	plugged/vim-polyglot/syntax/dircolors.vim	/^let b:dc_next_index = 0$/;"	v
b:dhall_ftplugin	plugged/vim-polyglot/ftplugin/dhall.vim	/^let b:dhall_ftplugin = 1$/;"	v
b:did_8thplugin	plugged/vim-polyglot/ftplugin/8th.vim	/^let b:did_8thplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/a2ps.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/aap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/abap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ada.vim	/^let b:did_ftplugin = 45$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/alsaconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ansible_hosts.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ant.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/arch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/awk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/bdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/blade.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/bst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/caddyfile.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/calendar.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cfg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cobol.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/config.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/crm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/crystal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/csc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/css.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/csv.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/cvsrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dart.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/debcontrol.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/denyhosts.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dictconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dictdconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/diff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dircolors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dockerfile.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dosbatch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dosini.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dtd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/dune.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/elinks.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/erlang.vim	/^	let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/eterm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/falcon.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/fennel.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/fetchmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/fortran.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/framescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/fvwm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gdb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gitignore.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/gpg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/graphql.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/groovy.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/group.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/grub.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/haml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hamster.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/help.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hgcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hostconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/hostsaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/html.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/idris.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/idris2.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/indent.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ion.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/j.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/java.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/jproperties.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/jsp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/kconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/kotlin.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ld.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/less.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/lftp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/libao.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/lilypond.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/limits.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/liquid.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/lisp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/llvm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/logcheck.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/loginaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/logindefs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/logtalk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/lprolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ls.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/m4.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mailaliases.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mailcap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/make.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mako.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/manconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/meson.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mma.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/modconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/moon.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mplayerconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/mrxvtrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/muttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/nanorc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/neomuttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/netrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/nix.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/nroff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/nsis.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/occam.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/omake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/opencl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/pamconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/pascal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/passwd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/pdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/perl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/pinfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/pony.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/postscr.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/procmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/prolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/protocols.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ps1.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ps1xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/puppet.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/qml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/quake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/racket.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/raku.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/razor.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/readline.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/reva.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rmd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rnc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rnoweb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rpl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rrst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sass.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sbt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/scala.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/scheme.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/screen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sensors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/services.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/setserial.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sexplib.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sieve.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/slim.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/slpconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/slpreg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/slpspi.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/spec.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:did_ftplugin     = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sshconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sudoers.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/svelte.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/sysctl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/systemd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/tablegen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/tcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/terminfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/text.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/tmux.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/toml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/treetop.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/typescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/udevconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/udevperm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/updatedb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/vala.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/vb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/verilog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/vhdl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/vroom.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/wast.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xdefaults.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xf86conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xinetd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xmodmap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xsd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/xslt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/yaml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/zig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-polyglot/ftplugin/zimbu.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/vim-polyglot/after/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/after/indent/jsx.vim	/^  let b:did_indent = s:did_indent$/;"	v
b:did_indent	plugged/vim-polyglot/after/indent/tsx.vim	/^  let b:did_indent = s:did_indent$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ada.vim	/^let b:did_indent = 45$/;"	v
b:did_indent	plugged/vim-polyglot/indent/arduino.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/autohotkey.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/awk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/bib.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/blade.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/bst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/bzl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cabal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/caddyfile.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/chaiscript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cmake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cobol.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/crystal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cs.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/css.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cuda.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/cython.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/d.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dart.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dictconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dictdconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dosbatch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dune.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/dylan.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ecrystal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/elm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ember-script.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/erlang.vim	/^  let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/eterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/falcon.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/fennel.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/fortran.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/framescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/fsharp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/gdscript3.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/gitolite.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/go.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/graphql.vim	/^  let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/haml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/hamster.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/handlebars.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/haskell.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/hcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/hog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/idris.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/idris2.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/j.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/java.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/json.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/jst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/kotlin.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ld.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ledger.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/lifelines.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/lilypond.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/liquid.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/lisp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/litcoffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/llvm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/logtalk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ls.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/lua.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/mail.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/make.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/mako.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/markdown.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/meson.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/moon.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/mp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nginx.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nix.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nsis.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ocaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/occam.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/octave.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/odin.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/omake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/opencl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/pascal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/perl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/pgsql.vim	/^let b:did_indent     = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/plantuml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/pony.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/postscr.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/pov.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/prolog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/proto.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ps1.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/pug.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/puppet.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/purescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/python.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/qml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/racket.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/raku.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/readline.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/reason.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rmd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rnoweb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rpl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rrst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/rust.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/sas.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/sass.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/scala.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/scss.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/sdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/slim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/slime.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/sml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/solidity.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/sshconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/stylus.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/svelte.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/svg.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/swift.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/systemverilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/tcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/teraterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/terraform.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/tex.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/tf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/tilde.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/treetop.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/typescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/typescriptreact.vim	/^  let b:did_indent=s:did_indent$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vala.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/verilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vhdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vroom.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vue.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/wast.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/xf86conf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/xinetd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/yacc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/yaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/zig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/zimbu.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/syntax/spyce.vim	/^let b:did_indent = 1	     " don't perform HTML indentation!$/;"	v
b:did_indent_hbs	plugged/vim-polyglot/indent/handlebars.vim	/^let b:did_indent_hbs = 1$/;"	v
b:did_scheme_ftplugin	plugged/vim-polyglot/ftplugin/scheme.vim	/^let b:did_scheme_ftplugin = 1$/;"	v
b:did_scheme_syntax	plugged/vim-polyglot/syntax/scheme.vim	/^let b:did_scheme_syntax = 1$/;"	v
b:dnsmasq_backrgound_light	plugged/vim-polyglot/syntax/dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = 0$/;"	v
b:dnsmasq_backrgound_light	plugged/vim-polyglot/syntax/dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = dnsmasq_backrgound_light$/;"	v
b:ecrystal_align_end	plugged/vim-polyglot/indent/ecrystal.vim	/^    let b:ecrystal_align_end = b:ecrystal_subtype !=# 'html' && b:ecrystal_subtype !=# 'xml'$/;"	v
b:ecrystal_align_end	plugged/vim-polyglot/indent/ecrystal.vim	/^    let b:ecrystal_align_end = g:ecrystal_align_end$/;"	v
b:ecrystal_indent_multiline	plugged/vim-polyglot/indent/ecrystal.vim	/^  let b:ecrystal_indent_multiline = get(g:, 'ecrystal_indent_multiline', 1)$/;"	v
b:ecrystal_subtype_indentexpr	plugged/vim-polyglot/indent/ecrystal.vim	/^let b:ecrystal_subtype_indentexpr = &l:indentexpr$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eeli/;"	v
b:eelixir_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eeli/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype_indentexpr	plugged/vim-polyglot/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:elixir_no_expensive	plugged/vim-polyglot/syntax/slime.vim	/^let b:elixir_no_expensive = 1$/;"	v
b:endwise_addition	plugged/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_addition = 'end'$/;"	v
b:endwise_addition	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_addition = '\\=index(["dot","mindmap","uml","salt","wbs"], submatch(0))!=-1 ? "@en/;"	v
b:endwise_pattern	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_pattern = '^\\s*\\zs\\(loop\\|group\\|alt\\|note\\ze[^:]*$\\|legend\\|@start\\zs\\/;"	v
b:endwise_syngroups	plugged/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_syngroups = 'fishKeyword,fishConditional,fishRepeat'$/;"	v
b:endwise_syngroups	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_syngroups = 'plantumlKeyword,plantumlPreProc'$/;"	v
b:endwise_words	plugged/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_words = 'begin,function,if,switch,while,for'$/;"	v
b:endwise_words	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_words = 'loop,group,alt,note,legend,startdot,startmindmap,startuml,startsalt,start/;"	v
b:erlang_syntax_synced	plugged/vim-polyglot/syntax/erlang.vim	/^let b:erlang_syntax_synced = 1$/;"	v
b:eruby_nest_level	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[/;"	v
b:eruby_nest_level	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'/;"	v
b:eruby_nest_level	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubi/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubi/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/nginx.vim	/^let b:eruby_subtype = ''$/;"	v
b:eruby_subtype_indentexpr	plugged/vim-polyglot/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:eterm_minlines	plugged/vim-polyglot/syntax/eterm.vim	/^  let b:eterm_minlines = 50$/;"	v
b:eterm_minlines	plugged/vim-polyglot/syntax/eterm.vim	/^  let b:eterm_minlines = eterm_minlines$/;"	v
b:fortran_dialect	plugged/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_dialect = "f08"$/;"	v
b:fortran_dialect	plugged/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_dialect = g:fortran_dialect$/;"	v
b:fortran_dialect	plugged/vim-polyglot/syntax/fortran.vim	/^  let b:fortran_dialect = "F"$/;"	v
b:fortran_dialect	plugged/vim-polyglot/syntax/fortran.vim	/^  let b:fortran_dialect = "f08"$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/ftplugin/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/indent/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/indent/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/indent/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/syntax/fortran.vim	/^        let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	plugged/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_retype	plugged/vim-polyglot/syntax/fortran.vim	/^let b:fortran_retype = getline(1)." ".getline(2)." ".getline(3)$/;"	v
b:framescript_minlines	plugged/vim-polyglot/syntax/framescript.vim	/^let b:framescript_minlines = exists("framescript_minlines")$/;"	v
b:git_dir	plugged/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	plugged/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git[\\\/]worktrees[\\\/][^\\\/]\\+\\>')$/;"	v
b:git_dir	plugged/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	plugged/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
b:handlebars_subtype_indentexpr	plugged/vim-polyglot/indent/handlebars.vim	/^let b:handlebars_subtype_indentexpr = &l:indentexpr$/;"	v
b:hi_indent	plugged/vim-polyglot/after/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_indent	plugged/vim-polyglot/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	plugged/vim-polyglot/after/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_lasttick	plugged/vim-polyglot/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	plugged/vim-polyglot/after/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:hi_newstate	plugged/vim-polyglot/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:hs_chs	plugged/vim-polyglot/syntax/chaskell.vim	/^let b:hs_chs=1$/;"	v
b:html_indent_usestate	plugged/vim-polyglot/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:html_indent_usestate	plugged/vim-polyglot/indent/handlebars.vim	/^let b:html_indent_usestate = 0$/;"	v
b:indent_use_syntax	plugged/vim-polyglot/indent/perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indent_use_syntax	plugged/vim-polyglot/indent/raku.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indentexpr_base	plugged/vim-polyglot/after/indent/javascript-2.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:indentexpr_base	plugged/vim-polyglot/after/indent/php.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:indentexpr_base	plugged/vim-polyglot/after/indent/typescript.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:is_hledger	plugged/vim-polyglot/syntax/ledger.vim	/^    let b:is_hledger = 0$/;"	v
b:is_hledger	plugged/vim-polyglot/syntax/ledger.vim	/^    let b:is_hledger = 1$/;"	v
b:jst_nest_level	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = 1$/;"	v
b:jst_nest_level	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'haml'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'javascript'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'ruby'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'text'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'yaml'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = g:jst_default_subtype$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.jst\\)\\+$','',''),'\\.\\zs/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(&filetype,'^jst\\.\\zs\\w\\+')$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(s:lines,'jst_subtype=\\zs\\w\\+')$/;"	v
b:jst_subtype_indentexpr	plugged/vim-polyglot/indent/jst.vim	/^let b:jst_subtype_indentexpr = &l:indentexpr$/;"	v
b:jsx_pretty_old_cms	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^let b:jsx_pretty_old_cms = &l:commentstring$/;"	v
b:jsx_pretty_old_cms	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^let b:jsx_pretty_old_cms = &l:commentstring$/;"	v
b:julia_begin_keywords	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywords = '\\%(\\%(\\.\\s*\\)\\@<!\\|\\%(@\\s*.\\s*\\)\\@<=\\)\\<\\%(functi/;"	v
b:julia_begin_keywordsm	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywordsm = '\\%(' . s:yesmacro . b:julia_begin_keywords . '\\)\\|'$/;"	v
b:julia_end_keywords	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_end_keywords = '\\<end\\>'$/;"	v
b:julia_vim_loaded	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:julia_vim_loaded = 1$/;"	v
b:lhs_markup	plugged/vim-polyglot/syntax/lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/;"	v
b:lhs_markup	plugged/vim-polyglot/syntax/lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/;"	v
b:lhs_markup	plugged/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "plain"$/;"	v
b:lhs_markup	plugged/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "tex"$/;"	v
b:lhs_markup	plugged/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "unknown"$/;"	v
b:liquid_subtype	plugged/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	plugged/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\/;"	v
b:liquid_subtype	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype_indentexpr	plugged/vim-polyglot/indent/liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:loaded_mustache_handlebars	plugged/vim-polyglot/ftplugin/handlebars.vim	/^let b:loaded_mustache_handlebars = 1$/;"	v
b:loaded_plantuml_plugin	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let b:loaded_plantuml_plugin = 1$/;"	v
b:main_syntax	plugged/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = 'twig'$/;"	v
b:main_syntax	plugged/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = b:current_syntax$/;"	v
b:mako_outer_lang	plugged/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = "html"$/;"	v
b:mako_outer_lang	plugged/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = g:mako_default_outer_lang$/;"	v
b:match_ignorecase	plugged/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/blade.vim	/^    let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/cobol.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/falcon.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/hamster.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/html.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/j.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/mako.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/mf.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/mp.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/nsis.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_ignorecase=0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_ignorecase = 1 " (pascal is case-insensitive)$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/pony.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/postscr.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/spec.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/sql.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/svelte.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/vb.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/verilog.vim	/^  let b:match_ignorecase=0$/;"	v
b:match_ignorecase	plugged/vim-polyglot/ftplugin/vhdl.vim	/^  let b:match_ignorecase=1$/;"	v
b:match_ignorecase	plugged/vim-polyglot/syntax/jst.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_skip	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_skip = 's:comment\\|string'$/;"	v
b:match_skip	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_skip = 's:comment\\|string'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/blade.vim	/^    let b:match_skip = 'synIDattr(synID(line("."), col("."), 0), "name") !=# "bladeKeyword"'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_skip = 's:comment\\|string\\|regex\\|character'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_skip =$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/hog.vim	/^    let b:match_skip = 'r:\\\\.\\{-}$\\|^\\s*#.\\{-}$\\|^\\s*$'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name") =~ '$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/mf.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/mp.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/perl.vim	/^let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitut/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/pony.vim	/^let b:match_skip = 's:Comment\\|String\\|Character\\|CaseGuard'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/rust.vim	/^let b:match_skip = 's:comment\\|string\\|rustCharacter\\|rustArrow'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/vala.vim	/^let b:match_skip = 's:comment\\|string\\|character\\|special'$/;"	v
b:match_skip	plugged/vim-polyglot/ftplugin/zimbu.vim	/^let b:match_skip = 's:comment\\|string\\|zimbuchar'$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '<\\@<=\\([^\/][^ \\t>]*\\)\\g{hlend}[^>]*\\%(\/\\@<!>\\|$\\):<\\@<=\/\\1>/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_words = '<\\@<=\\([^\/][^ \\t>]*\\)\\g{hlend}[^>]*\\%(\/\\@<!>\\|$\\):<\\@<=\/\\1>/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:match_words = $/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/ada.vim	/^   let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/blade.vim	/^    let b:match_words .= ',' .$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_words = &matchpairs$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/cobol.vim	/^    let b:match_words=$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/csc.vim	/^    let b:match_words=$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/dtd.vim	/^    let b:match_words = '<!--:-->,<!:>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/falcon.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/fish.vim	/^let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/framescript.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/hamster.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  let b:match_words = b:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/hog.vim	/^    let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/html.vim	/^    let b:match_words = '<:>,' .$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/j.vim	/^  let b:match_words = '^\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|v/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:match_words = 'JuliaGetMatchWords()'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/kconfig.vim	/^  let b:match_words = '^\\<menu\\>:\\<endmenu\\>,^\\<if\\>:\\<endif\\>,^\\<choice\\>:\\<endchoic/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= ','$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= '\\<\\%(if\\w*\\|unless\\|case\\)\\>:\\<\\%(elsif\\|else\\|when\\)\\>:\\</;"	v
b:match_words	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words = ''$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/make.vim	/^  let b:match_words = '^ *ifn\\=\\(eq\\|def\\)\\>:^ *else\\(\\s\\+ifn\\=\\(eq\\|def\\)\\)\\=\\>:/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/mako.vim	/^  let b:match_words = "<:>," .$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/mf.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/mp.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/nsis.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ',\\<if\\>:\\<else\\>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ',\\<repeat\\>:\\<until\\>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ':\\<^\\s*\\%(except\\|finally\\)\\>:\\<end\\>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words = '\\<\\%(begin\\|case\\|record\\|object\\|try\\)\\>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pdf.vim	/^    let b:match_words = '\\<\\%(\\d\\+\\s\\+\\d\\+\\s\\+\\)obj\\>:\\<endobj\\>,\\<stream$:\\<end/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/perl.vim	/^let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pony.vim	/^let b:match_words = '\\v<%(ifdef|if|match|while|for|repeat|try|with|recover|object|lambda|iftype/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/postscr.vim	/^  let b:match_words = '<<:>>,\\<begin\\>:\\<end\\>,\\<save\\>:\\<restore\\>,\\<gsave\\>:\\<grest/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/pug.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/spec.vim	/^let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/sql.vim	/^    let b:match_words = &matchpairs .$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/stylus.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/svelte.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/tex.vim	/^  let b:match_words .= ',\\\\begin\\s*\\({\\a\\+\\*\\=}\\):\\\\end\\s*\\1'$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/twig.vim	/^        let b:match_words .= ',' . s:pattern$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:match_words = exists('b:match_words')$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/vala.vim	/^let b:match_words = '^\\s*#\\s*if\\(\\|def\\|ndef\\)\\>:^\\s*#\\s*elif\\>:^\\s*#\\s*else\\>:^\\s/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/vb.vim	/^    let b:match_words=$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/verilog.vim	/^  let b:match_words=$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/vhdl.vim	/^  let b:match_words =$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-polyglot/ftplugin/zimbu.vim	/^let b:match_words = '\\(^\\s*\\)\\@<=\\(MODULE\\|CLASS\\|INTERFACE\\|BITS\\|ENUM\\|SHARED\\|FUNC/;"	v
b:match_words	plugged/vim-polyglot/syntax/cdl.vim	/^let b:match_words='\\<if\\>:\\<then\\>:\\<elseif\\>:\\<else\\>:\\<endif\\>'$/;"	v
b:match_words	plugged/vim-polyglot/syntax/cmod.vim	/^let b:match_words = "({:}\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\)\\|else\\|el\\%(se\\)\\?if\\|en/;"	v
b:match_words	plugged/vim-polyglot/syntax/jst.vim	/^  let b:match_words = '<:>,' .$/;"	v
b:match_words	plugged/vim-polyglot/syntax/pike.vim	/^let b:match_words = "({:}\\\\@1<=),(\\\\[:]\\\\@1<=),(<:>\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\/;"	v
b:mw	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw =         '\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:mw	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>'$/;"	v
b:mw	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:mw	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:pdf_tagstack	plugged/vim-polyglot/ftplugin/pdf.vim	/^    let b:pdf_tagstack = []$/;"	v
b:php_version_id	plugged/vim-polyglot/syntax/php.vim	/^  let b:php_version_id = g:php_version_id$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'cpp'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'objc'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'ruby'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = g:ragel_default_subtype$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.rl\\|\\.ragel\\)\\+$','',/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^  let b:ragel_subtype = matchstr(s:lines, 'ragel_subtype=\\zs\\w\\+')$/;"	v
b:ran_once	plugged/vim-polyglot/indent/twig.vim	/^let b:ran_once = 1$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/slim.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_version	plugged/vim-polyglot/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
b:rust_last_args	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_last_args = []$/;"	v
b:rust_last_rustc_args	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_last_rustc_args = []$/;"	v
b:rust_original_delimitMate_excluded_regions	plugged/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:rust_set_conceallevel	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_conceallevel=1$/;"	v
b:rust_set_foldmethod	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_foldmethod=1$/;"	v
b:rust_set_style	plugged/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_style = 1$/;"	v
b:smartcomment_force_linemode	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:smartcomment_force_linemode = 1      " for carlobaldassi\/vim-smartcomment$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/dart.vim	/^let b:spell_options = 'contained'$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/groovy.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/haxe.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/java.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/wsml.vim	/^let b:spell_options="contained"$/;"	v
b:sql_compl_savefunc	plugged/vim-polyglot/ftplugin/sql.vim	/^    let b:sql_compl_savefunc = &omnifunc$/;"	v
b:sql_type_override	plugged/vim-polyglot/syntax/php.vim	/^    let b:sql_type_override='mysql'$/;"	v
b:sql_vis	plugged/vim-polyglot/ftplugin/sql.vim	/^    let b:sql_vis = 1$/;"	v
b:surround_35	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_45	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_5	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:surround_61	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:svg_indent_close	plugged/vim-polyglot/indent/svg.vim	/^  let b:svg_indent_close = '.\\{-}<\/'$/;"	v
b:svg_indent_open	plugged/vim-polyglot/indent/svg.vim	/^  let b:svg_indent_open = '.\\{-}<\\a'$/;"	v
b:tex_isk	plugged/vim-polyglot/syntax/tex.vim	/^  let b:tex_isk= '@,'.g:tex_isk$/;"	v
b:tex_isk	plugged/vim-polyglot/syntax/tex.vim	/^  let b:tex_isk= g:tex_isk$/;"	v
b:tex_isk	plugged/vim-polyglot/syntax/tex.vim	/^ let b:tex_isk="48-57,a-z,A-Z,192-255"$/;"	v
b:tex_isk	plugged/vim-polyglot/syntax/tex.vim	/^ let b:tex_isk="@,48-57,a-z,A-Z,192-255"$/;"	v
b:tex_stylish	plugged/vim-polyglot/syntax/tex.vim	/^  let b:tex_stylish= 0$/;"	v
b:tex_stylish	plugged/vim-polyglot/syntax/tex.vim	/^  let b:tex_stylish= 1$/;"	v
b:tex_stylish	plugged/vim-polyglot/syntax/tex.vim	/^ let b:tex_stylish= g:tex_stylish$/;"	v
b:tsx_match_words	plugged/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:tsx_match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:tsx_ts_indentexpr	plugged/vim-polyglot/indent/typescriptreact.vim	/^let b:tsx_ts_indentexpr = &indentexpr$/;"	v
b:tt2_syn_inc_perl	plugged/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_inc_perl = 1$/;"	v
b:tt2_syn_tags	plugged/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_tags = '\\[% %]'$/;"	v
b:twigMatchWords	plugged/vim-polyglot/ftplugin/twig.vim	/^    let b:twigMatchWords = [$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/after/ftplugin/javascript-1.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/after/ftplugin/javascript-1.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/a2ps.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/aap.vim	/^let b:undo_ftplugin = "setl fo< com< et<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= " foldexpr< foldmethod<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin .= "|unmap <buffer> [[|unmap <buffer> ]]"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin = "let s:cpo_save = &cpoptions|"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin = "setlocal include< includeexpr< isfname<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/alsaconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ansible_hosts.vim	/^let b:undo_ftplugin = "setl comments< commentstring< formatoptions<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ant.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/arch.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let b:undo_ftplugin = "unlet! b:match_words b:match_ignorecase b:browsefilter | " . s:undo_ftplu/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/awk.vim	/^    let b:undo_ftplugin .= " | setl fp<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/awk.vim	/^  let b:undo_ftplugin .= " | setl inc< path<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/awk.vim	/^let b:undo_ftplugin = "setl fo< com< cms< def< sua<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/bdf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/bst.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/calendar.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cfg.vim	/^let b:undo_ftplugin = "setl cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^		let b:undo_ftplugin .= ' | setlocal ' . s:setting . '<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | setlocal path<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:match_words b:match_skip'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/clojure.vim	/^let b:undo_ftplugin = 'setlocal iskeyword< define< formatoptions< comments< commentstring< lispw/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cobol.vim	/^    let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cobol.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo< et< tw<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/config.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/crm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/csc.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/css.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo< ofu<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cucumber.vim	/^  let b:undo_ftplugin .=$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/cvsrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dart.vim	/^let b:undo_ftplugin = 'setl et< fo< sw< sts< com< cms< inex< isf<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^let b:undo_ftplugin = 'setlocal tw< comments< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/debcontrol.vim	/^let b:undo_ftplugin = 'setlocal tw< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/denyhosts.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dictconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dictdconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/diff.vim	/^let b:undo_ftplugin = "setl modeline<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dircolors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dockerfile.vim	/^let b:undo_ftplugin = "setl commentstring<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dosbatch.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions< keywordprg<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dosini.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/dtd.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let b:undo_ftplugin = 'setlocal comments< commentstring< shiftwidth<' .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/elinks.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def< fo<'.$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/erlang.vim	/^let b:undo_ftplugin = "setlocal foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/eterm.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/falcon.vim	/^let b:undo_ftplugin = "setlocal tabstop< shiftwidth< expandtab< fileencoding<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/fetchmail.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/fortran.vim	/^let b:undo_ftplugin = "setl fo< com< tw< cms< et< inc< sua<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/framescript.vim	/^let b:undo_ftplugin = "setl com< cms< fo< inc< | unlet! b:matchwords"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/fvwm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gdb.vim	/^let b:undo_ftplugin = "setlocal cms<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = 'setl modeline< tabstop< formatoptions< tw< com< cms< formatlistpat<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|delc DiffGitCached"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitignore.vim	/^let b:undo_ftplugin = 'setlocal commentstring<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|exe 'nunmap <buffer> K'|exe 'nunmap <buffer> <C-A>'|ex/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo< ml<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/gpg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/graphql.vim	/^let b:undo_ftplugin = 'setlocal com< cms< fo< isk< sts< sw< et<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/groovy.vim	/^let b:undo_ftplugin = 'setlocal commentstring<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/group.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/grub.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/haml.vim	/^let b:undo_ftplugin = "setl def< cms< com< "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/hamster.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/hcl.vim	/^let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/help.vim	/^let b:undo_ftplugin = "setl fo< tw< cole< cocu< keywordprg<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/hgcommit.vim	/^let b:undo_ftplugin = 'setl modeline<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/hostconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/hostsaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/html.vim	/^let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/indent.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:match_ignorecase b:match_words'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/j.vim	/^let b:undo_ftplugin .= ' | silent! execute "unmap <buffer> ]]"'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/j.vim	/^let b:undo_ftplugin = 'setlocal suffixesadd< includeexpr< include< path< matchpairs< formatoptio/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/java.vim	/^let b:undo_ftplugin = "setlocal suffixes< suffixesadd<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/jproperties.vim	/^let b:undo_ftplugin = "setl cms< com< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/jsp.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^    let b:undo_ftplugin .= " | call julia_blocks#remove_mappings()"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . " | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin .= " | delcommand JuliaDoc | delcommand JuliaDocKeywordprg"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin .= " | setlocal keywordprg<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin = "setlocal include< suffixesadd< comments< commentstring<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= " | delcommand JuliaDoc | delcommand JuliaDocKeywordprg"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= " | setlocal keywordprg<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= 'setlocal conceallevel< concealcursor< wrap<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/kconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/kwt.vim	/^    let b:undo_ftplugin = "setlocal efm<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/kwt.vim	/^    let b:undo_ftplugin = b:undo_ftplugin . " | setlocal efm<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ld.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/less.vim	/^let b:undo_ftplugin = "setl cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/lftp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/libao.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/limits.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin .= '|'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/liquid.vim	/^let b:undo_ftplugin .= 'setl cms< | unlet! b:browsefilter b:match_words'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/lisp.vim	/^let b:undo_ftplugin = "setlocal comments< define< formatoptions< iskeyword< lisp< commentstring</;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/logcheck.vim	/^let b:undo_ftplugin = 'setl fo<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/loginaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/logindefs.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/logtalk.vim	/^let b:undo_ftplugin = "setl ts< sw< fdm< fdc< ai< dict<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/m4.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mail.vim	/^let b:undo_ftplugin = "setl modeline< tw< fo< comments<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mailaliases.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mailcap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/make.vim	/^let b:undo_ftplugin = "setl et< sts< sw< fo< com< cms< inc<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/manconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mf.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/modconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/moon.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mp.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mplayerconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/mrxvtrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/muttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/nanorc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/neomuttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/netrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/nsis.vim	/^let b:undo_ftplugin = "setl com< cms< fo< def< inc<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let b:undo_ftplugin = "setlocal efm< foldmethod< foldexpr<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/occam.vim	/^let b:undo_ftplugin = "setlocal shiftwidth< softtabstop< expandtab<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pamconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pascal.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/passwd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pdf.vim	/^let b:undo_ftplugin .= " | silent! nunmap <buffer> <C-]> | silent! nunmap <buffer> <C-T>"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pdf.vim	/^let b:undo_ftplugin = "setlocal cms< com< | unlet! b:match_words"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk< isf< kp< path<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pinfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pony.vim	/^let b:undo_ftplugin = 'set comments< commentstring< formatoptions< path< include< includeexpr< d/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/postscr.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/procmail.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/prolog.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/protocols.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ps1.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo< iskeyword< keywordprg<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ps1xml.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/pug.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/puppet.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/qml.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/quake.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/racket.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/raku.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< isk< kp< path<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/readline.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rmd.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rmd.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rnc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin .= " | setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin = "setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rpl.vim	/^let b:undo_ftplugin = "setlocal fo< comments<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rrst.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rrst.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rst.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/rust.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sass.vim	/^  let b:undo_ftplugin .= ' isk<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sass.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/scheme.vim	/^let b:undo_ftplugin = 'setl lisp< comments< commentstring< define< iskeyword<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/scheme.vim	/^let b:undo_ftplugin = b:undo_ftplugin . ' lispwords<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/screen.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sensors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/services.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/setserial.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sieve.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/slim.vim	/^let b:undo_ftplugin = "setl isk<" . " | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/slpconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/slpreg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/slpspi.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/spec.vim	/^let b:undo_ftplugin = "unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sql.vim	/^let b:undo_ftplugin = "setl comments< formatoptions< define< omnifunc<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sshconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/stylus.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sudoers.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/sysctl.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/systemd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/tcl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terminfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= ' foldmethod<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= ' iskeyword<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= '|iunmap <buffer> ='$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin .= ' commentstring<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin .= '|delcommand Terraform|delcommand TerraformFmt'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin = 'setlocal formatoptions<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/tex.vim	/^let b:undo_ftplugin .= "| setl inex<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/text.vim	/^let b:undo_ftplugin = 'setlocal comments< commentstring<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/tmux.vim	/^let b:undo_ftplugin = "setlocal comments< commentstring<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/toml.vim	/^let b:undo_ftplugin = 'setlocal commentstring< comments<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/treetop.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin .= "|setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/udevconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/udevperm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/updatedb.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/verilog.vim	/^let b:undo_ftplugin = "setlocal fo< com< tw<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/vroom.vim	/^let b:undo_ftplugin = 'setlocal formatoptions< shiftwidth< softtabstop<' .$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/wast.vim	/^let b:undo_ftplugin = "setlocal comments< commentstring< formatoptions< iskeyword<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xdefaults.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xf86conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xinetd.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xmodmap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/xsd.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/yaml.vim	/^  let b:undo_ftplugin .= " sw< sts<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/yaml.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/zig.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/ftplugin/zimbu.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< efm< tw< et< sts< sw< | if has('vms') | setl isk< | en/;"	v
b:undo_indent	plugged/vim-polyglot/after/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/arduino.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/autohotkey.vim	/^let b:undo_indent = 'setlocal '.join([$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/bib.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< inden/;"	v
b:undo_indent	plugged/vim-polyglot/indent/cs.vim	/^let b:undo_indent = 'setlocal indentexpr<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/css.vim	/^let b:undo_indent = "setl smartindent< indentkeys< indentexpr<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/cuda.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/dart.vim	/^let b:undo_indent = 'setl cin< cino<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/fennel.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/hog.vim	/^let b:undo_indent = 'setlocal smartindent< indentexpr< indentkeys<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/j.vim	/^let b:undo_indent = 'setlocal indentkeys< indentexpr<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/java.vim	/^let b:undo_indent = "set cin< cino< indentkeys< indentexpr<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/lifelines.vim	/^let b:undo_indent = "setl cin< cino< cinw<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/lisp.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/mp.vim	/^let b:undo_indent = "setl indentkeys< indentexpr<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/pony.vim	/^let b:undo_indent = 'set lisp< cindent< autoindent< smartindent< indentexpr< indentkeys< cinkeys/;"	v
b:undo_indent	plugged/vim-polyglot/indent/proto.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/ps1.vim	/^let b:undo_indent = "setl si<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/puppet.vim	/^let b:undo_indent = "$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/racket.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/rpl.vim	/^let b:undo_indent = "set ai< indentkeys< indentexpr<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/scss.vim	/^let b:undo_indent = 'setl smartindent< indentkeys< indentexpr<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/sshconfig.vim	/^let b:undo_indent = "setlocal autoindent< indentexpr< indentkeys<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/terraform.vim	/^let b:undo_indent = 'setlocal lisp< autoindent< shiftwidth< tabstop< softtabstop<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/vb.vim	/^let b:undo_indent = "set ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/vroom.vim	/^let b:undo_indent = 'setlocal autoindent<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/wast.vim	/^let b:undo_indent = "setl lisp< indentexpr<"$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/yaml.vim	/^let b:undo_indent = 'setlocal indentexpr< indentkeys< smartindent<'$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/zimbu.vim	/^let b:undo_indent = "setl et< sw< ai< indentkeys< indentexpr="$/;"	v
b:vala_minlines	plugged/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = 50$/;"	v
b:vala_minlines	plugged/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = vala_minlines$/;"	v
b:vera_minlines	plugged/vim-polyglot/syntax/vera.vim	/^    let b:vera_minlines = 15	" mostly for () constructs$/;"	v
b:vera_minlines	plugged/vim-polyglot/syntax/vera.vim	/^    let b:vera_minlines = 50	" #if 0 constructs can be long$/;"	v
b:vera_minlines	plugged/vim-polyglot/syntax/vera.vim	/^  let b:vera_minlines = vera_minlines$/;"	v
b:vhdl_explore	plugged/vim-polyglot/ftplugin/vhdl.vim	/^let b:vhdl_explore = '\\%(architecture\\|block\\|configuration\\|component\\|entity\\|function\\/;"	v
b:xf86conf_xfree86_version	plugged/vim-polyglot/syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = 4$/;"	v
b:xf86conf_xfree86_version	plugged/vim-polyglot/syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = xf86conf_xfree86_version$/;"	v
b:yaml_schema	plugged/vim-polyglot/syntax/yaml.vim	/^    let b:yaml_schema = 'core'$/;"	v
b:yaml_schema	plugged/vim-polyglot/syntax/yaml.vim	/^    let b:yaml_schema = g:yaml_schema$/;"	v
base	plugged/vim-polyglot/ftdetect/polyglot.vim	/^    let base = split(pkg, '\\.')$/;"	v
before	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
before	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
bmenu_priority	plugged/vim-polyglot/extras/menu.vim	/^  let bmenu_priority = 60$/;"	v
body_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblu/;"	v
body_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
brace_expansion	plugged/vim-polyglot/scripts/build	/^def brace_expansion(s)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
brace_expansion	plugged/vim-polyglot/scripts/import_vim	/^def brace_expansion(s)$/;"	f
buffer_list	plugged/vim-polyglot/extras/menu.vim	/^  aug buffer_list$/;"	a
bugs	plugged/coc.nvim/package.json	/^  "bugs": {$/;"	o
build	plugged/vim-polyglot/Makefile	/^build:$/;"	t
camelize	plugged/vim-polyglot/scripts/build	/^def camelize(str)$/;"	f
cargo#Load	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#Load()$/;"	f
cargo#bench	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
cargo#build	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#check	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#check(args)$/;"	f
cargo#clean	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#cmd	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#cmd(args) abort$/;"	f
cargo#doc	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#init	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#install	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#install(args)$/;"	f
cargo#nearestCargo	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestCargo(is_getcwd) abort$/;"	f
cargo#nearestRootCargo	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestRootCargo(is_getcwd) abort$/;"	f
cargo#nearestWorkspaceCargo	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestWorkspaceCargo(is_getcwd) abort$/;"	f
cargo#new	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#publish	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#publish(args)$/;"	f
cargo#quickfix#CmdPost	plugged/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPost() abort$/;"	f
cargo#quickfix#CmdPre	plugged/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPre() abort$/;"	f
cargo#run	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#runtarget	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#runtarget(args)$/;"	f
cargo#search	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#search(args)$/;"	f
cargo#test	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#update	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#update(args)$/;"	f
carp_syntax_init	plugged/vim-polyglot/syntax/carp.vim	/^    let carp_syntax_init = 1$/;"	v
case classes	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy)[ \\t]*)*(private[^ ]*|protected)?/;"	k	langdef:scala
case objects	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy)[ \\t]*)*(private[^ ]*|protected)?/;"	k	langdef:scala
changelogMenu	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^augroup changelogMenu$/;"	a
chars	plugged/vim-polyglot/syntax/xpm.vim	/^	 let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm.vim	/^	 let chars = substitute(chars, '.$', '', '')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm.vim	/^	 let chars = substitute(s, '"\\(.\\{'.cpp.'}\\s\\).*"', '\\1', '')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm.vim	/^let chars  = ""$/;"	v
chars	plugged/vim-polyglot/syntax/xpm2.vim	/^	let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(chars, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
chars	plugged/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(chars, '\\\\s\\\\+$', '', '')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(s, '\\(.\\{'.cpp.'}\\s\\+\\).*', '\\1', '')$/;"	v
chars	plugged/vim-polyglot/syntax/xpm2.vim	/^  let chars  = ""$/;"	v
charset	plugged/vim-polyglot/autoload/xml/html5.vim	/^let charset = [$/;"	v
chill_minlines	plugged/vim-polyglot/syntax/chill.vim	/^  let chill_minlines = 15$/;"	v
class	plugged/coc.nvim/data/schema.json	/^        "class": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
class	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*class[[:space:]]*([a-z][a-zA-Z0-9_:\\-]+)\/\\1\/c,class\/$/;"	k	langdef:puppet
classes	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy)[ \\t]*)*(private[^ ]*|protected)?/;"	k	langdef:scala
classes	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*class[ \\t]+([a-zA-Z0-9_]+)\/\\2\/c,classes\/$/;"	k	langdef:typescript
clearMocks	plugged/coc.nvim/package.json	/^    "clearMocks": true,$/;"	b	object:jest
clojurecomplete#Complete	plugged/vim-polyglot/autoload/clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
closure.Process	plugged/vim-polyglot/autoload/RstFold.vim	/^  function closure.Process(match) dict$/;"	f
coc#_cancel	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_cancel()$/;"	f
coc#_complete	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_complete() abort$/;"	f
coc#_do_complete	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(start, items, preselect)$/;"	f
coc#_hide	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_hide() abort$/;"	f
coc#_insert_key	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_map	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_map()$/;"	f
coc#_select	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select() abort$/;"	f
coc#_select_confirm	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm() abort$/;"	f
coc#_selected	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_selected()$/;"	f
coc#_unmap	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unmap()$/;"	f
coc#_unwatch	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_watch	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#add_command	plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_extension	plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#api#call	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#func_names	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#notify	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#client#create	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#get_channel	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_channel(client)$/;"	f
coc#client#get_client	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_client(name) abort$/;"	f
coc#client#is_running	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#notify	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#on_response	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#open_log	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#request	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request_async	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#restart	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart_all	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#stop	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#color#rgb2term	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#rgb2term(rgb)$/;"	f
coc#compat#buf_del_keymap	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_del_keymap(bufnr, mode, lhs) abort$/;"	f
coc#compat#buf_win_id	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_win_id(bufnr) abort$/;"	f
coc#compat#clear_matches	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#clear_matches(winid) abort$/;"	f
coc#compat#execute	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#execute(winid, command) abort$/;"	f
coc#compat#matchaddgroups	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddgroups(winid, groups) abort$/;"	f
coc#compat#matchaddpos	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddpos(group, pos, priority, winid) abort$/;"	f
coc#compat#win_is_valid	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#win_is_valid(winid) abort$/;"	f
coc#config	plugged/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#do_notify	plugged/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#expandable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandableOrJumpable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#float#check_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#check_related() abort$/;"	f
coc#float#close	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close(winid) abort$/;"	f
coc#float#close_all	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_all() abort$/;"	f
coc#float#close_auto_hide_wins	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_auto_hide_wins(...) abort$/;"	f
coc#float#close_i	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_i(winid) abort$/;"	f
coc#float#close_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_related(winid, ...) abort$/;"	f
coc#float#content_height	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#content_height(bufnr, width, wrap) abort$/;"	f
coc#float#create_border_lines	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_border_lines(border, title, width, height, hasbtn) abort$/;"	f
coc#float#create_buf	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_buf(bufnr, ...) abort$/;"	f
coc#float#create_cursor_float	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_cursor_float(winid, bufnr, lines, config) abort$/;"	f
coc#float#create_dialog	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_dialog(lines, config) abort$/;"	f
coc#float#create_float_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_float_win(winid, bufnr, config) abort$/;"	f
coc#float#create_menu	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_menu(lines, config) abort$/;"	f
coc#float#create_notification	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_notification(lines, config) abort$/;"	f
coc#float#create_prompt_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_prompt_win(title, default, opts) abort$/;"	f
coc#float#create_pum_float	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_pum_float(winid, bufnr, lines, config) abort$/;"	f
coc#float#cursor_relative	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#cursor_relative(winid) abort$/;"	f
coc#float#get_config_cursor	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_config_cursor(lines, config) abort$/;"	f
coc#float#get_float_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_win() abort$/;"	f
coc#float#get_float_win_list	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_win_list() abort$/;"	f
coc#float#get_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_related(winid, kind) abort$/;"	f
coc#float#has_float	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_float() abort$/;"	f
coc#float#has_scroll	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_scroll() abort$/;"	f
coc#float#jump	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#jump() abort$/;"	f
coc#float#nvim_border_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_border_win(config, winid, border, title, hasbtn, hlgroup, related) abor/;"	f
coc#float#nvim_buttons	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_buttons(config, winid, buttons, borderbottom, pad, hlgroup, borderhighl/;"	f
coc#float#nvim_close_btn	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_close_btn(config, winid, border, hlgroup, related) abort$/;"	f
coc#float#nvim_create_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_create_related(winid, config, opts) abort$/;"	f
coc#float#nvim_float_click	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_float_click() abort$/;"	f
coc#float#nvim_refresh_scrollbar	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_refresh_scrollbar(winid) abort$/;"	f
coc#float#nvim_right_pad	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_right_pad(config, winid, hlgroup, related) abort$/;"	f
coc#float#nvim_scroll	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scroll(forward, ...)$/;"	f
coc#float#nvim_scrollbar	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scrollbar(winid) abort$/;"	f
coc#float#nvim_win_enter	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_win_enter(winid) abort$/;"	f
coc#float#prompt_confirm	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#prompt_confirm(title, cb) abort$/;"	f
coc#float#prompt_insert	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#prompt_insert(text) abort$/;"	f
coc#float#reflow	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#reflow(top) abort$/;"	f
coc#float#scroll	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll(forward, ...)$/;"	f
coc#float#scroll_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll_win(winid, forward, amount) abort$/;"	f
coc#float#scrollable	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scrollable(winid) abort$/;"	f
coc#float#valid	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#valid(winid) abort$/;"	f
coc#float#vim_buttons	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_buttons(winid, config) abort$/;"	f
coc#float#vim_filter	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_filter(winid, key, keys) abort$/;"	f
coc#helper#dict_omit	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_omit(dict, keys) abort$/;"	f
coc#helper#dict_pick	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_pick(dict, keys) abort$/;"	f
coc#helper#max	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#max(first, ...) abort$/;"	f
coc#helper#min	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#min(first, ...) abort$/;"	f
coc#helper#str_compose	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#str_compose(line, position, inserted) abort$/;"	f
coc#highlight#add_highlight	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlight(bufnr, src_id, hl_group, line, col_start, col_end) abort$/;"	f
coc#highlight#add_highlights	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlights(winid, codes, highlights) abort$/;"	f
coc#highlight#clear_highlight	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_highlight(bufnr, key, start_line, end_line) abort$/;"	f
coc#highlight#clear_match_group	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_match_group(winid, match) abort$/;"	f
coc#highlight#clear_matches	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_matches(winid, ids)$/;"	f
coc#highlight#compose_hlgroup	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#compose_hlgroup(fgGroup, bgGroup) abort$/;"	f
coc#highlight#highlight_lines	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#highlight_lines(winid, blocks) abort$/;"	f
coc#highlight#match_ranges	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#match_ranges(winid, bufnr, ranges, hlGroup, priority) abort$/;"	f
coc#highlight#range	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#range(bufnr, key, hlGroup, range) abort$/;"	f
coc#jumpable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#list#clean_up	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#clean_up() abort$/;"	f
coc#list#create	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name, numberSelect)$/;"	f
coc#list#get_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_preview(...) abort$/;"	f
coc#list#getchar	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#has_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#hide	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#hide(original, height, winid) abort$/;"	f
coc#list#names	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#names(...) abort$/;"	f
coc#list#options	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#preview(lines, config) abort$/;"	f
coc#list#restore	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#restore(winid, height)$/;"	f
coc#list#scroll_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#scroll_preview(dir) abort$/;"	f
coc#list#set_height	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#set_height(height) abort$/;"	f
coc#list#setlines	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(bufnr, lines, append)$/;"	f
coc#list#setup	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#status	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#on_enter	plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_notify	plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#prompt#activated	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#activated() abort$/;"	f
coc#prompt#getc	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getc() abort$/;"	f
coc#prompt#getchar	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getchar() abort$/;"	f
coc#prompt#start_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#start_prompt(session) abort$/;"	f
coc#prompt#stop_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#stop_prompt(session)$/;"	f
coc#refresh	plugged/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#rpc#async_request	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_response	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#get_errors	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_errors()$/;"	f
coc#rpc#kill	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#notify	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#ready	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#request	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request_async	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#restart	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#start_server	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#started	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#started() abort$/;"	f
coc#rpc#stop	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#snippet#_select_mappings	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#disable	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#enable	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable()$/;"	f
coc#snippet#show_choices	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, len, values) abort$/;"	f
coc#start	plugged/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#status	plugged/coc.nvim/autoload/coc.vim	/^function! coc#status()$/;"	f
coc#task#running	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#start	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#stop	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#terminal#close	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#close(bufnr) abort$/;"	f
coc#terminal#send	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#send(bufnr, text, add_new_line) abort$/;"	f
coc#terminal#start	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#start(cmd, cwd, env) abort$/;"	f
coc#util#api_version	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#api_version() abort$/;"	f
coc#util#change_lines	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#change_lines(bufnr, list) abort$/;"	f
coc#util#check_refresh	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#check_refresh(bufnr)$/;"	f
coc#util#clear_signs	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clear_signs()$/;"	f
coc#util#clearmatches	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clearmatches(ids, ...)$/;"	f
coc#util#close_floats	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_floats() abort$/;"	f
coc#util#close_win	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_win(id)$/;"	f
coc#util#cursor	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#cursor_pos	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor_pos() abort$/;"	f
coc#util#diff_content	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diff_content(lines) abort$/;"	f
coc#util#do_autocmd	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_autocmd(name) abort$/;"	f
coc#util#do_complete	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_complete(name, opt, cb) abort$/;"	f
coc#util#echo_hover	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_hover(msg)$/;"	f
coc#util#echo_line	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_line()$/;"	f
coc#util#echo_lines	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_lines(lines)$/;"	f
coc#util#echo_messages	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_messages(hl, msgs)$/;"	f
coc#util#echo_signatures	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_signatures(signatures) abort$/;"	f
coc#util#execute	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#execute(cmd)$/;"	f
coc#util#extension_root	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#float_hide	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_hide()$/;"	f
coc#util#float_jump	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_jump()$/;"	f
coc#util#float_scroll	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scroll(forward)$/;"	f
coc#util#get_bufoptions	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr, maxFileSize) abort$/;"	f
coc#util#get_changeinfo	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo()$/;"	f
coc#util#get_complete_option	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_config	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config(key) abort$/;"	f
coc#util#get_config_home	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_content	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_content(bufnr)$/;"	f
coc#util#get_data_home	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_data_home()$/;"	f
coc#util#get_format_opts	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_format_opts(bufnr) abort$/;"	f
coc#util#get_input	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_input()$/;"	f
coc#util#get_offset	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_offset() abort$/;"	f
coc#util#get_pretext	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_pretext() abort$/;"	f
coc#util#get_syntax_name	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_syntax_name(lnum, col)$/;"	f
coc#util#getpid	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#getpid()$/;"	f
coc#util#has_float	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_float()$/;"	f
coc#util#has_preview	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_preview()$/;"	f
coc#util#highlight_options	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#highlight_options()$/;"	f
coc#util#install	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install() abort$/;"	f
coc#util#install_extension	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#iterm_open	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#iterm_open(dir)$/;"	f
coc#util#job_command	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#jump	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jumpTo	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#move_cursor	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#move_cursor(delta)$/;"	f
coc#util#on_error	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#on_error(msg) abort$/;"	f
coc#util#open_file	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_files	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_files(files)$/;"	f
coc#util#open_terminal	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#open_url	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_url(url)$/;"	f
coc#util#path_replace_patterns	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#path_replace_patterns() abort$/;"	f
coc#util#pick_color	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pick_color(default_color)$/;"	f
coc#util#preview_info	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#preview_info(info, filetype, ...) abort$/;"	f
coc#util#quickpick	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#quickpick(title, items, cb) abort$/;"	f
coc#util#rebuild	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#rebuild()$/;"	f
coc#util#refactor_fold_text	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_fold_text(lnum) abort$/;"	f
coc#util#refactor_foldlevel	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_foldlevel(lnum) abort$/;"	f
coc#util#remote_fns	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#remote_fns(name)$/;"	f
coc#util#root_patterns	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns() abort$/;"	f
coc#util#run_terminal	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#run_terminal(opts, cb)$/;"	f
coc#util#set_buf_lines	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_buf_lines(bufnr, lines) abort$/;"	f
coc#util#set_buf_var	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_buf_var(bufnr, name, val) abort$/;"	f
coc#util#setline	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#timer	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#unmap	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unmap(bufnr, keys) abort$/;"	f
coc#util#unplace_signs	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unplace_signs(bufnr, sign_ids)$/;"	f
coc#util#update_extensions	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#version	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#vim_info	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#win_gotoid	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#win_gotoid(winid) abort$/;"	f
coc#util#with_callback	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
coc.preferences.bracketEnterImprove	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.bracketEnterImprove": {$/;"	o	object:properties
coc.preferences.colorSupport	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.colorSupport": {$/;"	o	object:properties
coc.preferences.currentFunctionSymbolAutoUpdate	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.currentFunctionSymbolAutoUpdate": {$/;"	o	object:properties
coc.preferences.enableFloatHighlight	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.enableFloatHighlight": {$/;"	o	object:properties
coc.preferences.enableMarkdown	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.enableMarkdown": {$/;"	o	object:properties
coc.preferences.enableMessageDialog	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.enableMessageDialog": {$/;"	o	object:properties
coc.preferences.extensionUpdateCheck	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.extensionUpdateCheck": {$/;"	o	object:properties
coc.preferences.floatActions	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.floatActions": {$/;"	o	object:properties
coc.preferences.formatOnInsertLeave	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnInsertLeave": {$/;"	o	object:properties
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": ["javascript","typescript","typescriptreact","json","/;"	a
coc.preferences.formatOnSaveFiletypes	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnSaveFiletypes": {$/;"	o	object:properties
coc.preferences.formatOnType	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnType": {$/;"	o	object:properties
coc.preferences.formatOnTypeFiletypes	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnTypeFiletypes": {$/;"	o	object:properties
coc.preferences.highlightTimeout	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.highlightTimeout": {$/;"	o	object:properties
coc.preferences.hoverTarget	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.hoverTarget": {$/;"	o	object:properties
coc.preferences.jumpCommand	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.jumpCommand": {$/;"	o	object:properties
coc.preferences.listOfWorkspaceEdit	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.listOfWorkspaceEdit": {$/;"	o	object:properties
coc.preferences.maxFileSize	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.maxFileSize": {$/;"	o	object:properties
coc.preferences.messageLevel	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.messageLevel": {$/;"	o	object:properties
coc.preferences.previewAutoClose	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.previewAutoClose": {$/;"	o	object:properties
coc.preferences.previewMaxHeight	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.previewMaxHeight": {$/;"	o	object:properties
coc.preferences.promptInput	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.promptInput": {$/;"	o	object:properties
coc.preferences.promptWorkspaceEdit	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.promptWorkspaceEdit": {$/;"	o	object:properties
coc.preferences.rootPatterns	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.rootPatterns": {$/;"	o	object:properties
coc.preferences.silentAutoupdate	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.silentAutoupdate": {$/;"	o	object:properties
coc.preferences.snippetStatusText	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippetStatusText": {$/;"	o	object:properties
coc.preferences.snippets.enable	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippets.enable": {$/;"	o	object:properties
coc.preferences.useQuickfixForLocations	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.useQuickfixForLocations": {$/;"	o	object:properties
coc.preferences.watchmanPath	plugged/coc.nvim/data/schema.json	/^    "coc.preferences.watchmanPath": {$/;"	o	object:properties
coc.source.around.disableSyntaxes	plugged/coc.nvim/data/schema.json	/^    "coc.source.around.disableSyntaxes": {$/;"	o	object:properties
coc.source.around.enable	plugged/coc.nvim/data/schema.json	/^    "coc.source.around.enable": {$/;"	o	object:properties
coc.source.around.firstMatch	plugged/coc.nvim/data/schema.json	/^    "coc.source.around.firstMatch": {$/;"	o	object:properties
coc.source.around.priority	plugged/coc.nvim/data/schema.json	/^    "coc.source.around.priority": {$/;"	o	object:properties
coc.source.around.shortcut	plugged/coc.nvim/data/schema.json	/^    "coc.source.around.shortcut": {$/;"	o	object:properties
coc.source.buffer.disableSyntaxes	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.disableSyntaxes": {$/;"	o	object:properties
coc.source.buffer.enable	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.enable": {$/;"	o	object:properties
coc.source.buffer.firstMatch	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.firstMatch": {$/;"	o	object:properties
coc.source.buffer.ignoreGitignore	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.ignoreGitignore": {$/;"	o	object:properties
coc.source.buffer.priority	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.priority": {$/;"	o	object:properties
coc.source.buffer.shortcut	plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.shortcut": {$/;"	o	object:properties
coc.source.file.disableSyntaxes	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.disableSyntaxes": {$/;"	o	object:properties
coc.source.file.enable	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.enable": {$/;"	o	object:properties
coc.source.file.ignoreHidden	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignoreHidden": {$/;"	o	object:properties
coc.source.file.ignorePatterns	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignorePatterns": {$/;"	o	object:properties
coc.source.file.priority	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.priority": {$/;"	o	object:properties
coc.source.file.shortcut	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.shortcut": {$/;"	o	object:properties
coc.source.file.triggerCharacters	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.triggerCharacters": {$/;"	o	object:properties
coc.source.file.trimSameExts	plugged/coc.nvim/data/schema.json	/^    "coc.source.file.trimSameExts": {$/;"	o	object:properties
coc_nvim	plugged/coc.nvim/plugin/coc.vim	/^  augroup coc_nvim$/;"	a
codeLens.enable	plugged/coc.nvim/data/schema.json	/^    "codeLens.enable": {$/;"	o	object:properties
codeLens.separator	plugged/coc.nvim/data/schema.json	/^    "codeLens.separator": {$/;"	o	object:properties
codeLens.subseparator	plugged/coc.nvim/data/schema.json	/^    "codeLens.subseparator": {$/;"	o	object:properties
coffee#CoffeeSetUpErrorFormat	plugged/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpErrorFormat()$/;"	f
coffee#CoffeeSetUpVariables	plugged/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpVariables()$/;"	f
color	plugged/coc.nvim/data/schema.json	/^        "color": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
color	plugged/vim-polyglot/syntax/xpm.vim	/^		     let color = ""$/;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^		  let color = substitute(s, '".*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	       let color = substitute(s, '".*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*"', '\\1', /;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(s, '".*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*"', /;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^	 let color = substitute(s, '".*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*"', /;"	v
color	plugged/vim-polyglot/syntax/xpm.vim	/^let color  = ""$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^		let color = ""$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	      let color = substitute(s, '.*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	    let color = substitute(s, '.*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(s, '.*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*', '\\1/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^	let color = substitute(s, '.*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*', '\\/;"	v
color	plugged/vim-polyglot/syntax/xpm2.vim	/^  let color  = ""$/;"	v
colors	plugged/vim-polyglot/syntax/xpm.vim	/^	 let colors = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
colors	plugged/vim-polyglot/syntax/xpm.vim	/^let colors = 0$/;"	v
colors	plugged/vim-polyglot/syntax/xpm2.vim	/^	let colors = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
colors	plugged/vim-polyglot/syntax/xpm2.vim	/^  let colors = 0$/;"	v
comma_expanson	plugged/vim-polyglot/scripts/build	/^def comma_expanson(s)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
comma_expanson	plugged/vim-polyglot/scripts/import_vim	/^def comma_expanson(s)$/;"	f
command	plugged/coc.nvim/data/schema.json	/^        "command": {$/;"	o	object:definitions.languageServerCommand.properties
command	plugged/vim-multiple-cursors/README.md	/^### command$/;"	S	section:vim-multiple-cursors""Quick Start
commands	plugged/vim-polyglot/syntax/sh.vim	/^let commands = [ 'arch', 'awk', 'b2sum', 'base32', 'base64', 'basename', 'basenc', 'bash', 'brew/;"	v
commands	plugged/vim-polyglot/syntax/zsh.vim	/^let commands = [ 'arch', 'awk', 'b2sum', 'base32', 'base64', 'basename', 'basenc', 'bash', 'brew/;"	v
constant	plugged/coc.nvim/data/schema.json	/^        "constant": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
constructor	plugged/coc.nvim/data/schema.json	/^        "constructor": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
consts,static constants	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?(static|const)[ \\t]+([a-zA-Z0-9_]+)\/\\3\/c,consts,static c/;"	k	langdef:Rust
contained	plugged/vim-polyglot/syntax/plantuml.vim	/^let contained = []$/;"	v
copy_file	plugged/vim-polyglot/scripts/build	/^def copy_file(name, src, dest)$/;"	f
core_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], '/;"	v
coverageDirectory	plugged/coc.nvim/package.json	/^    "coverageDirectory": ".\/coverage\/"$/;"	s	object:jest
cpp	plugged/vim-polyglot/syntax/xpm.vim	/^	 let cpp = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
cpp	plugged/vim-polyglot/syntax/xpm.vim	/^let cpp    = 0$/;"	v
cpp	plugged/vim-polyglot/syntax/xpm2.vim	/^	let cpp = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
cpp	plugged/vim-polyglot/syntax/xpm2.vim	/^  let cpp    = 0$/;"	v
crossorigin	plugged/vim-polyglot/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
cry_minlines	plugged/vim-polyglot/syntax/cryptol.vim	/^  let cry_minlines = 50$/;"	v
crystal#indent#AfterBlockOpening	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterBlockOpening(pline_info) abort$/;"	f
crystal#indent#AfterEndKeyword	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterEndKeyword(pline_info) abort$/;"	f
crystal#indent#AfterEndMacroTag	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterEndMacroTag(pline_info) abort$/;"	f
crystal#indent#AfterIndentKeyword	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterIndentKeyword(pline_info) abort$/;"	f
crystal#indent#AfterIndentMacroTag	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterIndentMacroTag(pline_info) abort$/;"	f
crystal#indent#AfterLeadingOperator	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterLeadingOperator(pline_info) abort$/;"	f
crystal#indent#AfterLinkAttribute	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterLinkAttribute(pline_info) abort$/;"	f
crystal#indent#AfterTypeDeclaration	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterTypeDeclaration(pline_info) abort$/;"	f
crystal#indent#AfterUnbalancedBracket	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterUnbalancedBracket(pline_info) abort$/;"	f
crystal#indent#ClosingBracketOnEmptyLine	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
crystal#indent#ContinuedHangingOperator	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ContinuedHangingOperator(msl_info) abort$/;"	f
crystal#indent#ContinuedLine	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ContinuedLine(pline_info) abort$/;"	f
crystal#indent#DeindentingKeyword	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#DeindentingKeyword(cline_info) abort$/;"	f
crystal#indent#DeindentingMacroTag	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#DeindentingMacroTag(cline_info) abort$/;"	f
crystal#indent#EmptyInsideString	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#EmptyInsideString(pline_info) abort$/;"	f
crystal#indent#ExtraBrackets	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ExtraBrackets(lnum) abort$/;"	f
crystal#indent#GetMSL	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#GetMSL(lnum) abort$/;"	f
crystal#indent#IndentingKeywordInMSL	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IndentingKeywordInMSL(msl_info) abort$/;"	f
crystal#indent#IsAssignment	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsAssignment(str, pos) abort$/;"	f
crystal#indent#IsInString	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInString(lnum, col) abort$/;"	f
crystal#indent#IsInStringDelimiter	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringDelimiter(lnum, col) abort$/;"	f
crystal#indent#IsInStringOrComment	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringOrComment(lnum, col) abort$/;"	f
crystal#indent#IsInStringOrCommentOrDelimiter	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringOrCommentOrDelimiter(lnum, col) abort$/;"	f
crystal#indent#IsLineComment	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsLineComment(lnum) abort$/;"	f
crystal#indent#LeadingOperator	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#LeadingOperator(cline_info) abort$/;"	f
crystal#indent#Match	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#Match(lnum, regex) abort$/;"	f
crystal#indent#MultilineString	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#MultilineString(cline_info) abort$/;"	f
crystal#indent#PrevNonBlank	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#PrevNonBlank(lnum) abort$/;"	f
crystal#indent#PreviousNotMSL	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#PreviousNotMSL(msl_info) abort$/;"	f
crystal#indent#RelativeMacroDepth	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#RelativeMacroDepth(a, b) abort$/;"	f
crystal#indent#StartOfFile	plugged/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#StartOfFile(pline_info) abort$/;"	f
crystal_lang#complete	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#complete(findstart, base) abort$/;"	f
crystal_lang#context	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#context(file, pos, option_str) abort$/;"	f
crystal_lang#entrypoint_for	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#entrypoint_for(file_path) abort$/;"	f
crystal_lang#expand	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#expand(file, pos, ...) abort$/;"	f
crystal_lang#format	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format(option_str, ...) abort$/;"	f
crystal_lang#format_string	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format_string(code, ...) abort$/;"	f
crystal_lang#get_spec_switched_path	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#get_spec_switched_path(absolute_path) abort$/;"	f
crystal_lang#impl	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#impl(file, pos, option_str) abort$/;"	f
crystal_lang#jump_to_definition	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#jump_to_definition(file, pos) abort$/;"	f
crystal_lang#run_all_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_all_spec(...) abort$/;"	f
crystal_lang#run_current_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_current_spec(...) abort$/;"	f
crystal_lang#switch_spec_file	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#switch_spec_file(...) abort$/;"	f
crystal_lang#tool	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#tool(name, file, pos, option_str) abort$/;"	f
crystal_lang#type_hierarchy	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#type_hierarchy(file, option_str) abort$/;"	f
csc_minlines	plugged/vim-polyglot/syntax/csc.vim	/^	let csc_minlines = 50	" mostly for () constructs$/;"	v
csv#AddColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#AddColumn(start, stop, ...) range "{{{3$/;"	f
csv#AnalyzeColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#AnalyzeColumn(...) "{{{3$/;"	f
csv#ArrangeCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ArrangeCol(first, last, bang, limit, ...) range "{{{3$/;"	f
csv#AvgColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#AvgColumn(list) "{{{3$/;"	f
csv#CSVArrangeCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CSVArrangeCol(first, last, bang, limit) range "{{{2$/;"	f
csv#CSVMappings	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CSVMappings() "{{{3$/;"	f
csv#CSVSortValues	plugged/vim-polyglot/autoload/csv.vim	/^  fu! csv#CSVSortValues(i1, i2) "{{{3$/;"	f
csv#CSV_SetOption	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CSV_SetOption(csvfile, header, option, value) "{{{3$/;"	f
csv#CalculateColumnWidth	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CalculateColumnWidth(row, silent) "{{{3$/;"	f
csv#CheckDuplicates	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CheckDuplicates(list) "{{{3$/;"	f
csv#CheckHeaderLine	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CheckHeaderLine() "{{{3$/;"	f
csv#ColWidth	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ColWidth(colnr, row, silent) "{{{3$/;"	f
csv#ColumnMode	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ColumnMode() "{{{3$/;"	f
csv#ColumnWidth	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ColumnWidth()$/;"	f
csv#Columnize	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Columnize(field) "{{{3$/;"	f
csv#CommandDefinitions	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CommandDefinitions() "{{{3$/;"	f
csv#CompleteColumnNr	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CompleteColumnNr(A,L,P) "{{{3$/;"	f
csv#CopyCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CopyCol(reg, col, cnt) "{{{3$/;"	f
csv#CountColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#CountColumn(list) "{{{3$/;"	f
csv#DelColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DelColumn(colnr) "{{{3$/;"	f
csv#DeleteColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DeleteColumn(arg) "{{{3$/;"	f
csv#DisableFolding	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DisableFolding() "{{{3$/;"	f
csv#DoAutoCommands	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DoAutoCommands() "{{{3$/;"	f
csv#DoForEachColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DoForEachColumn(start, stop, bang) range "{{{3$/;"	f
csv#DupColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DupColumn(start, stop, ...) range "{{{3$/;"	f
csv#DuplicateRows	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#DuplicateRows(columnlist) "{{{3$/;"	f
csv#EscapeValue	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#EscapeValue(val) "{{{3$/;"	f
csv#EvalColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#EvalColumn(nr, func, first, last, ...) range "{{{3$/;"	f
csv#FoldValue	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#FoldValue(lnum, filter) "{{{3$/;"	f
csv#GetCells	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetCells(list) "{{{3$/;"	f
csv#GetColPat	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetColPat(colnr, zs_flag) "{{{3$/;"	f
csv#GetColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetColumn(line, col, strip) "{{{3$/;"	f
csv#GetCursorChar	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetCursorChar() "{{{3$/;"	f
csv#GetDelimiter	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetDelimiter(first, last, ...) "{{{3$/;"	f
csv#GetPat	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#GetPat(colnr, maxcolnr, pat, allowmore) "{{{3$/;"	f
csv#HiCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#HiCol(colnr, bang) "{{{3$/;"	f
csv#IN	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#IN(list, value) "{{{3$/;"	f
csv#Init	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Init(start, end, ...) "{{{3$/;"	f
csv#InitCSVFixedWidth	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#InitCSVFixedWidth() "{{{3$/;"	f
csv#LocalCmd	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#LocalCmd(name, definition, args) "{{{3$/;"	f
csv#LocalSettings	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#LocalSettings(type) "{{{3$/;"	f
csv#Map	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Map(map, name, definition, ...) "{{{3$/;"	f
csv#MaxColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#MaxColumn(list) "{{{3$/;"	f
csv#MaxColumns	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#MaxColumns(...) "{{{3$/;"	f
csv#Menu	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Menu(enable) "{{{3$/;"	f
csv#MoveCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveCol(forward, line, ...) "{{{3$/;"	f
csv#MoveColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveColumn(start, stop, ...) range "{{{3$/;"	f
csv#MoveOver	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveOver(outer) "{{{3$/;"	f
csv#NewDelimiter	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#NewDelimiter(newdelimiter, firstl, lastl) "{{{3$/;"	f
csv#NewRecord	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#NewRecord(line1, line2, count) "{{{3$/;"	f
csv#NrColumns	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#NrColumns(bang) "{{{3$/;"	f
csv#NumberFormat	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#NumberFormat() "{{{3$/;"	f
csv#OutputFilters	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#OutputFilters(bang) "{{{3$/;"	f
csv#PopStdDevColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#PopStdDevColumn(list) "{{{2$/;"	f
csv#PopVarianceColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#PopVarianceColumn(list) "{{{2$/;"	f
csv#PrepUnArrangeCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepUnArrangeCol(first, last) "{{{3$/;"	f
csv#PrepareDoForEachColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepareDoForEachColumn(start, stop, bang) range"{{{3$/;"	f
csv#PrepareFolding	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepareFolding(add, match)  "{{{3$/;"	f
csv#ProcessFieldValue	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ProcessFieldValue(field) "{{{3$/;"	f
csv#ProgressBar	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#ProgressBar(cnt, max) "{{{3$/;"	f
csv#RemoveLastItem	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#RemoveLastItem(count) "{{{3$/;"	f
csv#SameFieldRegion	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SameFieldRegion() "{{{3$/;"	f
csv#SaveOptions	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SaveOptions(list) "{{{3$/;"	f
csv#SearchColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SearchColumn(arg) "{{{3$/;"	f
csv#SetupAutoCmd	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SetupAutoCmd(window,bufnr) "{{{3$/;"	f
csv#SmplStdDevColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SmplStdDevColumn(list) "{{{2$/;"	f
csv#SmplVarianceColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SmplVarianceColumn(list) "{{{2$/;"	f
csv#Sort	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Sort(bang, line1, line2, colnr) range "{{{3$/;"	f
csv#SortComplete	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SortComplete(A,L,P) "{{{3$/;"	f
csv#SortFilter	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SortFilter(a, b) "{{{3$/;"	f
csv#SplitHeaderLine	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SplitHeaderLine(lines, bang, hor) "{{{3$/;"	f
csv#SplitHeaderToggle	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SplitHeaderToggle(hor) "{{{3$/;"	f
csv#SubstituteInColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SubstituteInColumn(command, line1, line2) range "{{{3$/;"	f
csv#SumCSVRow	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SumCSVRow(line, nr) "{{{3$/;"	f
csv#SumColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#SumColumn(list) "{{{3$/;"	f
csv#Tabularize	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Tabularize(bang, first, last) "{{{3$/;"	f
csv#Timeout	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Timeout(start) "{{{3$/;"	f
csv#Transpose	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Transpose(line1, line2) "{{{3$/;"	f
csv#UnArrangeCol	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#UnArrangeCol(match) "{{{3$/;"	f
csv#VarianceColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#VarianceColumn(list, is_population) "{{{3$/;"	f
csv#Vertfold	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Vertfold(bang, col) "{{{3$/;"	f
csv#WColumn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#WColumn(...) "{{{3$/;"	f
csv#Warn	plugged/vim-polyglot/autoload/csv.vim	/^fu! csv#Warn(mess) "{{{3$/;"	f
current_compiler	plugged/vim-polyglot/compiler/ant.vim	/^let current_compiler = "ant"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/bdf.vim	/^let current_compiler = "bdf"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/cake.vim	/^let current_compiler = 'cake'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/cargo.vim	/^let current_compiler = "cargo"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/cryptol.vim	/^let current_compiler = "cryptol"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/cs.vim	/^let current_compiler = "cs"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/cucumber.vim	/^let current_compiler = "cucumber"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/dot.vim	/^let current_compiler = "dot"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/fish.vim	/^let current_compiler = 'fish'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/gradle.vim	/^let current_compiler = "gradle"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/gradlew.vim	/^let current_compiler = "gradlew"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/haml.vim	/^let current_compiler = "haml"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/ledger.vim	/^let current_compiler = g:ledger_bin$/;"	v
current_compiler	plugged/vim-polyglot/compiler/lilypond.vim	/^let current_compiler = "lilypond"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/ls.vim	/^let current_compiler = 'ls'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/nim.vim	/^let current_compiler = 'nim'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/nix-build.vim	/^let current_compiler = 'nix-build'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/ocaml.vim	/^let current_compiler = "ocaml"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/powershell.vim	/^let current_compiler = "powershell"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/python.vim	/^let current_compiler = "python"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/rake.vim	/^let current_compiler = "rake"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/rustc.vim	/^let current_compiler = "rustc"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/sass.vim	/^let current_compiler = "sass"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/sbt.vim	/^let current_compiler = 'sbt'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/swift.vim	/^let current_compiler = "swiftc"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tcl.vim	/^let current_compiler = "tcl"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tex.vim	/^		let current_compiler = "latex"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tex.vim	/^		let current_compiler = b:tex_flavor$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tex.vim	/^		let current_compiler = g:tex_flavor$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tex.vim	/^	let current_compiler = 'make'$/;"	v
current_compiler	plugged/vim-polyglot/compiler/tidy.vim	/^let current_compiler = "tidy"$/;"	v
current_compiler	plugged/vim-polyglot/compiler/typescript.vim	/^let current_compiler='typescript'$/;"	v
cursors.cancelKey	plugged/coc.nvim/data/schema.json	/^    "cursors.cancelKey": {$/;"	o	object:properties
cursors.nextKey	plugged/coc.nvim/data/schema.json	/^    "cursors.nextKey": {$/;"	o	object:properties
cursors.previousKey	plugged/coc.nvim/data/schema.json	/^    "cursors.previousKey": {$/;"	o	object:properties
cwd	plugged/coc.nvim/data/schema.json	/^        "cwd": {$/;"	o	object:definitions.languageServerBase.properties
cwd	plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerCommand.properties
cwd	plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerModule.properties
cy	init.vim	/^map <expr> cy "+y$/;"	m
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.d = function(exports, name, getter) {$/;"	f	function:__webpack_require__
dart#ToggleFormatOnSave	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#ToggleFormatOnSave() abort$/;"	f
dart#analyzer	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#analyzer(q_args) abort$/;"	f
dart#fmt	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#fmt(...) abort$/;"	f
dart#resolveUri	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#resolveUri(uri) abort$/;"	f
dart#setModifiable	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#setModifiable() abort$/;"	f
dart#tojs	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#tojs(q_args) abort$/;"	f
db#adapter#ecto#canonicalize	plugged/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#canonicalize(url) abort$/;"	f
db#adapter#ecto#complete_opaque	plugged/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#complete_opaque(url) abort$/;"	f
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
default	plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerBase.properties.cwd
default	plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerCommand.properties.command
default	plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.module
default	plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.runtime
default	plugged/coc.nvim/data/schema.json	/^          "default": "127.0.0.1",$/;"	s	object:definitions.languageServerSocket.properties.host
default	plugged/coc.nvim/data/schema.json	/^          "default": "ipc",$/;"	s	object:definitions.languageServerModule.properties.transport
default	plugged/coc.nvim/data/schema.json	/^          "default": "never",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
default	plugged/coc.nvim/data/schema.json	/^          "default": "off",$/;"	s	object:definitions.languageServerBase.properties.trace.server
default	plugged/coc.nvim/data/schema.json	/^          "default": "utf8",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
default	plugged/coc.nvim/data/schema.json	/^          "default": 0,$/;"	n	object:definitions.languageServerBase.properties.formatterPriority
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.additionalSchemes
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.filetypes
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.ignoredRootPaths
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.rootPatterns
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerCommand.properties.args
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.args
default	plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.execArgv
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableCompletion
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableDiagnostics
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableDynamicRegister
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableSnippetCompletion
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableWorkspaceFolders
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.requireRootPattern
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.detached
default	plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.shell
default	plugged/coc.nvim/data/schema.json	/^          "default": null,$/;"	z	object:definitions.languageServerBase.properties.env
default	plugged/coc.nvim/data/schema.json	/^          "default": true$/;"	b	object:definitions.languageServerBase.properties.enable
default	plugged/coc.nvim/data/schema.json	/^          "default": true,$/;"	b	object:definitions.languageServerBase.properties.progressOnInitialization
default	plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.initializationOptions
default	plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.settings
default	plugged/coc.nvim/data/schema.json	/^        "default": { "type": "string" }$/;"	o	object:properties.suggest.completionItemKindLabels.properties
default	plugged/coc.nvim/data/schema.json	/^      "default": " "$/;"	s	object:properties.codeLens.subseparator
default	plugged/coc.nvim/data/schema.json	/^      "default": " "$/;"	s	object:properties.diagnostic.virtualTextPrefix
default	plugged/coc.nvim/data/schema.json	/^      "default": " \\\\ "$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
default	plugged/coc.nvim/data/schema.json	/^      "default": "",$/;"	s	object:properties.http.proxy
default	plugged/coc.nvim/data/schema.json	/^      "default": "*",$/;"	s	object:properties.list.selectedSignText
default	plugged/coc.nvim/data/schema.json	/^      "default": "10MB",$/;"	s	object:properties.coc.preferences.maxFileSize
default	plugged/coc.nvim/data/schema.json	/^      "default": "<C-j>",$/;"	s	object:properties.list.nextKeymap
default	plugged/coc.nvim/data/schema.json	/^      "default": "<C-k>",$/;"	s	object:properties.list.previousKeymap
default	plugged/coc.nvim/data/schema.json	/^      "default": "<C-n>",$/;"	s	object:properties.cursors.nextKey
default	plugged/coc.nvim/data/schema.json	/^      "default": "<C-p>",$/;"	s	object:properties.cursors.previousKey
default	plugged/coc.nvim/data/schema.json	/^      "default": "<cr>",$/;"	s	object:properties.dialog.confirmKey
default	plugged/coc.nvim/data/schema.json	/^      "default": "<esc>",$/;"	s	object:properties.cursors.cancelKey
default	plugged/coc.nvim/data/schema.json	/^      "default": ">",$/;"	s	object:properties.list.indicator
default	plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.errorSign
default	plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.hintSign
default	plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.infoSign
default	plugged/coc.nvim/data/schema.json	/^      "default": "A"$/;"	s	object:properties.coc.source.around.shortcut
default	plugged/coc.nvim/data/schema.json	/^      "default": "B"$/;"	s	object:properties.coc.source.buffer.shortcut
default	plugged/coc.nvim/data/schema.json	/^      "default": "CocFloating",$/;"	s	object:properties.notification.highlightGroup
default	plugged/coc.nvim/data/schema.json	/^      "default": "F"$/;"	s	object:properties.coc.source.file.shortcut
default	plugged/coc.nvim/data/schema.json	/^      "default": "SNIP",$/;"	s	object:properties.coc.preferences.snippetStatusText
default	plugged/coc.nvim/data/schema.json	/^      "default": "Search",$/;"	s	object:properties.list.matchHighlightGroup
default	plugged/coc.nvim/data/schema.json	/^      "default": "Search",$/;"	s	object:properties.list.previewHighlightGroup
default	plugged/coc.nvim/data/schema.json	/^      "default": "[%source%code] [%severity] %message"$/;"	s	object:properties.diagnostic.format
default	plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.diagnostic.enableMessage
default	plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.suggest.autoTrigger
default	plugged/coc.nvim/data/schema.json	/^      "default": "edit"$/;"	s	object:properties.coc.preferences.jumpCommand
default	plugged/coc.nvim/data/schema.json	/^      "default": "float",$/;"	s	object:properties.diagnostic.messageTarget
default	plugged/coc.nvim/data/schema.json	/^      "default": "float",$/;"	s	object:properties.signature.target
default	plugged/coc.nvim/data/schema.json	/^      "default": "full"$/;"	s	object:properties.list.source.diagnostics.pathFormat
default	plugged/coc.nvim/data/schema.json	/^      "default": "hint",$/;"	s	object:properties.diagnostic.level
default	plugged/coc.nvim/data/schema.json	/^      "default": "length",$/;"	s	object:properties.suggest.defaultSortMethod
default	plugged/coc.nvim/data/schema.json	/^      "default": "more",$/;"	s	object:properties.coc.preferences.messageLevel
default	plugged/coc.nvim/data/schema.json	/^      "default": "never",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
default	plugged/coc.nvim/data/schema.json	/^      "default": "npm",$/;"	s	object:properties.npm.binPath
default	plugged/coc.nvim/data/schema.json	/^      "default": "preview",$/;"	s	object:properties.suggest.detailField
default	plugged/coc.nvim/data/schema.json	/^      "default": "quickfix",$/;"	s	object:properties.coc.preferences.listOfWorkspaceEdit
default	plugged/coc.nvim/data/schema.json	/^      "default": "vsplit"$/;"	s	object:properties.refactor.openCommand
default	plugged/coc.nvim/data/schema.json	/^      "default": "~",$/;"	s	object:properties.suggest.snippetIndicator
default	plugged/coc.nvim/data/schema.json	/^      "default": "‣"$/;"	s	object:properties.codeLens.separator
default	plugged/coc.nvim/data/schema.json	/^      "default": "⚠"$/;"	s	object:properties.diagnostic.warningSign
default	plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.around.priority
default	plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.buffer.priority
default	plugged/coc.nvim/data/schema.json	/^      "default": 1,$/;"	n	object:properties.notification.marginRight
default	plugged/coc.nvim/data/schema.json	/^      "default": 1,$/;"	n	object:properties.notification.marginTop
default	plugged/coc.nvim/data/schema.json	/^      "default": 1,$/;"	n	object:properties.suggest.minTriggerInputLength
default	plugged/coc.nvim/data/schema.json	/^      "default": 10$/;"	n	object:properties.coc.source.file.priority
default	plugged/coc.nvim/data/schema.json	/^      "default": 10$/;"	n	object:properties.diagnostic.signPriority
default	plugged/coc.nvim/data/schema.json	/^      "default": 10,$/;"	n	object:properties.list.height
default	plugged/coc.nvim/data/schema.json	/^      "default": 10,$/;"	n	object:properties.notification.maxHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 100$/;"	n	object:properties.suggest.detailMaxLength
default	plugged/coc.nvim/data/schema.json	/^      "default": 100,$/;"	n	object:properties.list.interactiveDebounceTime
default	plugged/coc.nvim/data/schema.json	/^      "default": 100,$/;"	n	object:properties.signature.triggerSignatureWait
default	plugged/coc.nvim/data/schema.json	/^      "default": 1000$/;"	n	object:properties.diagnostic.highlightOffset
default	plugged/coc.nvim/data/schema.json	/^      "default": 12,$/;"	n	object:properties.coc.preferences.previewMaxHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 12,$/;"	n	object:properties.list.maxPreviewHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 20,$/;"	n	object:properties.dialog.maxHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 200$/;"	n	object:properties.diagnostic.messageDelay
default	plugged/coc.nvim/data/schema.json	/^      "default": 200$/;"	n	object:properties.suggest.labelMaxLength
default	plugged/coc.nvim/data/schema.json	/^      "default": 3$/;"	n	object:properties.diagnostic.virtualTextLines
default	plugged/coc.nvim/data/schema.json	/^      "default": 3,$/;"	n	object:properties.refactor.afterContext
default	plugged/coc.nvim/data/schema.json	/^      "default": 3,$/;"	n	object:properties.refactor.beforeContext
default	plugged/coc.nvim/data/schema.json	/^      "default": 30,$/;"	n	object:properties.notification.minProgressWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 30000,$/;"	n	object:properties.list.limitLines
default	plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.suggest.maxCompleteItemCount
default	plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.suggest.triggerCompletionWait
default	plugged/coc.nvim/data/schema.json	/^      "default": 500,$/;"	n	object:properties.coc.preferences.highlightTimeout
default	plugged/coc.nvim/data/schema.json	/^      "default": 5000,$/;"	n	object:properties.suggest.timeout
default	plugged/coc.nvim/data/schema.json	/^      "default": 60,$/;"	n	object:properties.notification.maxWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.diagnostic.maxWindowHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.signature.maxWindowHeight
default	plugged/coc.nvim/data/schema.json	/^      "default": 80$/;"	n	object:properties.diagnostic.maxWindowWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 80,$/;"	n	object:properties.dialog.maxWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 80,$/;"	n	object:properties.signature.maxWindowWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 80,$/;"	n	object:properties.suggest.maxPreviewWidth
default	plugged/coc.nvim/data/schema.json	/^      "default": 900,$/;"	n	object:properties.list.signOffset
default	plugged/coc.nvim/data/schema.json	/^      "default": 99,$/;"	n	object:properties.suggest.languageSourcePriority
default	plugged/coc.nvim/data/schema.json	/^      "default": [" ", "(", "<", "{", "[", "\\r", "\\n"]$/;"	a	object:properties.suggest.invalidInsertCharacters
default	plugged/coc.nvim/data/schema.json	/^      "default": [".git", ".hg", ".projections.json"],$/;"	a	object:properties.coc.preferences.rootPatterns
default	plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	a	object:properties.coc.source.file.trimSameExts
default	plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	a	object:properties.coc.source.file.triggerCharacters
default	plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	a	object:properties.workspace.ignoredFiletypes
default	plugged/coc.nvim/data/schema.json	/^      "default": [$/;"	a	object:properties.list.statusLineSegments
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.preferences.formatOnSaveFiletypes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.preferences.formatOnTypeFiletypes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.around.disableSyntaxes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.buffer.disableSyntaxes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.disableSyntaxes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.ignorePatterns
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.list.source.outline.ctagsFilestypes
default	plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.list.source.symbols.excludes
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.formatOnInsertLeave
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.formatOnType
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.useQuickfixForLocations
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.codeLens.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.checkCurrentLine
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.displayByAle
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshAfterSave
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshOnInsertMode
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.virtualText
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.signature.hideOnTextChange
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.asciiCharactersOnly
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableKind
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenu
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenuShortcut
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.enablePreselect
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.enablePreview
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.keepCompleteopt
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.numberSelect
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.preferCompleteThanJumpPlaceholder
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.removeDuplicateItems
default	plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.triggerAfterInsertEnter
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.coc.preferences.enableMessageDialog
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.diagnostic.separateRelatedInformationAsDiagnostics
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.list.alignColumns
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.list.previewSplitRight
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.acceptSuggestionOnCommitCharacter
default	plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.echodocSupport
default	plugged/coc.nvim/data/schema.json	/^      "default": null$/;"	z	object:properties.coc.preferences.watchmanPath
default	plugged/coc.nvim/data/schema.json	/^      "default": null$/;"	z	object:properties.http.proxyAuthorization
default	plugged/coc.nvim/data/schema.json	/^      "default": null$/;"	z	object:properties.http.proxyCA
default	plugged/coc.nvim/data/schema.json	/^      "default": null,$/;"	z	object:properties.dialog.floatBorderHighlight
default	plugged/coc.nvim/data/schema.json	/^      "default": null,$/;"	z	object:properties.dialog.floatHighlight
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.bracketEnterImprove
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.colorSupport
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.enableFloatHighlight
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.enableMarkdown
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.floatActions
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.previewAutoClose
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.promptInput
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.promptWorkspaceEdit
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.silentAutoupdate
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.snippets.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.firstMatch
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.firstMatch
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.file.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.locationlistUpdate
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.virtualTextCurrentLineOnly
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.http.proxyStrictSSL
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.list.source.diagnostics.includeCode
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.refactor.saveToFile
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.enable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.preferShownAbove
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.fixInsertedWord
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.floatEnable
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.localityBonus
default	plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.noselect
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.buffer.ignoreGitignore
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.file.ignoreHidden
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.enableHighlightLineNumber
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.enableSign
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.showDeprecated
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.showUnused
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.dialog.pickerButtonShortcut
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.dialog.pickerButtons
default	plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.list.extendedSearchMode
default	plugged/coc.nvim/data/schema.json	/^      "default": {}$/;"	o	object:properties.diagnostic.filetypeMap
default	plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.languageserver
default	plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.insertMappings
default	plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.normalMappings
default	plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.suggest.completionItemKindLabels
default	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/([A-Z][a-zA-Z0-9_:]+)[[:space:]]*\\{\/\\1\/f,default\/$/;"	k	langdef:puppet
default_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {$/;"	v
default_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
definition	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*define[[:space:]]*([a-z][a-zA-Z0-9_:\\-]+)\/\\1\/d,definition\/$/;"	k	langdef:puppet
definitions	plugged/coc.nvim/data/schema.json	/^  "definitions": {$/;"	o
dependencies	plugged/coc.nvim/package.json	/^  "dependencies": {}$/;"	o
description	plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of javascript file, should works in IPC mode"$/;"	s	object:definitions.languageServerModule.properties.module
description	plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of node runtime."$/;"	s	object:definitions.languageServerModule.properties.runtime
description	plugged/coc.nvim/data/schema.json	/^          "description": "Absolute root paths that language server should not use as rootPath, h/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
description	plugged/coc.nvim/data/schema.json	/^          "description": "Additional uri schemes, default schemes including file & untitled.",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
description	plugged/coc.nvim/data/schema.json	/^          "description": "Arguments of command",$/;"	s	object:definitions.languageServerCommand.properties.args
description	plugged/coc.nvim/data/schema.json	/^          "description": "Argv passed to node when using module, normally used for debugging, ex/;"	s	object:definitions.languageServerModule.properties.execArgv
description	plugged/coc.nvim/data/schema.json	/^          "description": "Configure message level to show the output channel buffer",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
description	plugged/coc.nvim/data/schema.json	/^          "description": "Detach the languageserver process"$/;"	s	object:definitions.languageServerCommand.properties.detached
description	plugged/coc.nvim/data/schema.json	/^          "description": "Disable completion feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
description	plugged/coc.nvim/data/schema.json	/^          "description": "Disable completion snippet feature for this languageserver, the langua/;"	s	object:definitions.languageServerBase.properties.disableSnippetCompletion
description	plugged/coc.nvim/data/schema.json	/^          "description": "Disable dynamic registerCapability feature for this languageserver to /;"	s	object:definitions.languageServerBase.properties.disableDynamicRegister
description	plugged/coc.nvim/data/schema.json	/^          "description": "Disable handle diagnostics for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
description	plugged/coc.nvim/data/schema.json	/^          "description": "Disable workspaceFolders feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
description	plugged/coc.nvim/data/schema.json	/^          "description": "Enable progress report on languageserver initialize."$/;"	s	object:definitions.languageServerBase.properties.progressOnInitialization
description	plugged/coc.nvim/data/schema.json	/^          "description": "Encoding used for stdio of child process."$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
description	plugged/coc.nvim/data/schema.json	/^          "description": "Environment variables for child process."$/;"	s	object:definitions.languageServerBase.properties.env
description	plugged/coc.nvim/data/schema.json	/^          "description": "Executable in $PATH to start languageserver, should not used with modu/;"	s	object:definitions.languageServerCommand.properties.command
description	plugged/coc.nvim/data/schema.json	/^          "description": "Extra arguments of module",$/;"	s	object:definitions.languageServerModule.properties.args
description	plugged/coc.nvim/data/schema.json	/^          "description": "Host of server"$/;"	s	object:definitions.languageServerSocket.properties.host
description	plugged/coc.nvim/data/schema.json	/^          "description": "If true, doesn't start server when root pattern not found."$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
description	plugged/coc.nvim/data/schema.json	/^          "description": "Port number of socket server"$/;"	s	object:definitions.languageServerSocket.properties.port
description	plugged/coc.nvim/data/schema.json	/^          "description": "Port number used when transport is 'socket'"$/;"	s	object:definitions.languageServerModule.properties.transportPort
description	plugged/coc.nvim/data/schema.json	/^          "description": "Priority of this languageserver's fomatter."$/;"	s	object:definitions.languageServerBase.properties.formatterPriority
description	plugged/coc.nvim/data/schema.json	/^          "description": "Root patterns used to resolve rootPath from current file, default to w/;"	s	object:definitions.languageServerBase.properties.rootPatterns
description	plugged/coc.nvim/data/schema.json	/^          "description": "Settings of languageserver"$/;"	s	object:definitions.languageServerBase.properties.settings
description	plugged/coc.nvim/data/schema.json	/^          "description": "Supported filetypes, add * in array for all filetypes.",$/;"	s	object:definitions.languageServerBase.properties.filetypes
description	plugged/coc.nvim/data/schema.json	/^          "description": "Trace level of communication between server and client"$/;"	s	object:definitions.languageServerBase.properties.trace.server
description	plugged/coc.nvim/data/schema.json	/^          "description": "Transport kind used by server, could be 'ipc', 'stdio', 'socket' and '/;"	s	object:definitions.languageServerModule.properties.transport
description	plugged/coc.nvim/data/schema.json	/^          "description": "Use shell for process"$/;"	s	object:definitions.languageServerCommand.properties.shell
description	plugged/coc.nvim/data/schema.json	/^          "description": "Working directory of languageserver, absolute path or relative to work/;"	s	object:definitions.languageServerBase.properties.cwd
description	plugged/coc.nvim/data/schema.json	/^          "description": "initializationOptions passed to languageserver"$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
description	plugged/coc.nvim/data/schema.json	/^      "description": "A map between buffer filetype and the filetype assigned to diagnostics. To/;"	s	object:properties.diagnostic.filetypeMap
description	plugged/coc.nvim/data/schema.json	/^      "description": "Add preview option to completeopt, default: false.",$/;"	s	object:properties.suggest.enablePreview
description	plugged/coc.nvim/data/schema.json	/^      "description": "An array of statusline segments that will be used to draw the status line /;"	s	object:properties.list.statusLineSegments
description	plugged/coc.nvim/data/schema.json	/^      "description": "Auto close preview window on cursor move.",$/;"	s	object:properties.coc.preferences.previewAutoClose
description	plugged/coc.nvim/data/schema.json	/^      "description": "Automatically update the value of b:coc_current_function on CursorHold eve/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
description	plugged/coc.nvim/data/schema.json	/^      "description": "Boost suggestions that appear closer to the cursor position.",$/;"	s	object:properties.suggest.localityBonus
description	plugged/coc.nvim/data/schema.json	/^      "description": "CA (file) to use as Certificate Authority",$/;"	s	object:properties.http.proxyCA
description	plugged/coc.nvim/data/schema.json	/^      "description": "Command or absolute path to npm or yarn."$/;"	s	object:properties.npm.binPath
description	plugged/coc.nvim/data/schema.json	/^      "description": "Command used for location jump, like goto definition, goto references etc./;"	s	object:properties.coc.preferences.jumpCommand
description	plugged/coc.nvim/data/schema.json	/^      "description": "Confirm completion instead of jump to next placeholder when completion is /;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
description	plugged/coc.nvim/data/schema.json	/^      "description": "Confirm key for confirm selection used by menu and picker, you can always /;"	s	object:properties.dialog.confirmKey
description	plugged/coc.nvim/data/schema.json	/^      "description": "Controls whether suggestions should be accepted on commit characters. For /;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
description	plugged/coc.nvim/data/schema.json	/^      "description": "Controls whether the proxy server certificate should be verified against t/;"	s	object:properties.http.proxyStrictSSL
description	plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on insert mode."$/;"	s	object:properties.list.insertMappings
description	plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on normal mode."$/;"	s	object:properties.list.normalMappings
description	plugged/coc.nvim/data/schema.json	/^      "description": "Debouce time for input change on interactive mode."$/;"	s	object:properties.list.interactiveDebounceTime
description	plugged/coc.nvim/data/schema.json	/^      "description": "Decide how the filepath is shown in the list.",$/;"	s	object:properties.list.source.diagnostics.pathFormat
description	plugged/coc.nvim/data/schema.json	/^      "description": "Default sorting behavior for suggested completion items.",$/;"	s	object:properties.suggest.defaultSortMethod
description	plugged/coc.nvim/data/schema.json	/^      "description": "Define the diagnostic format that shown in float window or echoed, availab/;"	s	object:properties.diagnostic.format
description	plugged/coc.nvim/data/schema.json	/^      "description": "Diagnostic message target.",$/;"	s	object:properties.diagnostic.messageTarget
description	plugged/coc.nvim/data/schema.json	/^      "description": "Dictionary of languageservers, key is used as id of languageserver.",$/;"	s	object:properties.languageserver
description	plugged/coc.nvim/data/schema.json	/^      "description": "Disable shortcut of completion source in menu.",$/;"	s	object:properties.suggest.disableMenuShortcut
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable codeLens feature, require neovim with set virtual text feature.",$/;"	s	object:properties.codeLens.enable
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable color highlight if language server support it.",$/;"	s	object:properties.coc.preferences.colorSupport
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable diagnostic refresh on insert mode, default false.",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable extended search mode which allows multiple search patterns delimite/;"	s	object:properties.list.extendedSearchMode
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable floating window for documentation when possible.",$/;"	s	object:properties.suggest.floatEnable
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable highlight for floating window.",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable highlighting line numbers for diagnostics, only works with neovim a/;"	s	object:properties.diagnostic.enableHighlightLineNumber
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable messages shown in notification dialog."$/;"	s	object:properties.coc.preferences.enableMessageDialog
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable preselect feature of LSP, only works on neovim",$/;"	s	object:properties.suggest.enablePreselect
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable signature help when trigger character typed, require restart servic/;"	s	object:properties.signature.enable
description	plugged/coc.nvim/data/schema.json	/^      "description": "Enable signs for diagnostics."$/;"	s	object:properties.diagnostic.enableSign
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should be ignored for resolve workspace folder.",$/;"	s	object:properties.workspace.ignoredFiletypes
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should run format on save.",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should run format on typing. Only take effect when `coc.pre/;"	s	object:properties.coc.preferences.formatOnTypeFiletypes
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should use ctags for outline instead of language server.",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.around.firstMatch
description	plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.buffer.firstMatch
description	plugged/coc.nvim/data/schema.json	/^      "description": "Height of split list window."$/;"	s	object:properties.list.height
description	plugged/coc.nvim/data/schema.json	/^      "description": "Hide signature float window when text changed on insert mode.",$/;"	s	object:properties.signature.hideOnTextChange
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group for border of dialog window\/popup, default to 'CocFloatin/;"	s	object:properties.dialog.floatBorderHighlight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group for dialog window\/popup, default to 'CocFloating'"$/;"	s	object:properties.dialog.floatHighlight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group of notification dialog."$/;"	s	object:properties.notification.highlightGroup
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group used for highlight the range in preview window."$/;"	s	object:properties.list.previewHighlightGroup
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group used for matched texts in list window."$/;"	s	object:properties.list.matchHighlightGroup
description	plugged/coc.nvim/data/schema.json	/^      "description": "Highlight timeout for buffer in floating window."$/;"	s	object:properties.coc.preferences.highlightTimeout
description	plugged/coc.nvim/data/schema.json	/^      "description": "How long to wait (in milliseconds) before displaying the diagnostic messag/;"	s	object:properties.diagnostic.messageDelay
description	plugged/coc.nvim/data/schema.json	/^      "description": "How should completion be triggered",$/;"	s	object:properties.suggest.autoTrigger
description	plugged/coc.nvim/data/schema.json	/^      "description": "Ignore completion for hidden files"$/;"	s	object:properties.coc.source.file.ignoreHidden
description	plugged/coc.nvim/data/schema.json	/^      "description": "Ignore git ignored files for buffer words"$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
description	plugged/coc.nvim/data/schema.json	/^      "description": "Ignore patterns of matcher",$/;"	s	object:properties.coc.source.file.ignorePatterns
description	plugged/coc.nvim/data/schema.json	/^      "description": "Improve enter inside bracket `<> {} [] ()` by add new empty line below and/;"	s	object:properties.coc.preferences.bracketEnterImprove
description	plugged/coc.nvim/data/schema.json	/^      "description": "Input number to select complete item, works on neovim >= 0.4.0 only.",$/;"	s	object:properties.suggest.numberSelect
description	plugged/coc.nvim/data/schema.json	/^      "description": "Interval for check extension update, could be daily, weekly, never",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
description	plugged/coc.nvim/data/schema.json	/^      "description": "Invalid character for strip valid word when inserting text of complete ite/;"	s	object:properties.suggest.invalidInsertCharacters
description	plugged/coc.nvim/data/schema.json	/^      "description": "Key used for cancel cursors session."$/;"	s	object:properties.cursors.cancelKey
description	plugged/coc.nvim/data/schema.json	/^      "description": "Key used for jump to next cursors position. "$/;"	s	object:properties.cursors.nextKey
description	plugged/coc.nvim/data/schema.json	/^      "description": "Key used for jump to previous cursors position."$/;"	s	object:properties.cursors.previousKey
description	plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select next line on insert mode."$/;"	s	object:properties.list.nextKeymap
description	plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select previous line on insert mode."$/;"	s	object:properties.list.previousKeymap
description	plugged/coc.nvim/data/schema.json	/^      "description": "Limit lines for list buffer."$/;"	s	object:properties.list.limitLines
description	plugged/coc.nvim/data/schema.json	/^      "description": "List should contains changed locations after workspace edit, default to vi/;"	s	object:properties.coc.preferences.listOfWorkspaceEdit
description	plugged/coc.nvim/data/schema.json	/^      "description": "Make inserted word replace word characters after cursor position.",$/;"	s	object:properties.suggest.fixInsertedWord
description	plugged/coc.nvim/data/schema.json	/^      "description": "Margin right for notification dialog."$/;"	s	object:properties.notification.marginRight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Margin top for notification dialog."$/;"	s	object:properties.notification.marginTop
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max height for preview window of list."$/;"	s	object:properties.list.maxPreviewHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max height of preview window for hover."$/;"	s	object:properties.coc.preferences.previewMaxHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority bigger than or equal to 90."$/;"	s	object:properties.suggest.highPrioritySourceLimit
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority lower than 90."$/;"	s	object:properties.suggest.lowPrioritySourceLimit
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max length of abbr that shown as label of complete item.",$/;"	s	object:properties.suggest.labelMaxLength
description	plugged/coc.nvim/data/schema.json	/^      "description": "Max length of detail that should be shown in popup menu.",$/;"	s	object:properties.suggest.detailMaxLength
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum content height of notification dialog."$/;"	s	object:properties.notification.maxHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum content width of notification dialog."$/;"	s	object:properties.notification.maxWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum file size in bytes that coc.nvim should handle, default '10MB'"$/;"	s	object:properties.coc.preferences.maxFileSize
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of diagnostics floating window.",$/;"	s	object:properties.diagnostic.maxWindowHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of dialog window."$/;"	s	object:properties.dialog.maxHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of signature float window (or popup on vim8).",$/;"	s	object:properties.signature.maxWindowHeight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum number of complete items shown in vim"$/;"	s	object:properties.suggest.maxCompleteItemCount
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of diagnostics floating window.",$/;"	s	object:properties.diagnostic.maxWindowWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of dialog window."$/;"	s	object:properties.dialog.maxWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of floating preview window."$/;"	s	object:properties.suggest.maxPreviewWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of signature float window (or popup on vim8)."$/;"	s	object:properties.signature.maxWindowWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Message level for filter echoed messages, could be 'more', 'warning' and '/;"	s	object:properties.coc.preferences.messageLevel
description	plugged/coc.nvim/data/schema.json	/^      "description": "Minimum width of progress notification."$/;"	s	object:properties.notification.minProgressWidth
description	plugged/coc.nvim/data/schema.json	/^      "description": "Mininal input length for trigger completion, default 1"$/;"	s	object:properties.suggest.minTriggerInputLength
description	plugged/coc.nvim/data/schema.json	/^      "description": "Not make vim select first item on completion start",$/;"	s	object:properties.suggest.noselect
description	plugged/coc.nvim/data/schema.json	/^      "description": "Not open split window with update status when performing auto update.",$/;"	s	object:properties.coc.preferences.silentAutoupdate
description	plugged/coc.nvim/data/schema.json	/^      "description": "Offset number of buffer.addHighlight, neovim only.",$/;"	s	object:properties.diagnostic.highlightOffset
description	plugged/coc.nvim/data/schema.json	/^      "description": "Only refresh diagnostics after save, default false.",$/;"	s	object:properties.diagnostic.refreshAfterSave
description	plugged/coc.nvim/data/schema.json	/^      "description": "Only show virtualText diagnostic on current cursor line",$/;"	s	object:properties.diagnostic.virtualTextCurrentLineOnly
description	plugged/coc.nvim/data/schema.json	/^      "description": "Open command for refactor window.",$/;"	s	object:properties.refactor.openCommand
description	plugged/coc.nvim/data/schema.json	/^      "description": "Patterns of mimimatch for filepath to execlude from symbols list.",$/;"	s	object:properties.list.source.symbols.excludes
description	plugged/coc.nvim/data/schema.json	/^      "description": "Print num lines of leading context before each match."$/;"	s	object:properties.refactor.beforeContext
description	plugged/coc.nvim/data/schema.json	/^      "description": "Print num lines of trailing context after each match."$/;"	s	object:properties.refactor.afterContext
description	plugged/coc.nvim/data/schema.json	/^      "description": "Priority of diagnostic signs, default to 10",$/;"	s	object:properties.diagnostic.signPriority
description	plugged/coc.nvim/data/schema.json	/^      "description": "Priority of language sources."$/;"	s	object:properties.suggest.languageSourcePriority
description	plugged/coc.nvim/data/schema.json	/^      "description": "Prompt confirm from user when apply workspace edit for unloaded files.",$/;"	s	object:properties.coc.preferences.promptWorkspaceEdit
description	plugged/coc.nvim/data/schema.json	/^      "description": "Remove completion items with duplicated word for all sources, snippet item/;"	s	object:properties.suggest.removeDuplicateItems
description	plugged/coc.nvim/data/schema.json	/^      "description": "Remove kind field from vim complete item.",$/;"	s	object:properties.suggest.disableKind
description	plugged/coc.nvim/data/schema.json	/^      "description": "Remove menu field from vim complete item.",$/;"	s	object:properties.suggest.disableMenu
description	plugged/coc.nvim/data/schema.json	/^      "description": "Root patterns to resolve workspaceFolder from parent folders of opened fil/;"	s	object:properties.coc.preferences.rootPatterns
description	plugged/coc.nvim/data/schema.json	/^      "description": "Save to file when write refactor buffer with ':noa wa' command, set to fal/;"	s	object:properties.refactor.saveToFile
description	plugged/coc.nvim/data/schema.json	/^      "description": "Separate related information as diagnostics"$/;"	s	object:properties.diagnostic.separateRelatedInformationAsDiagnostics
description	plugged/coc.nvim/data/schema.json	/^      "description": "Separator text for codeLens in virtual text",$/;"	s	object:properties.codeLens.separator
description	plugged/coc.nvim/data/schema.json	/^      "description": "Set custom labels to completion items' kinds.",$/;"	s	object:properties.suggest.completionItemKindLabels
description	plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable diagnostic display",$/;"	s	object:properties.diagnostic.enable
description	plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable float\/popup support for actions menu, won't work /;"	s	object:properties.coc.preferences.floatActions
description	plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable snippets support.",$/;"	s	object:properties.coc.preferences.snippets.enable
description	plugged/coc.nvim/data/schema.json	/^      "description": "Set to true to enable format on type",$/;"	s	object:properties.coc.preferences.formatOnType
description	plugged/coc.nvim/data/schema.json	/^      "description": "Show buttons for picker dialog window\/popup."$/;"	s	object:properties.dialog.pickerButtons
description	plugged/coc.nvim/data/schema.json	/^      "description": "Show deprecated variables"$/;"	s	object:properties.diagnostic.showDeprecated
description	plugged/coc.nvim/data/schema.json	/^      "description": "Show shortcut in buttons of picker dialog window\/popup, used when dialog./;"	s	object:properties.dialog.pickerButtonShortcut
description	plugged/coc.nvim/data/schema.json	/^      "description": "Show signature help float window above cursor when possible, require resta/;"	s	object:properties.signature.preferShownAbove
description	plugged/coc.nvim/data/schema.json	/^      "description": "Show unused variables"$/;"	s	object:properties.diagnostic.showUnused
description	plugged/coc.nvim/data/schema.json	/^      "description": "Sign offset of list, should be different from other plugins."$/;"	s	object:properties.list.signOffset
description	plugged/coc.nvim/data/schema.json	/^      "description": "Sign text for selected lines."$/;"	s	object:properties.list.selectedSignText
description	plugged/coc.nvim/data/schema.json	/^      "description": "Subseparator between codeLenses in virtual text",$/;"	s	object:properties.codeLens.subseparator
description	plugged/coc.nvim/data/schema.json	/^      "description": "Suggest ASCII characters only",$/;"	s	object:properties.suggest.asciiCharactersOnly
description	plugged/coc.nvim/data/schema.json	/^      "description": "Target of signature help, use float when possible by default.",$/;"	s	object:properties.signature.target
description	plugged/coc.nvim/data/schema.json	/^      "description": "Target to show hover information, default is floating window when possible/;"	s	object:properties.coc.preferences.hoverTarget
description	plugged/coc.nvim/data/schema.json	/^      "description": "Tell the language server that markdown text format is supported, note that/;"	s	object:properties.coc.preferences.enableMarkdown
description	plugged/coc.nvim/data/schema.json	/^      "description": "Text of error sign",$/;"	s	object:properties.diagnostic.errorSign
description	plugged/coc.nvim/data/schema.json	/^      "description": "Text of hint sign",$/;"	s	object:properties.diagnostic.hintSign
description	plugged/coc.nvim/data/schema.json	/^      "description": "Text of info sign",$/;"	s	object:properties.diagnostic.infoSign
description	plugged/coc.nvim/data/schema.json	/^      "description": "Text of warning sign",$/;"	s	object:properties.diagnostic.warningSign
description	plugged/coc.nvim/data/schema.json	/^      "description": "Text shown in statusline to indicate snippet session is activated."$/;"	s	object:properties.coc.preferences.snippetStatusText
description	plugged/coc.nvim/data/schema.json	/^      "description": "The character used as first character in prompt line"$/;"	s	object:properties.list.indicator
description	plugged/coc.nvim/data/schema.json	/^      "description": "The character used in abbr of complete item to indicate the item could be /;"	s	object:properties.suggest.snippetIndicator
description	plugged/coc.nvim/data/schema.json	/^      "description": "The number of non empty lines from a diagnostic to display",$/;"	s	object:properties.diagnostic.virtualTextLines
description	plugged/coc.nvim/data/schema.json	/^      "description": "The prefix added virtual text diagnostics",$/;"	s	object:properties.diagnostic.virtualTextPrefix
description	plugged/coc.nvim/data/schema.json	/^      "description": "The proxy setting to use. If not set, will be inherited from the `http_pro/;"	s	object:properties.http.proxy
description	plugged/coc.nvim/data/schema.json	/^      "description": "The text that will mark a line end from the diagnostic message",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
description	plugged/coc.nvim/data/schema.json	/^      "description": "The value to send as the `Proxy-Authorization` header for every network re/;"	s	object:properties.http.proxyAuthorization
description	plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for completion, in miliseconds."$/;"	s	object:properties.suggest.timeout
description	plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for trigger signature help, in miliseconds."$/;"	s	object:properties.signature.triggerSignatureWait
description	plugged/coc.nvim/data/schema.json	/^      "description": "Trigger completion after InsertEnter, auto trigger should be 'always' to e/;"	s	object:properties.suggest.triggerAfterInsertEnter
description	plugged/coc.nvim/data/schema.json	/^      "description": "Trigger format on type when insert leave by send \\n to the server.",$/;"	s	object:properties.coc.preferences.formatOnInsertLeave
description	plugged/coc.nvim/data/schema.json	/^      "description": "Trim same extension on file completion",$/;"	s	object:properties.coc.source.file.trimSameExts
description	plugged/coc.nvim/data/schema.json	/^      "description": "Update locationlist on diagnostics change, only works with locationlist op/;"	s	object:properties.diagnostic.locationlistUpdate
description	plugged/coc.nvim/data/schema.json	/^      "description": "Use Ale for display diagnostics in vim, will disable coc for display diagn/;"	s	object:properties.diagnostic.displayByAle
description	plugged/coc.nvim/data/schema.json	/^      "description": "Use NeoVim virtual text to display diagnostics",$/;"	s	object:properties.diagnostic.virtualText
description	plugged/coc.nvim/data/schema.json	/^      "description": "Use prompt buffer in float window for user input, works on neovim >= 0.4.0/;"	s	object:properties.coc.preferences.promptInput
description	plugged/coc.nvim/data/schema.json	/^      "description": "Use vim's quickfix list for jump locations,\\n need restart on change.",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
description	plugged/coc.nvim/data/schema.json	/^      "description": "Use vsplit for preview window."$/;"	s	object:properties.list.previewSplitRight
description	plugged/coc.nvim/data/schema.json	/^      "description": "Used for filter diagnostics by diagnostic severity.",$/;"	s	object:properties.diagnostic.level
description	plugged/coc.nvim/data/schema.json	/^      "description": "Wait time between text change and completion start, cancel completion when/;"	s	object:properties.suggest.triggerCompletionWait
description	plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, add function signature to user_data.signature to support ech/;"	s	object:properties.suggest.echodocSupport
description	plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, completeopt is not overriden, auto completion will be disabl/;"	s	object:properties.suggest.keepCompleteopt
description	plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, show all diagnostics of current line if there are none at th/;"	s	object:properties.diagnostic.checkCurrentLine
description	plugged/coc.nvim/data/schema.json	/^      "description": "When to enable show messages of diagnostics.",$/;"	s	object:properties.diagnostic.enableMessage
description	plugged/coc.nvim/data/schema.json	/^      "description": "Where to show the detail text of CompleteItem from LS.",$/;"	s	object:properties.suggest.detailField
description	plugged/coc.nvim/data/schema.json	/^      "description": "Whether to align lists in columns, default: `false`"$/;"	s	object:properties.list.alignColumns
description	plugged/coc.nvim/data/schema.json	/^      "description": "Whether to show the diagnostic code in the list.",$/;"	s	object:properties.list.source.diagnostics.includeCode
description	plugged/coc.nvim/data/schema.json	/^      "description": "executable path for https:\/\/facebook.github.io\/watchman\/, detected fro/;"	s	object:properties.coc.preferences.watchmanPath
description	plugged/coc.nvim/data/schema.json	/^  "description": "Configuration file for coc.nvim",$/;"	s
description	plugged/coc.nvim/package.json	/^  "description": "LSP based intellisense engine for neovim & vim8.",$/;"	s
detached	plugged/coc.nvim/data/schema.json	/^        "detached": {$/;"	o	object:definitions.languageServerCommand.properties
detect_filetypes	plugged/vim-polyglot/scripts/build	/^def detect_filetypes(glob)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
detect_filetypes_str	plugged/vim-polyglot/scripts/build	/^def detect_filetypes_str(contents)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
dev	plugged/vim-polyglot/Makefile	/^dev:$/;"	t
devDependencies	plugged/coc.nvim/package.json	/^  "devDependencies": {},$/;"	o
diagnostic.checkCurrentLine	plugged/coc.nvim/data/schema.json	/^    "diagnostic.checkCurrentLine": {$/;"	o	object:properties
diagnostic.displayByAle	plugged/coc.nvim/data/schema.json	/^    "diagnostic.displayByAle": {$/;"	o	object:properties
diagnostic.enable	plugged/coc.nvim/data/schema.json	/^    "diagnostic.enable": {$/;"	o	object:properties
diagnostic.enableHighlightLineNumber	plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableHighlightLineNumber": {$/;"	o	object:properties
diagnostic.enableMessage	plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableMessage": {$/;"	o	object:properties
diagnostic.enableSign	plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableSign": {$/;"	o	object:properties
diagnostic.errorSign	plugged/coc.nvim/data/schema.json	/^    "diagnostic.errorSign": {$/;"	o	object:properties
diagnostic.filetypeMap	plugged/coc.nvim/data/schema.json	/^    "diagnostic.filetypeMap": {$/;"	o	object:properties
diagnostic.format	plugged/coc.nvim/data/schema.json	/^    "diagnostic.format": {$/;"	o	object:properties
diagnostic.highlightOffset	plugged/coc.nvim/data/schema.json	/^    "diagnostic.highlightOffset": {$/;"	o	object:properties
diagnostic.hintSign	plugged/coc.nvim/data/schema.json	/^    "diagnostic.hintSign": {$/;"	o	object:properties
diagnostic.infoSign	plugged/coc.nvim/data/schema.json	/^    "diagnostic.infoSign": {$/;"	o	object:properties
diagnostic.level	plugged/coc.nvim/data/schema.json	/^    "diagnostic.level": {$/;"	o	object:properties
diagnostic.locationlistUpdate	plugged/coc.nvim/data/schema.json	/^    "diagnostic.locationlistUpdate": {$/;"	o	object:properties
diagnostic.maxWindowHeight	plugged/coc.nvim/data/schema.json	/^    "diagnostic.maxWindowHeight": {$/;"	o	object:properties
diagnostic.maxWindowWidth	plugged/coc.nvim/data/schema.json	/^    "diagnostic.maxWindowWidth": {$/;"	o	object:properties
diagnostic.messageDelay	plugged/coc.nvim/data/schema.json	/^    "diagnostic.messageDelay": {$/;"	o	object:properties
diagnostic.messageTarget	plugged/coc.nvim/data/schema.json	/^    "diagnostic.messageTarget": {$/;"	o	object:properties
diagnostic.refreshAfterSave	plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshAfterSave": {$/;"	o	object:properties
diagnostic.refreshOnInsertMode	plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshOnInsertMode": {$/;"	o	object:properties
diagnostic.separateRelatedInformationAsDiagnostics	plugged/coc.nvim/data/schema.json	/^    "diagnostic.separateRelatedInformationAsDiagnostics": {$/;"	o	object:properties
diagnostic.showDeprecated	plugged/coc.nvim/data/schema.json	/^    "diagnostic.showDeprecated": {$/;"	o	object:properties
diagnostic.showUnused	plugged/coc.nvim/data/schema.json	/^    "diagnostic.showUnused": {$/;"	o	object:properties
diagnostic.signPriority	plugged/coc.nvim/data/schema.json	/^    "diagnostic.signPriority": {$/;"	o	object:properties
diagnostic.virtualText	plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualText": {$/;"	o	object:properties
diagnostic.virtualTextCurrentLineOnly	plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextCurrentLineOnly": {$/;"	o	object:properties
diagnostic.virtualTextLineSeparator	plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLineSeparator": {$/;"	o	object:properties
diagnostic.virtualTextLines	plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLines": {$/;"	o	object:properties
diagnostic.virtualTextPrefix	plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextPrefix": {$/;"	o	object:properties
diagnostic.warningSign	plugged/coc.nvim/data/schema.json	/^    "diagnostic.warningSign": {$/;"	o	object:properties
dialog.confirmKey	plugged/coc.nvim/data/schema.json	/^    "dialog.confirmKey": {$/;"	o	object:properties
dialog.floatBorderHighlight	plugged/coc.nvim/data/schema.json	/^    "dialog.floatBorderHighlight": {$/;"	o	object:properties
dialog.floatHighlight	plugged/coc.nvim/data/schema.json	/^    "dialog.floatHighlight": {$/;"	o	object:properties
dialog.maxHeight	plugged/coc.nvim/data/schema.json	/^    "dialog.maxHeight": {$/;"	o	object:properties
dialog.maxWidth	plugged/coc.nvim/data/schema.json	/^    "dialog.maxWidth": {$/;"	o	object:properties
dialog.pickerButtonShortcut	plugged/coc.nvim/data/schema.json	/^    "dialog.pickerButtonShortcut": {$/;"	o	object:properties
dialog.pickerButtons	plugged/coc.nvim/data/schema.json	/^    "dialog.pickerButtons": {$/;"	o	object:properties
did_c_syn_inits	plugged/vim-polyglot/syntax/llvm.vim	/^    let did_c_syn_inits = 1$/;"	v
did_c_syn_inits	plugged/vim-polyglot/syntax/tablegen.vim	/^    let did_c_syn_inits = 1$/;"	v
did_cql_syn_inits	plugged/vim-polyglot/syntax/cql.vim	/^    let did_cql_syn_inits = 1$/;"	v
did_cry_syntax_inits	plugged/vim-polyglot/syntax/cryptol.vim	/^    let did_cry_syntax_inits = 1$/;"	v
did_css_syn_inits	plugged/vim-polyglot/syntax/stylus.vim	/^    let did_css_syn_inits = 1$/;"	v
did_eighth_syntax_inits	plugged/vim-polyglot/syntax/8th.vim	/^    let did_eighth_syntax_inits=1$/;"	v
did_fs_syntax_inits	plugged/vim-polyglot/syntax/fsharp.vim	/^        let did_fs_syntax_inits = 1$/;"	v
did_gnuplot_syntax_inits	plugged/vim-polyglot/syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
did_haxe_syn_inits	plugged/vim-polyglot/syntax/haxe.vim	/^    let did_haxe_syn_inits = 1$/;"	v
did_install_default_menus	plugged/vim-polyglot/extras/menu.vim	/^let did_install_default_menus = 1$/;"	v
did_install_syntax_menu	plugged/vim-polyglot/extras/menu.vim	/^  let did_install_syntax_menu = 1$/;"	v
did_javascript_syn_inits	plugged/vim-polyglot/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged/vim-polyglot/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged/vim-polyglot/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_lily_syn_inits	plugged/vim-polyglot/syntax/lilypond.vim	/^    let did_lily_syn_inits = 1$/;"	v
did_load_filetypes	plugged/vim-polyglot/extras/filetype.vim	/^let did_load_filetypes = 1$/;"	v
did_load_filetypes	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let did_load_filetypes = 1$/;"	v
did_load_polyglot	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let did_load_polyglot = 1$/;"	v
did_lua_syn_inits	plugged/vim-polyglot/syntax/lua.vim	/^    let did_lua_syn_inits = 1$/;"	v
did_mako_syn_inits	plugged/vim-polyglot/syntax/mako.vim	/^    let did_mako_syn_inits = 1$/;"	v
did_mmp_syntax_inits	plugged/vim-polyglot/syntax/mmp.vim	/^  let did_mmp_syntax_inits=1$/;"	v
did_nim_syn_inits	plugged/vim-polyglot/syntax/nim.vim	/^    let did_nim_syn_inits = 1$/;"	v
did_octave_syntax_inits	plugged/vim-polyglot/syntax/octave.vim	/^    let did_octave_syntax_inits = 1$/;"	v
did_proto_syn_inits	plugged/vim-polyglot/syntax/fbs.vim	/^    let did_proto_syn_inits = 1$/;"	v
did_proto_syn_inits	plugged/vim-polyglot/syntax/proto.vim	/^    let did_proto_syn_inits = 1$/;"	v
did_ps1_syn_inits	plugged/vim-polyglot/syntax/ps1.vim	/^		let did_ps1_syn_inits = 1$/;"	v
did_python_syn_inits	plugged/vim-polyglot/syntax/python.vim	/^        let did_python_syn_inits = 1$/;"	v
did_qml_syn_inits	plugged/vim-polyglot/syntax/qml.vim	/^    let did_qml_syn_inits = 1$/;"	v
did_racket_syntax_inits	plugged/vim-polyglot/syntax/racket.vim	/^    let did_racket_syntax_inits = 1$/;"	v
did_raku_syntax_inits	plugged/vim-polyglot/syntax/raku.vim	/^        let did_raku_syntax_inits = 1$/;"	v
did_reva_syntax_inits	plugged/vim-polyglot/syntax/reva.vim	/^    let did_reva_syntax_inits=1$/;"	v
did_rhelp_syntax_inits	plugged/vim-polyglot/syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
did_sexplib_syntax_inits	plugged/vim-polyglot/syntax/sexplib.vim	/^    let did_sexplib_syntax_inits = 1$/;"	v
did_tapverboseoutput_syntax_inits	plugged/vim-polyglot/syntax/tap.vim	/^  let did_tapverboseoutput_syntax_inits = 1$/;"	v
did_thrift_syn_inits	plugged/vim-polyglot/syntax/thrift.vim	/^    let did_thrift_syn_inits = 1$/;"	v
did_toolbar_tmenu	plugged/vim-polyglot/extras/menu.vim	/^  let did_toolbar_tmenu = 1$/;"	v
did_tptp_syntax_inits	plugged/vim-polyglot/syntax/tptp.vim	/^    let did_tptp_syntax_inits = 1$/;"	v
did_twig_syn_inits	plugged/vim-polyglot/syntax/twig.vim	/^    let did_twig_syn_inits = 1$/;"	v
did_txt_syn_inits	plugged/vim-polyglot/syntax/textile.vim	/^        let did_txt_syn_inits = 1$/;"	v
did_typescript_hilink	plugged/vim-polyglot/syntax/common.vim	/^let did_typescript_hilink = 1$/;"	v
did_u_syntax_inits	plugged/vim-polyglot/syntax/unison.vim	/^    let did_u_syntax_inits = 1$/;"	v
did_vbnet_syntax_inits	plugged/vim-polyglot/syntax/vbnet.vim	/^        let did_vbnet_syntax_inits = 1$/;"	v
did_velocity_syn_inits	plugged/vim-polyglot/syntax/velocity.vim	/^    let did_velocity_syn_inits = 1$/;"	v
disableCompletion	plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {$/;"	o	object:definitions.languageServerBase.properties
disableCompletion	plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerCommand.properties
disableCompletion	plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerModule.properties
disableCompletion	plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerSocket.properties
disableDiagnostics	plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {$/;"	o	object:definitions.languageServerBase.properties
disableDiagnostics	plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerCommand.properties
disableDiagnostics	plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerModule.properties
disableDiagnostics	plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerSocket.properties
disableDynamicRegister	plugged/coc.nvim/data/schema.json	/^        "disableDynamicRegister": {$/;"	o	object:definitions.languageServerBase.properties
disableDynamicRegister	plugged/coc.nvim/data/schema.json	/^        "disableDynamicRegister": {},$/;"	o	object:definitions.languageServerCommand.properties
disableDynamicRegister	plugged/coc.nvim/data/schema.json	/^        "disableDynamicRegister": {},$/;"	o	object:definitions.languageServerModule.properties
disableDynamicRegister	plugged/coc.nvim/data/schema.json	/^        "disableDynamicRegister": {},$/;"	o	object:definitions.languageServerSocket.properties
disableSnippetCompletion	plugged/coc.nvim/data/schema.json	/^        "disableSnippetCompletion": {$/;"	o	object:definitions.languageServerBase.properties
disableSnippetCompletion	plugged/coc.nvim/data/schema.json	/^        "disableSnippetCompletion": {},$/;"	o	object:definitions.languageServerCommand.properties
disableSnippetCompletion	plugged/coc.nvim/data/schema.json	/^        "disableSnippetCompletion": {},$/;"	o	object:definitions.languageServerModule.properties
disableSnippetCompletion	plugged/coc.nvim/data/schema.json	/^        "disableSnippetCompletion": {},$/;"	o	object:definitions.languageServerSocket.properties
disableWorkspaceFolders	plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {$/;"	o	object:definitions.languageServerBase.properties
disableWorkspaceFolders	plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerCommand.properties
disableWorkspaceFolders	plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerModule.properties
disableWorkspaceFolders	plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerSocket.properties
document_structure	plugged/vim-polyglot/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
document_structure	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'doc/;"	v
dosbatch_cmdextversion	plugged/vim-polyglot/syntax/dosbatch.vim	/^  let dosbatch_cmdextversion = 2$/;"	v
download	plugged/vim-polyglot/scripts/build	/^def download(packages)$/;"	f	method:copy_file
dpub_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
dpub_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dp/;"	v
drag_and_drop_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
each_hash	plugged/vim-polyglot/scripts/build	/^def each_hash(data, &block)$/;"	f
ecrystal#SetSubtype	plugged/vim-polyglot/autoload/ecrystal.vim	/^function! ecrystal#SetSubtype() abort$/;"	f
elixir#indent	plugged/vim-polyglot/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
elixir#indent#handle_follow_prev_nb	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(context)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(context)$/;"	f
elixir#indent#handle_inside_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_block(context)$/;"	f
elixir#indent#handle_inside_generic_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(context)$/;"	f
elixir#indent#handle_starts_with_binary_operator	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(context)$/;"	f
elixir#indent#handle_starts_with_end	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(context)$/;"	f
elixir#indent#handle_starts_with_pipe	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(context)$/;"	f
elixir#indent#handle_starts_with_string_continuation	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_string_continuation(context)$/;"	f
elixir#indent#handle_top_of_file	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(context)$/;"	f
elixir#indent#indent	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
elixir#indent#searchpair_back_skip	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
elixir#util#get_filename	plugged/vim-polyglot/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
enable	plugged/coc.nvim/data/schema.json	/^        "enable": {$/;"	o	object:definitions.languageServerBase.properties
enable	plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerCommand.properties
enable	plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerModule.properties
enable	plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerSocket.properties
engines	plugged/coc.nvim/package.json	/^  "engines": {$/;"	o
enum	plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	a	object:definitions.languageServerBase.properties.revealOutputChannelOn
enum	plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	a	object:definitions.languageServerModule.properties.transport
enum	plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	a	object:definitions.languageServerBase.properties.trace.server
enum	plugged/coc.nvim/data/schema.json	/^        "enum": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	a	object:properties.suggest.detailField
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	a	object:properties.diagnostic.enableMessage
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	a	object:properties.suggest.autoTrigger
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	a	object:properties.coc.preferences.extensionUpdateCheck
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	a	object:properties.diagnostic.messageTarget
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"],$/;"	a	object:properties.coc.preferences.jumpCommand
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	a	object:properties.signature.target
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["full", "short", "filename", "hidden"],$/;"	a	object:properties.list.source.diagnostics.pathFormat
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	a	object:properties.diagnostic.level
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["length", "alphabetical"]$/;"	a	object:properties.suggest.defaultSortMethod
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	a	object:properties.coc.preferences.messageLevel
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	a	object:properties.coc.preferences.hoverTarget
enum	plugged/coc.nvim/data/schema.json	/^      "enum": ["quickfix", "location", "none"]$/;"	a	object:properties.coc.preferences.listOfWorkspaceEdit
enum,enumeration names	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?enum[ \\t]+([a-zA-Z0-9_]+)\/\\2\/g,enum,enumeration names\/$/;"	k	langdef:Rust
enumMember	plugged/coc.nvim/data/schema.json	/^        "enumMember": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
enums	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*enum[ \\t]+([a-zA-Z0-9_]+)\/\\2\/e,enums\/$/;"	k	langdef:typescript
env	plugged/coc.nvim/data/schema.json	/^        "env": {$/;"	o	object:definitions.languageServerBase.properties
env	plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerCommand.properties
env	plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerModule.properties
eregex#toggle	plugged/vim-polyglot/scripts/eregex.vim	/^function! eregex#toggle(...)$/;"	f
event	plugged/coc.nvim/data/schema.json	/^        "event": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
event_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
event_handler_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythro/;"	v
except	plugged/vim-polyglot/scripts/build	/^def except(hash, *keys)$/;"	f
execArgv	plugged/coc.nvim/data/schema.json	/^        "execArgv": {$/;"	o	object:definitions.languageServerModule.properties
expand_all	plugged/vim-polyglot/scripts/build	/^def expand_all(pattern, all = false)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
explorer.file.root.template	coc-settings.json	/^  "explorer.file.root.template": "[icon] [git] [hidden & 1][root]",$/;"	s
explorer.file.showHiddenFiles	coc-settings.json	/^  "explorer.file.showHiddenFiles": false,$/;"	b
explorer.icon.enableNerdfont	coc-settings.json	/^  "explorer.icon.enableNerdfont": false,$/;"	b
explorer.icon.enableVimDevicons	coc-settings.json	/^  "explorer.icon.enableVimDevicons": false,$/;"	b
explorer.keyMappings.global	coc-settings.json	/^  "explorer.keyMappings.global": {$/;"	o
explorer.previewAction.onHover	coc-settings.json	/^  "explorer.previewAction.onHover": false,$/;"	b
explorer.width	coc-settings.json	/^  "explorer.width": 30,$/;"	n
extract	plugged/vim-polyglot/scripts/build	/^def extract(packages)$/;"	f	method:copy_file.rules_to_code.rule_to_code
field	plugged/coc.nvim/data/schema.json	/^        "field": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
file	plugged/coc.nvim/data/schema.json	/^        "file": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
filename	plugged/vim-polyglot/indent/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	plugged/vim-polyglot/indent/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	plugged/vim-polyglot/indent/sql.vim	/^let filename = 'sqlanywhere'$/;"	v
filename	plugged/vim-polyglot/syntax/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	plugged/vim-polyglot/syntax/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	plugged/vim-polyglot/syntax/sql.vim	/^let filename = 'sqloracle'$/;"	v
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/extras/filetype.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/tests/native.vim	/^  augroup filetypedetect$/;"	a
filetypes	plugged/coc.nvim/data/schema.json	/^        "filetypes": {$/;"	o	object:definitions.languageServerBase.properties
filetypes	plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerCommand.properties
filetypes	plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerModule.properties
filetypes	plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerSocket.properties
fish#Complete	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Complete(findstart, base)$/;"	f
fish#Fold	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Fold()$/;"	f
fish#Format	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Format()$/;"	f
fish#Indent	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Indent()$/;"	f
fish#errorformat	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#errorformat()$/;"	f
fix_quotes	plugged/vim-polyglot/scripts/import_vim	/^def fix_quotes(a)$/;"	f
flow_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', /;"	v
folder	plugged/coc.nvim/data/schema.json	/^        "folder": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
foobar	plugged/vim-polyglot/tests/indent/2.1/test.js	/^function foobar() {$/;"	f
foobar	plugged/vim-polyglot/tests/indent/4.1/test.js	/^function foobar() {$/;"	f
formatterPriority	plugged/coc.nvim/data/schema.json	/^        "formatterPriority": {$/;"	o	object:definitions.languageServerBase.properties
formatterPriority	plugged/coc.nvim/data/schema.json	/^        "formatterPriority": {},$/;"	o	object:definitions.languageServerCommand.properties
formatterPriority	plugged/coc.nvim/data/schema.json	/^        "formatterPriority": {},$/;"	o	object:definitions.languageServerModule.properties
formatterPriority	plugged/coc.nvim/data/schema.json	/^        "formatterPriority": {},$/;"	o	object:definitions.languageServerSocket.properties
fortran_free_source	plugged/vim-polyglot/syntax/sinda.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	plugged/vim-polyglot/syntax/tak.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	plugged/vim-polyglot/syntax/trasys.vim	/^let fortran_free_source=1$/;"	v
fsharp#OnCursorMove	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#OnCursorMove()$/;"	f
fsharp#OnFSProjSave	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#OnFSProjSave()$/;"	f
fsharp#documentation	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#documentation(filePath, line, character, cont)$/;"	f
fsharp#getServerConfig	plugged/vim-polyglot/autoload/fsharp.vim	/^function! g:fsharp#getServerConfig()$/;"	f
fsharp#loadProject	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#loadProject(...)$/;"	f
fsharp#loadWorkspaceAuto	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#loadWorkspaceAuto()$/;"	f
fsharp#openFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#openFsi(returnFocus)$/;"	f
fsharp#quitFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#quitFsi()$/;"	f
fsharp#reloadProjects	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#reloadProjects()$/;"	f
fsharp#resetFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#resetFsi()$/;"	f
fsharp#sendAllToFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendAllToFsi()$/;"	f
fsharp#sendFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendFsi(text)$/;"	f
fsharp#sendLineToFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendLineToFsi()$/;"	f
fsharp#sendSelectionToFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendSelectionToFsi() range$/;"	f
fsharp#showF1Help	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showF1Help()$/;"	f
fsharp#showSignature	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showSignature()$/;"	f
fsharp#showTooltip	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showTooltip()$/;"	f
fsharp#toSnakeCase	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#toSnakeCase(str)$/;"	f
fsharp#toggleFsi	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#toggleFsi()$/;"	f
fsharp#updateFSAC	plugged/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#updateFSAC(...)$/;"	f
fsharp#updateServerConfig	plugged/vim-polyglot/autoload/fsharp.vim	/^function! g:fsharp#updateServerConfig()$/;"	f
function	plugged/coc.nvim/data/schema.json	/^        "function": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
function	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*function[[:space:]]*([a-zA-Z0-9_:]*)[[:space:]]*\/\\1\/u,function\/$/;"	k	langdef:puppet
functions	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*function[ \\t]+([a-zA-Z0-9_]+)\/\\2\/f,functions\/$/;"	k	langdef:typescript
functions,function definitions	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(#\\[[^\\]]\\][ \\t]*)*(pub[ \\t]+)?(extern[ \\t]+)?("[^"]+"[ \\t]+)?(uns/;"	k	langdef:Rust
fzf :heart: vim	plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf#complete	plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#vim#_buflisted_sorted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
fzf#vim#buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#complete	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf_buffers	plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_gitignore#run	plugged/vim-polyglot/autoload/fzf_gitignore.vim	/^function! fzf_gitignore#run() abort$/;"	f
g:AutoPairs	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":/;"	v
g:AutoPairsCenterLine	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsLoaded	plugged/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairsMapBS	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsMapCh	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapSpace	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsMoveCharacter	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsMultilineClose	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcutFastWrap	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutToggle	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsSmartQuotes	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
g:AutoPairsWildClosedPair	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsWildClosedPair = ''$/;"	v
g:EasyMotion_smartcase	init.vim	/^let g:EasyMotion_smartcase = 1$/;"	v
g:Ferm_SpecialDelimiters	plugged/vim-polyglot/syntax/ferm.vim	/^    let   g:Ferm_SpecialDelimiters = g:fermSpecialDelimiters$/;"	v
g:NERDCustomDelimiters	plugged/vim-polyglot/ftplugin/caddyfile.vim	/^	let g:NERDCustomDelimiters = {'caddyfile': s:delimiters}$/;"	v
g:NERDCustomDelimiters	plugged/vim-polyglot/ftplugin/hcl.vim	/^        let g:NERDCustomDelimiters.hcl = s:delims$/;"	v
g:NERDCustomDelimiters	plugged/vim-polyglot/ftplugin/hcl.vim	/^    let g:NERDCustomDelimiters = { 'hcl': s:delims }$/;"	v
g:NERDDelimiterMap	plugged/vim-polyglot/ftplugin/caddyfile.vim	/^		let g:NERDDelimiterMap.caddyfile = s:delimiters$/;"	v
g:NERDDelimiterMap	plugged/vim-polyglot/ftplugin/hcl.vim	/^        let g:NERDDelimiterMap.hcl = s:delims$/;"	v
g:TextileBrowser	plugged/vim-polyglot/ftplugin/textile.vim	/^    let g:TextileBrowser='Safari'$/;"	v
g:__fzf_command	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__vital_color_echo_already_highlighted	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^        let g:__vital_color_echo_already_highlighted = 1$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_yarp_py	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py = 'python2'$/;"	v
g:_yarp_py	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py = pyeval('sys.executable')$/;"	v
g:_yarp_py	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^    let g:_yarp_py = expand(get(g:, 'python_host_prog', ''), 1)$/;"	v
g:_yarp_py3	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py3 = 'python3'$/;"	v
g:_yarp_py3	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py3 = py3eval('sys.executable')$/;"	v
g:_yarp_py3	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^    let g:_yarp_py3 = expand(get(g:, 'python3_host_prog', ''), 1)$/;"	v
g:ada#Comment	plugged/vim-polyglot/autoload/ada.vim	/^let g:ada#Comment	   = "\\\\v^(\\"[^\\"]*\\"|'.'|[^\\"']){-}\\\\zs\\\\s*--.*"$/;"	v
g:ada#Ctags_Kinds	plugged/vim-polyglot/autoload/ada.vim	/^let g:ada#Ctags_Kinds = {$/;"	v
g:ada#DotWordRegex	plugged/vim-polyglot/autoload/ada.vim	/^let g:ada#DotWordRegex	   = '\\a\\w*\\(\\_s*\\.\\_s*\\a\\w*\\)*'$/;"	v
g:ada#Keywords	plugged/vim-polyglot/autoload/ada.vim	/^	let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	plugged/vim-polyglot/autoload/ada.vim	/^       let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	plugged/vim-polyglot/autoload/ada.vim	/^    let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	plugged/vim-polyglot/autoload/ada.vim	/^let g:ada#Keywords	   = []$/;"	v
g:ada#WordRegex	plugged/vim-polyglot/autoload/ada.vim	/^let g:ada#WordRegex	   = '\\a\\w*'$/;"	v
g:ada_	plugged/vim-polyglot/autoload/ada.vim	/^      let g:ada_{a:option}=1$/;"	v
g:ada_default_compiler	plugged/vim-polyglot/ftplugin/ada.vim	/^      let g:ada_default_compiler = 'decada'$/;"	v
g:ada_default_compiler	plugged/vim-polyglot/ftplugin/ada.vim	/^      let g:ada_default_compiler = 'gnat'$/;"	v
g:airline#extensions#branch#enabled	themes/airline.vim	/^let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#hunks#enabled	themes/airline.vim	/^let g:airline#extensions#hunks#enabled=1$/;"	v
g:airline#extensions#tabline#enabled	themes/airline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#show_buffers	themes/airline.vim	/^let g:airline#extensions#tabline#show_buffers = 1$/;"	v
g:airline_left_alt_sep	themes/airline.vim	/^let g:airline_left_alt_sep = ''$/;"	v
g:airline_left_sep	themes/airline.vim	/^let g:airline_left_sep = ''$/;"	v
g:airline_powerline_fonts	themes/airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_alt_sep	themes/airline.vim	/^let g:airline_right_alt_sep = ''$/;"	v
g:airline_right_sep	themes/airline.vim	/^let g:airline_right_sep = ''$/;"	v
g:airline_symbols	themes/airline.vim	/^	let g:airline_symbols = {}$/;"	v
g:airline_symbols	themes/airline.vim	/^let g:airline_symbols.space = "\\ua0"$/;"	v
g:airline_theme	themes/airline.vim	/^let g:airline_theme = 'base16'$/;"	v
g:aria_attributes_complete	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^        let g:aria_attributes_complete = 0$/;"	v
g:aria_attributes_complete	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
g:beginword	plugged/vim-polyglot/indent/cobol.vim	/^            let g:beginword = beginword$/;"	v
g:bmenu_max_pathlen	plugged/vim-polyglot/extras/menu.vim	/^  let g:bmenu_max_pathlen = 35$/;"	v
g:bmenu_priority	plugged/vim-polyglot/extras/menu.vim	/^    let g:bmenu_priority = a:1$/;"	v
g:c_syntax_for_h	plugged/vim-polyglot/tests/extensions.vim	/^let g:c_syntax_for_h = 1$/;"	v
g:cabal_indent_section	plugged/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 2$/;"	v
g:cabal_indent_section	plugged/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 4$/;"	v
g:ch_syntax_for_h	plugged/vim-polyglot/tests/extensions.vim	/^let g:ch_syntax_for_h = 1$/;"	v
g:clojure_align_multiline_strings	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
g:clojure_fuzzy_indent	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_blacklist	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_fuzzy_indent_patterns	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_maxlines	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_special_indent_words	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protoco/;"	v
g:cobol_inline_comment	plugged/vim-polyglot/syntax/cobol.vim	/^   let g:cobol_inline_comment=0$/;"	v
g:coc#_context	plugged/coc.nvim/autoload/coc.vim	/^    let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}$/;"	v
g:coc#_context	plugged/coc.nvim/autoload/coc.vim	/^  let g:coc#_context = {$/;"	v
g:coc#_context	plugged/coc.nvim/autoload/coc.vim	/^let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}$/;"	v
g:coc_enabled	plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 0$/;"	v
g:coc_enabled	plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 1$/;"	v
g:coc_global_extensions	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_last_float_win	plugged/coc.nvim/autoload/coc/float.vim	/^  let g:coc_last_float_win = winid$/;"	v
g:coc_last_hover_message	plugged/coc.nvim/autoload/coc/util.vim	/^  let g:coc_last_hover_message = a:msg$/;"	v
g:coc_selected_text	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_service_initialized	plugged/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_user_config	plugged/coc.nvim/autoload/coc.vim	/^  let g:coc_user_config[a:section] = a:value$/;"	v
g:coc_user_config	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_vim_commands	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:coc_workspace_initialized	plugged/coc.nvim/plugin/coc.vim	/^let g:coc_workspace_initialized = 0$/;"	v
g:coffee_cake	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_cake = 'cake'$/;"	v
g:coffee_cake_options	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_cake_options = ''$/;"	v
g:coffee_compiler	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_compiler = 'coffee'$/;"	v
g:coffee_lint_options	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_lint_options = ''$/;"	v
g:coffee_linter	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_linter = 'coffeelint'$/;"	v
g:coffee_make_options	plugged/vim-polyglot/autoload/coffee.vim	/^    let g:coffee_make_options = ''$/;"	v
g:crystal#indent#block_continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#block_continuation_regex =$/;"	v
g:crystal#indent#block_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#block_regex =$/;"	v
g:crystal#indent#bracket_continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#bracket_continuation_regex =$/;"	v
g:crystal#indent#bracket_switch_continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#bracket_switch_continuation_regex =$/;"	v
g:crystal#indent#continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#continuation_regex =$/;"	v
g:crystal#indent#crystal_deindent_keywords	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_deindent_keywords =$/;"	v
g:crystal#indent#crystal_indent_keywords	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_indent_keywords =$/;"	v
g:crystal#indent#crystal_macro_deindent_keywords	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_macro_deindent_keywords =$/;"	v
g:crystal#indent#crystal_macro_indent_keywords	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_macro_indent_keywords =$/;"	v
g:crystal#indent#curr_line_callbacks	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#curr_line_callbacks = [$/;"	v
g:crystal#indent#dot_continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#dot_continuation_regex = '\\.'.g:crystal#indent#eol$/;"	v
g:crystal#indent#end_end_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_end_regex =$/;"	v
g:crystal#indent#end_middle_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_middle_regex =$/;"	v
g:crystal#indent#end_start_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_start_regex =$/;"	v
g:crystal#indent#eol	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#eol = '\\ze\\s*\\%(#.*\\)\\=\\%(\\_$\\|;\\)'$/;"	v
g:crystal#indent#hanging_assignment_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#hanging_assignment_regex =$/;"	v
g:crystal#indent#leading_operator_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#leading_operator_regex = g:crystal#indent#sol.'\\.'$/;"	v
g:crystal#indent#link_attribute_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#link_attribute_regex =$/;"	v
g:crystal#indent#macro_end_end_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_end_regex =$/;"	v
g:crystal#indent#macro_end_middle_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_middle_regex =$/;"	v
g:crystal#indent#macro_end_start_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_start_regex =$/;"	v
g:crystal#indent#macro_hanging_assignment_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_hanging_assignment_regex =$/;"	v
g:crystal#indent#msl_callbacks	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#msl_callbacks = [$/;"	v
g:crystal#indent#non_bracket_continuation_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#non_bracket_continuation_regex =$/;"	v
g:crystal#indent#operator_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#operator_regex =$/;"	v
g:crystal#indent#prev_line_callbacks	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#prev_line_callbacks = [$/;"	v
g:crystal#indent#skip_expr	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#skip_expr =$/;"	v
g:crystal#indent#sol	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#sol = '\\%(\\_^\\|;\\)\\s*\\zs'$/;"	v
g:crystal#indent#syng_delim	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_delim =$/;"	v
g:crystal#indent#syng_strcom	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_strcom =$/;"	v
g:crystal#indent#syng_strcomdelim	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_strcomdelim =$/;"	v
g:crystal#indent#syng_string	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_string =$/;"	v
g:crystal#indent#type_declaration_regex	plugged/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#type_declaration_regex =$/;"	v
g:crystal_auto_format	plugged/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_auto_format = get(g:, 'crystal_auto_format', 0)$/;"	v
g:crystal_compiler_command	plugged/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_compiler_command = get(g:, 'crystal_compiler_command', 'crystal')$/;"	v
g:crystal_minlines	plugged/vim-polyglot/syntax/crystal.vim	/^    let g:crystal_minlines = 500$/;"	v
g:csv_convert	plugged/vim-polyglot/autoload/csv.vim	/^    let g:csv_convert=input("Converted text, use %s for column input:\\n", convert)$/;"	v
g:csv_delim	plugged/vim-polyglot/autoload/csv.vim	/^        let g:csv_delim = _delim$/;"	v
g:csv_delim	plugged/vim-polyglot/autoload/csv.vim	/^    let g:csv_delim = delimiter$/;"	v
g:csv_highlight_column	plugged/vim-polyglot/autoload/csv.vim	/^      let g:csv_highlight_column = csv_highlight_column$/;"	v
g:csv_no_conceal	plugged/vim-polyglot/autoload/csv.vim	/^            let g:csv_no_conceal=1$/;"	v
g:csv_no_conceal	plugged/vim-polyglot/autoload/csv.vim	/^        let g:csv_no_conceal=1$/;"	v
g:csv_post_convert	plugged/vim-polyglot/autoload/csv.vim	/^    let g:csv_post_convert=input('Post convert text: ', post)$/;"	v
g:csv_pre_convert	plugged/vim-polyglot/autoload/csv.vim	/^    let g:csv_pre_convert=input('Pre convert text: ', pre)$/;"	v
g:ctags_command	plugged/vim-polyglot/extras/menu.vim	/^    let g:ctags_command = "ctags -R ."$/;"	v
g:ctags_command	plugged/vim-polyglot/extras/menu.vim	/^    let g:ctags_command = "mc vim:ctags *.*"$/;"	v
g:cucumber_languages	plugged/vim-polyglot/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:current_compiler	plugged/vim-polyglot/compiler/go.vim	/^let g:current_compiler = "go"$/;"	v
g:dart_format_on_save	plugged/vim-polyglot/autoload/dart.vim	/^    let g:dart_format_on_save = 0$/;"	v
g:dart_format_on_save	plugged/vim-polyglot/autoload/dart.vim	/^  let g:dart_format_on_save = 1$/;"	v
g:debchangelog_complete_mode	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^          let g:debchangelog_complete_mode = 'lp'$/;"	v
g:debchangelog_complete_mode	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^    let g:debchangelog_complete_mode = 'debbugs'$/;"	v
g:debchangelog_listbugs_severities	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^  let g:debchangelog_listbugs_severities = 'critical,grave,serious,important,normal,minor,wishli/;"	v
g:did_changelog_ftplugin	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^let g:did_changelog_ftplugin = 1$/;"	v
g:did_cobol_ftplugin_functions	plugged/vim-polyglot/ftplugin/cobol.vim	/^let g:did_cobol_ftplugin_functions = 1$/;"	v
g:did_coc_loaded	plugged/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:did_ocaml_switch	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
g:did_ruby_ftplugin_functions	plugged/vim-polyglot/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:eelixir_default_subtype	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:eelixir_default_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:elixir_indent_max_lookbehind	plugged/vim-polyglot/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
g:elixir_use_markdown_for_docs	plugged/vim-polyglot/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
g:eregex_backward_delim	plugged/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_backward_delim = '?'$/;"	v
g:eregex_evaluater_cmd	plugged/vim-polyglot/scripts/eregex.vim	/^    let g:eregex_evaluater_cmd = cmd$/;"	v
g:eregex_evaluater_cmd	plugged/vim-polyglot/scripts/eregex.vim	/^    let g:eregex_evaluater_cmd = globalcmd$/;"	v
g:eregex_evaluater_how_exe	plugged/vim-polyglot/scripts/eregex.vim	/^        let g:eregex_evaluater_how_exe=1$/;"	v
g:eregex_evaluater_how_exe	plugged/vim-polyglot/scripts/eregex.vim	/^    let g:eregex_evaluater_how_exe = s:eglobal_working$/;"	v
g:eregex_evaluater_how_exe	plugged/vim-polyglot/scripts/eregex.vim	/^    let g:eregex_evaluater_how_exe=2$/;"	v
g:eregex_force_case	plugged/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_force_case = 0$/;"	v
g:eregex_forward_delim	plugged/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_forward_delim = '\/'$/;"	v
g:erlang_folding	plugged/vim-polyglot/ftplugin/erlang.vim	/^	let g:erlang_folding = 0$/;"	v
g:erlang_indent_searchpair_timeout	plugged/vim-polyglot/indent/erlang.vim	/^let g:erlang_indent_searchpair_timeout = 2000$/;"	v
g:erlang_keywordprg	plugged/vim-polyglot/ftplugin/erlang.vim	/^	let g:erlang_keywordprg = 'erl -man'$/;"	v
g:erlang_unexpected_token_indent	plugged/vim-polyglot/indent/erlang.vim	/^  let g:erlang_unexpected_token_indent = -1$/;"	v
g:eruby_default_subtype	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:fennel_align_multiline_strings	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_align_multiline_strings = 0$/;"	v
g:fennel_align_subforms	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_align_subforms = 0$/;"	v
g:fennel_fuzzy_indent	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent = 1$/;"	v
g:fennel_fuzzy_indent_blacklist	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent_blacklist = []$/;"	v
g:fennel_fuzzy_indent_patterns	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent_patterns = ['^def', '^let', '^while', '^if', '^fn$', '^var$', '^case/;"	v
g:fennel_maxlines	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_maxlines = 100$/;"	v
g:fennel_special_indent_words	plugged/vim-polyglot/indent/fennel.vim	/^		let g:fennel_special_indent_words = ''$/;"	v
g:filetype_asa	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_asa = "fizfuz"$/;"	v
g:filetype_asp	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_asp = "fizfuz"$/;"	v
g:filetype_fs	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_fs = "fizfuz"$/;"	v
g:filetype_idr	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_idr = "fizfuz"$/;"	v
g:filetype_m	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_m = "fizfuz"$/;"	v
g:filetype_pl	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_pl = "fizfuz"$/;"	v
g:filetype_pm	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_pm = "fizfuz"$/;"	v
g:filetype_t	plugged/vim-polyglot/tests/extensions.vim	/^let g:filetype_t = "fizfuz"$/;"	v
g:foo	plugged/vim-polyglot/indent/cobol.vim	/^        let g:foo = s:stripped(lastclause)$/;"	v
g:fsharp#	plugged/vim-polyglot/autoload/fsharp.vim	/^            let g:fsharp#{key.snake} = key.default$/;"	v
g:fsharp#languageserver_command	plugged/vim-polyglot/autoload/fsharp.vim	/^let g:fsharp#languageserver_command =$/;"	v
g:ft_ignore_pat	plugged/vim-polyglot/extras/filetype.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ft_ignore_pat	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ftplugin_sql_objects	plugged/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_objects = 'function,procedure,event,' .$/;"	v
g:ftplugin_sql_omni_key	plugged/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key = '<C-C>'$/;"	v
g:ftplugin_sql_omni_key_left	plugged/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key_left = '<Left>'$/;"	v
g:ftplugin_sql_omni_key_right	plugged/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key_right = '<Right>'$/;"	v
g:ftplugin_sql_statements	plugged/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_statements = 'create'$/;"	v
g:fullDefMatcher	plugged/vim-polyglot/indent/scala.vim	/^let g:fullDefMatcher = '^\\s*' . s:defMatcher . '\\s\\+' . s:funcNameMatcher . '\\s*' . s:typeSp/;"	v
g:fzf#vim#buffers	plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_colors	init.vim	/^let g:fzf_colors =$/;"	v
g:fzf_layout	init.vim	/^let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8} }$/;"	v
g:go_asmfmt_autosave	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_asmfmt_autosave = a:value$/;"	v
g:go_auto_sameids	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_auto_sameids = a:value$/;"	v
g:go_auto_type_info	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_auto_type_info = a:value$/;"	v
g:go_build_tags	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_build_tags = a:value$/;"	v
g:go_debug_commands	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_debug_commands = get(g:, 'go_debug_commands', [])$/;"	v
g:go_debug_diag	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_debug_diag = a:value$/;"	v
g:go_fmt_autosave	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_fmt_autosave = a:value$/;"	v
g:go_guru_scope	plugged/vim-polyglot/autoload/go/config.vim	/^    let g:go_guru_scope = a:scope$/;"	v
g:go_lsp_log	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_lsp_log = get(g:, 'go_lsp_log', [])$/;"	v
g:go_metalinter_autosave	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_metalinter_autosave = a:value$/;"	v
g:go_mod_fmt_autosave	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_mod_fmt_autosave = a:value$/;"	v
g:go_template_autocreate	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_template_autocreate = a:value$/;"	v
g:go_term_close_on_exit	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_term_close_on_exit = a:value$/;"	v
g:go_term_enabled	plugged/vim-polyglot/autoload/go/config.vim	/^  let g:go_term_enabled = a:value$/;"	v
g:got_char	plugged/vim-polyglot/ftplugin/zimbu.vim	/^    let g:got_char = 1111$/;"	v
g:got_char	plugged/vim-polyglot/ftplugin/zimbu.vim	/^    let g:got_char = 777$/;"	v
g:got_char	plugged/vim-polyglot/ftplugin/zimbu.vim	/^    let g:got_char = 999$/;"	v
g:got_char	plugged/vim-polyglot/ftplugin/zimbu.vim	/^    let g:got_char = v:char$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/haml.vim	/^  let g:haml_self_closing_tags = 'base|link|meta|br|hr|img|input'$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/slim.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/slime.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:haskell_indent_case	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_case = 2$/;"	v
g:haskell_indent_do	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_do = 3$/;"	v
g:haskell_indent_guard	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_guard = 2$/;"	v
g:haskell_indent_if	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_if = 3$/;"	v
g:haskell_indent_in	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_in = 1$/;"	v
g:haskell_indent_let	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_let = 4$/;"	v
g:haskell_indent_where	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_where = 6$/;"	v
g:html5_aria_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
g:html5_event_handler_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
g:html5_microdata_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
g:html5_rdfa_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
g:html_indent_tags	plugged/vim-polyglot/indent/mako.vim	/^        let g:html_indent_tags = a:tag$/;"	v
g:html_indent_tags	plugged/vim-polyglot/indent/mako.vim	/^        let g:html_indent_tags = g:html_indent_tags.'\\|'.a:tag$/;"	v
g:i	plugged/coc.nvim/autoload/coc/api.vim	/^  let g:i = srcId$/;"	v
g:idris_indent_case	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_case = 5$/;"	v
g:idris_indent_case	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_case = 5$/;"	v
g:idris_indent_do	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_do = 3$/;"	v
g:idris_indent_do	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_do = 3$/;"	v
g:idris_indent_if	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_if = 3$/;"	v
g:idris_indent_if	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_if = 3$/;"	v
g:idris_indent_let	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_let = 4$/;"	v
g:idris_indent_let	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_let = 4$/;"	v
g:idris_indent_rewrite	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_rewrite = 8$/;"	v
g:idris_indent_rewrite	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_rewrite = 8$/;"	v
g:idris_indent_where	plugged/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_where = 6$/;"	v
g:idris_indent_where	plugged/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_where = 6$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris.vim	/^    let g:idris_respwin = "active"$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris.vim	/^  let g:idris_respwin = "active"$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris.vim	/^  let g:idris_respwin = "hidden"$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris2.vim	/^    let g:idris_respwin = "active"$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris2.vim	/^  let g:idris_respwin = "active"$/;"	v
g:idris_respwin	plugged/vim-polyglot/ftplugin/idris2.vim	/^  let g:idris_respwin = "hidden"$/;"	v
g:j_indent_definitions	plugged/vim-polyglot/indent/j.vim	/^  let g:j_indent_definitions = 0$/;"	v
g:jsonnet_command	plugged/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_command = "jsonnet"$/;"	v
g:jsonnet_fmt_command	plugged/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_command = "jsonnetfmt"$/;"	v
g:jsonnet_fmt_fail_silently	plugged/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_fail_silently = 1$/;"	v
g:jsonnet_fmt_options	plugged/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_options = ''$/;"	v
g:jst_default_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let g:jst_default_subtype = "html"$/;"	v
g:julia#doc#juliapath	plugged/vim-polyglot/autoload/julia/doc.vim	/^    let g:julia#doc#juliapath = 'julia'$/;"	v
g:julia#doc#juliapath	plugged/vim-polyglot/autoload/julia/doc.vim	/^    let g:julia#doc#juliapath = get(pathlist, -1, 'julia')$/;"	v
g:julia#doc#juliapath	plugged/vim-polyglot/autoload/julia/doc.vim	/^  let g:julia#doc#juliapath = get(g:, 'julia#doc#juliapath', 'julia')$/;"	v
g:l2u_did_global_setup	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  let g:l2u_did_global_setup = 1$/;"	v
g:l2u_symbols_dict	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^  let g:l2u_symbols_dict = julia_latex_symbols#get_dict()$/;"	v
g:latex_to_unicode_auto	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^      let g:latex_to_unicode_auto = 0$/;"	v
g:latex_to_unicode_suggestions	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^    let g:latex_to_unicode_suggestions = 0$/;"	v
g:latex_to_unicode_tab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^      let g:latex_to_unicode_tab = 0$/;"	v
g:ledger_main	plugged/vim-polyglot/compiler/ledger.vim	/^  let g:ledger_main = '%'$/;"	v
g:ledger_target_amount	plugged/vim-polyglot/autoload/ledger.vim	/^    let g:ledger_target_amount = a:target_amount$/;"	v
g:liquid_default_subtype	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_default_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_highlight_types	plugged/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
g:llvm_ext_lli_executable	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let g:llvm_ext_lli_executable = get(g:, 'llvm_ext_lli_executable', 'lli')$/;"	v
g:llvm_ext_no_mapping	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let g:llvm_ext_no_mapping = get(g:, 'llvm_ext_no_mapping', 0)$/;"	v
g:loaded_autoload_fsharp	plugged/vim-polyglot/autoload/fsharp.vim	/^let g:loaded_autoload_fsharp = 1$/;"	v
g:loaded_fzf_vim	plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_sleuth	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:loaded_sleuth = 1$/;"	v
g:main_syntax	plugged/vim-polyglot/syntax/dart.vim	/^  let g:main_syntax = 'dart'$/;"	v
g:main_syntax	plugged/vim-polyglot/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
g:mako_indent_tags	plugged/vim-polyglot/indent/mako.vim	/^        let g:mako_indent_tags = a:tag$/;"	v
g:mako_indent_tags	plugged/vim-polyglot/indent/mako.vim	/^        let g:mako_indent_tags = g:mako_indent_tags.'\\|'.a:tag$/;"	v
g:markdown_fenced_languages	plugged/vim-polyglot/syntax/rmd.vim	/^    let g:markdown_fenced_languages = []$/;"	v
g:matchup_matchparen_offscreen	init.vim	/^let g:matchup_matchparen_offscreen = {'method': 'status'}$/;"	v
g:menutrans_fileformat_choices	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Cancel"$/;"	v
g:menutrans_fileformat_dialog	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_fileformat_dialog = "Select format for writing the file"$/;"	v
g:menutrans_help_dialog	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_help_dialog = "Enter a command or word to find help on:\\n\\nPrepend i_ for /;"	v
g:menutrans_no_file	plugged/vim-polyglot/extras/menu.vim	/^      let g:menutrans_no_file = "[No Name]"$/;"	v
g:menutrans_path_dialog	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_path_dialog = "Enter search path for files.\\nSeparate directory names with /;"	v
g:menutrans_set_lang_to	plugged/vim-polyglot/extras/menu.vim	/^      let g:menutrans_set_lang_to = 'Set Language to'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	plugged/vim-polyglot/extras/menu.vim	/^	  let g:menutrans_spell_add_ARG_to_word_list = 'Add\\ "%s"\\ to\\ Word\\ List'$/;"	v
g:menutrans_spell_change_ARG_to	plugged/vim-polyglot/extras/menu.vim	/^	  let g:menutrans_spell_change_ARG_to = 'Change\\ "%s"\\ to'$/;"	v
g:menutrans_spell_ignore_ARG	plugged/vim-polyglot/extras/menu.vim	/^	  let g:menutrans_spell_ignore_ARG = 'Ignore\\ "%s"'$/;"	v
g:menutrans_tags_dialog	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_tags_dialog = "Enter names of tag files.\\nSeparate the names with a comma."$/;"	v
g:menutrans_textwidth_dialog	plugged/vim-polyglot/extras/menu.vim	/^    let g:menutrans_textwidth_dialog = "Enter new text width (0 to disable formatting): "$/;"	v
g:message	plugged/vim-polyglot/tests/extensions.vim	/^    let g:message = ""$/;"	v
g:mp_close_tag	plugged/vim-polyglot/indent/mp.vim	/^let g:mp_close_tag = ''$/;"	v
g:mp_open_tag	plugged/vim-polyglot/indent/mp.vim	/^let g:mp_open_tag = ''$/;"	v
g:mp_statement	plugged/vim-polyglot/indent/mp.vim	/^let g:mp_statement = ''$/;"	v
g:multi_cursor_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_start_word_key	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
g:multi_cursor_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:mustache_operators	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  let g:mustache_operators = 1$/;"	v
g:neocomplcache_omni_patterns	plugged/vim-polyglot/autoload/nim.vim	/^  let g:neocomplcache_omni_patterns = {}$/;"	v
g:neocomplcache_omni_patterns	plugged/vim-polyglot/autoload/nim.vim	/^let g:neocomplcache_omni_patterns['nim'] = '[^. *\\t]\\.\\w*'$/;"	v
g:neocomplete#sources#omni#input_patterns	plugged/vim-polyglot/autoload/nim.vim	/^  let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	plugged/vim-polyglot/autoload/nim.vim	/^let g:neocomplete#sources#omni#input_patterns['nim'] = '[^. *\\t]\\.\\w*'$/;"	v
g:nim_caas_enabled	plugged/vim-polyglot/autoload/nim.vim	/^  let g:nim_caas_enabled = 0$/;"	v
g:nim_completion_callbacks	plugged/vim-polyglot/autoload/nim.vim	/^let g:nim_completion_callbacks = {}$/;"	v
g:nim_log	plugged/vim-polyglot/autoload/nim.vim	/^  let g:nim_log = []$/;"	v
g:nim_log	plugged/vim-polyglot/autoload/nim.vim	/^let g:nim_log = []$/;"	v
g:nim_symbol_types	plugged/vim-polyglot/autoload/nim.vim	/^let g:nim_symbol_types = {$/;"	v
g:omni_syntax_group_exclude_lifelines	plugged/vim-polyglot/syntax/lifelines.vim	/^		let g:omni_syntax_group_exclude_lifelines = 'lifelinesError'$/;"	v
g:omni_syntax_group_exclude_mf	plugged/vim-polyglot/ftplugin/mf.vim	/^let g:omni_syntax_group_exclude_mf = 'mfTodoComment'$/;"	v
g:omni_syntax_group_exclude_mp	plugged/vim-polyglot/ftplugin/mp.vim	/^let g:omni_syntax_group_exclude_mp = 'mfTodoComment'$/;"	v
g:omni_syntax_group_include_mf	plugged/vim-polyglot/ftplugin/mf.vim	/^let g:omni_syntax_group_include_mf = 'mf\\w\\+'$/;"	v
g:omni_syntax_group_include_mp	plugged/vim-polyglot/ftplugin/mp.vim	/^let g:omni_syntax_group_include_mp = 'mf\\w\\+,mp\\w\\+'$/;"	v
g:other_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^  let g:other_mf_macros = s:other_mf_macros$/;"	v
g:other_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^let g:other_mf_macros = 0 " cmbase.mf, logo.mf, ... neither$/;"	v
g:pandoc#syntax#codeblocks#embeds#langs	plugged/vim-polyglot/syntax/rmd.vim	/^let g:pandoc#syntax#codeblocks#embeds#langs = get(g:, 'pandoc#syntax#codeblocks#embeds#langs', [/;"	v
g:php_syntax_extensions_disabled	plugged/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_disabled = []$/;"	v
g:php_syntax_extensions_enabled	plugged/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg/;"	v
g:php_version_id	plugged/vim-polyglot/syntax/php.vim	/^  let g:php_version_id = 70300$/;"	v
g:plain_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^  let g:plain_mf_macros = s:plain_mf_macros$/;"	v
g:plain_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^let g:plain_mf_macros = 0 " plain.mf has no special meaning for MetaPost$/;"	v
g:plain_mf_modes	plugged/vim-polyglot/syntax/mp.vim	/^  let g:plain_mf_modes = s:plain_mf_modes$/;"	v
g:plain_mf_modes	plugged/vim-polyglot/syntax/mp.vim	/^let g:plain_mf_modes  = 0 " No METAFONT modes$/;"	v
g:plantuml_executable_script	plugged/vim-polyglot/ftplugin/plantuml.vim	/^  let g:plantuml_executable_script='plantuml'$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:polyglot_disabled_not_set	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:polyglot_disabled_not_set = 1$/;"	v
g:polyglot_is_disabled	plugged/vim-polyglot/ftdetect/polyglot.vim	/^      let g:polyglot_is_disabled[pkg] = 1$/;"	v
g:polyglot_is_disabled	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let g:polyglot_is_disabled = {}$/;"	v
g:powerline_pycmd	themes/airline.vim	/^let g:powerline_pycmd="py3"$/;"	v
g:ps1_efm_show_error_categories	plugged/vim-polyglot/compiler/powershell.vim	/^let g:ps1_efm_show_error_categories = get(g:, 'ps1_efm_show_error_categories', 0)$/;"	v
g:ps1_makeprg_cmd	plugged/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = ''$/;"	v
g:ps1_makeprg_cmd	plugged/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'powershell.exe'$/;"	v
g:ps1_makeprg_cmd	plugged/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'pwsh'$/;"	v
g:ps1_makeprg_cmd	plugged/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'pwsh.exe'$/;"	v
g:pug_self_closing_tags	plugged/vim-polyglot/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
g:puppet_align_hashes	plugged/vim-polyglot/after/ftplugin/puppet.vim	/^    let g:puppet_align_hashes = 1$/;"	v
g:purescript_indent_case	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_case = 5$/;"	v
g:purescript_indent_do	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_do = 3$/;"	v
g:purescript_indent_dot	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_dot = 1$/;"	v
g:purescript_indent_if	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_if = 3$/;"	v
g:purescript_indent_in	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_in = 1$/;"	v
g:purescript_indent_let	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_let = 4$/;"	v
g:purescript_indent_where	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_where = 6$/;"	v
g:pyindent_nested_paren	plugged/vim-polyglot/indent/bzl.vim	/^      let g:pyindent_nested_paren = l:pyindent_nested_paren$/;"	v
g:pyindent_nested_paren	plugged/vim-polyglot/indent/bzl.vim	/^    let g:pyindent_nested_paren = 'shiftwidth() * 2'$/;"	v
g:pyindent_open_paren	plugged/vim-polyglot/indent/bzl.vim	/^      let g:pyindent_open_paren = l:pyindent_open_paren$/;"	v
g:pyindent_open_paren	plugged/vim-polyglot/indent/bzl.vim	/^    let g:pyindent_open_paren = 'shiftwidth() * 2'$/;"	v
g:python_pep8_indent_hang_closing	plugged/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_hang_closing = 0$/;"	v
g:python_pep8_indent_hang_closing	plugged/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_hang_closing = 0$/;"	v
g:python_pep8_indent_multiline_string	plugged/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
g:python_pep8_indent_multiline_string	plugged/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	plugged/vim-polyglot/indent/cython.vim	/^        let g:python_pep8_indent_searchpair_timeout = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	plugged/vim-polyglot/indent/cython.vim	/^        let g:python_pep8_indent_searchpair_timeout = 150$/;"	v
g:python_pep8_indent_searchpair_timeout	plugged/vim-polyglot/indent/python.vim	/^        let g:python_pep8_indent_searchpair_timeout = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	plugged/vim-polyglot/indent/python.vim	/^        let g:python_pep8_indent_searchpair_timeout = 150$/;"	v
g:ragel_default_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^  let g:ragel_default_subtype = 'c'$/;"	v
g:rmd_fenced_languages	plugged/vim-polyglot/syntax/rmd.vim	/^    let g:rmd_fenced_languages = deepcopy(g:markdown_fenced_languages)$/;"	v
g:rmd_fenced_languages	plugged/vim-polyglot/syntax/rmd.vim	/^  let g:rmd_fenced_languages = ['r']$/;"	v
g:rmd_syn_hl_chunk	plugged/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_chunk = get(g:, 'g:rmd_syn_hl_chunk', 0)$/;"	v
g:rmd_syn_hl_citations	plugged/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_citations = get(g:, 'rmd_syn_hl_citations', 1)$/;"	v
g:rmd_syn_hl_yaml	plugged/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_yaml = get(g:, 'rmd_syn_hl_yaml', 1)$/;"	v
g:rst_fold_enabled	plugged/vim-polyglot/ftplugin/rst.vim	/^  let g:rst_fold_enabled = 0$/;"	v
g:rst_syntax_code_list	plugged/vim-polyglot/syntax/rst.vim	/^        let g:rst_syntax_code_list[s:elem] = [s:elem]$/;"	v
g:rst_syntax_code_list	plugged/vim-polyglot/syntax/rst.vim	/^    let g:rst_syntax_code_list = {$/;"	v
g:rst_syntax_code_list	plugged/vim-polyglot/syntax/rst.vim	/^    let g:rst_syntax_code_list = {}$/;"	v
g:ruby_default_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
g:ruby_default_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_indent_access_modifier_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'do'$/;"	v
g:ruby_indent_hanging_elements	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_hanging_elements = 1$/;"	v
g:ruby_version_paths	plugged/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'/;"	v
g:ruby_version_paths	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
g:rubycomplete_buffer_loading	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_completions	plugged/vim-polyglot/autoload/rubycomplete.vim	/^        let g:rubycomplete_completions = []$/;"	v
g:rubycomplete_include_object	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rustfmt_autosave	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_emit_files	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_emit_files = s:rustfmt_version >= "0.8.2"$/;"	v
g:rustfmt_fail_silently	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_fail_silently = 0$/;"	v
g:rustfmt_file_lines	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_file_lines = s:rustfmt_help =~# "--file-lines JSON"$/;"	v
g:rustfmt_options	plugged/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_options = ""$/;"	v
g:smt2_solver_command	plugged/vim-polyglot/ftplugin/smt2.vim	/^        let g:smt2_solver_command = "boolector"$/;"	v
g:smt2_solver_command	plugged/vim-polyglot/ftplugin/smt2.vim	/^        let g:smt2_solver_command = "z3"$/;"	v
g:smt2_solver_version_switch	plugged/vim-polyglot/ftplugin/smt2.vim	/^    let g:smt2_solver_version_switch = "--version"$/;"	v
g:spec_chglog_format	plugged/vim-polyglot/ftplugin/spec.vim	/^				let g:spec_chglog_format = "%a %b %d %Y " . l:email$/;"	v
g:spec_chglog_format	plugged/vim-polyglot/ftplugin/spec.vim	/^				let g:spec_chglog_format = a:format$/;"	v
g:startify_bookmarks	init.vim	/^let g:startify_bookmarks = [ {'c': '~\/.config\/nvim\/init.vim'}]$/;"	v
g:startify_enable_special	init.vim	/^let g:startify_enable_special = 1$/;"	v
g:startify_fortune_use_unicode	init.vim	/^let g:startify_fortune_use_unicode = 1$/;"	v
g:startify_session_autoload	init.vim	/^let g:startify_session_autoload = 1$/;"	v
g:svelte_indent_script	plugged/vim-polyglot/indent/svelte.vim	/^  let g:svelte_indent_script = 1$/;"	v
g:svelte_indent_style	plugged/vim-polyglot/indent/svelte.vim	/^  let g:svelte_indent_style = 1$/;"	v
g:syntastic_nim_checkers	plugged/vim-polyglot/compiler/nim.vim	/^let g:syntastic_nim_checkers = ['nim']$/;"	v
g:tagbar_type_puppet	plugged/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.kind2scope = {$/;"	v
g:tagbar_type_puppet	plugged/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.scope2kind = {$/;"	v
g:tagbar_type_puppet	plugged/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.sro = '__'$/;"	v
g:tagbar_type_puppet	plugged/vim-polyglot/ftplugin/puppet_tagbar.vim	/^let g:tagbar_type_puppet = {$/;"	v
g:tagbar_type_puppet	plugged/vim-polyglot/ftplugin/puppet_tagbar.vim	/^let g:tagbar_type_puppet.deffile = puppet#ctags#OptionFile()$/;"	v
g:tagbar_type_rust	plugged/vim-polyglot/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust = {$/;"	v
g:tagbar_type_rust	plugged/vim-polyglot/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/rust.ctags'$/;"	v
g:tagbar_type_scala	plugged/vim-polyglot/ftplugin/scala/tagbar.vim	/^  let g:tagbar_type_scala.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/scala.ctags'$/;"	v
g:tagbar_type_scala	plugged/vim-polyglot/ftplugin/scala/tagbar.vim	/^let g:tagbar_type_scala = {$/;"	v
g:tagbar_type_typescript	plugged/vim-polyglot/ftplugin/typescript.vim	/^  let g:tagbar_type_typescript.deffile = expand('<sfile>:p:h:h') . '\/ctags\/typescript.ctags'$/;"	v
g:tagbar_type_typescript	plugged/vim-polyglot/ftplugin/typescript.vim	/^let g:tagbar_type_typescript = {$/;"	v
g:terraform_binary_path	plugged/vim-polyglot/ftplugin/terraform.vim	/^  let g:terraform_binary_path='terraform'$/;"	v
g:tex_indent_brace	plugged/vim-polyglot/indent/tex.vim	/^    let g:tex_indent_brace = 1$/;"	v
g:tex_indent_items	plugged/vim-polyglot/indent/tex.vim	/^    let g:tex_indent_items = 1$/;"	v
g:tex_itemize_env	plugged/vim-polyglot/indent/tex.vim	/^        let g:tex_itemize_env = 'itemize\\|description\\|enumerate\\|thebibliography'$/;"	v
g:tex_items	plugged/vim-polyglot/indent/tex.vim	/^        let g:tex_items = '\\\\bibitem\\|\\\\item'$/;"	v
g:tex_items	plugged/vim-polyglot/indent/tex.vim	/^    let g:tex_items = ''$/;"	v
g:tex_items	plugged/vim-polyglot/indent/tex.vim	/^let g:tex_items = '^\\s*' . substitute(g:tex_items, '^\\(\\^\\\\s\\*\\)*', '', '')$/;"	v
g:tex_max_scan_line	plugged/vim-polyglot/indent/tex.vim	/^    let g:tex_max_scan_line = 60$/;"	v
g:tex_noindent_env	plugged/vim-polyglot/indent/tex.vim	/^    let g:tex_noindent_env = 'document\\|verbatim\\|lstlisting'$/;"	v
g:typescript_compiler_binary	plugged/vim-polyglot/compiler/typescript.vim	/^  let g:typescript_compiler_binary = 'tsc'$/;"	v
g:typescript_compiler_options	plugged/vim-polyglot/compiler/typescript.vim	/^    let g:typescript_compiler_options = ''$/;"	v
g:typescript_compiler_options	plugged/vim-polyglot/compiler/typescript.vim	/^    let g:typescript_compiler_options = g:syntastic_typescript_tsc_args$/;"	v
g:user_emmet_leader_key	init.vim	/^let g:user_emmet_leader_key=','$/;"	v
g:user_emmet_settings	init.vim	/^let g:user_emmet_settings = {$/;"	v
g:v_highlight_array_whitespace_error	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_array_whitespace_error = 1$/;"	v
g:v_highlight_chan_whitespace_error	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_chan_whitespace_error = 1$/;"	v
g:v_highlight_fields	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_fields = 1$/;"	v
g:v_highlight_function_calls	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_function_calls = 1$/;"	v
g:v_highlight_space_tab_error	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_space_tab_error = 1$/;"	v
g:v_highlight_trailing_whitespace_error	plugged/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_trailing_whitespace_error = 1$/;"	v
g:vhdl_indent_genportmap	plugged/vim-polyglot/indent/vhdl.vim	/^  let g:vhdl_indent_genportmap = 1$/;"	v
g:vhdl_indent_rhsassign	plugged/vim-polyglot/indent/vhdl.vim	/^  let g:vhdl_indent_rhsassign = 1$/;"	v
g:vim_json_syntax_conceal	plugged/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_conceal = 1$/;"	v
g:vim_json_syntax_concealcursor	plugged/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_concealcursor = ""$/;"	v
g:vim_json_warnings	plugged/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_warnings = 1$/;"	v
g:vue_pre_processors	plugged/vim-polyglot/syntax/vue.vim	/^  let g:vue_pre_processors = []$/;"	v
g:xmldata_aria	plugged/vim-polyglot/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
g:xmldata_html5	plugged/vim-polyglot/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
g:xmldata_xsd	plugged/vim-polyglot/autoload/xml/xsd.vim	/^let g:xmldata_xsd = {$/;"	v
g:xxdprogram	plugged/vim-polyglot/extras/menu.vim	/^	let g:xxdprogram = '"' .. g:xxdprogram .. '"'$/;"	v
g:xxdprogram	plugged/vim-polyglot/extras/menu.vim	/^      let g:xxdprogram = "xxd"$/;"	v
g:xxdprogram	plugged/vim-polyglot/extras/menu.vim	/^      let g:xxdprogram = $VIMRUNTIME . (&shellslash ? '\/' : '\\') . "xxd.exe"$/;"	v
g:zig_fmt_autosave	plugged/vim-polyglot/autoload/zig/config.vim	/^  let g:zig_fmt_autosave = a:value$/;"	v
g<C-]>	plugged/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#Jump_Tag ('','stjump')<cr>$/;"	m
g<C-]>	plugged/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#List_Tag ()<cr>$/;"	m
gO	plugged/vim-polyglot/ftplugin/help.vim	/^  nnoremap <silent><buffer> gO :call <sid>show_toc()<cr>$/;"	m
gc	plugged/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gc  <Plug>(crystal-show-context)$/;"	m
gd	plugged/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gd  <Plug>(crystal-jump-to-definition)$/;"	m
gdb_minlines	plugged/vim-polyglot/syntax/gdb.vim	/^  let gdb_minlines = 10$/;"	v
generate_fallback	plugged/vim-polyglot/scripts/build	/^def generate_fallback$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
generate_ftdetect	plugged/vim-polyglot/scripts/build	/^def generate_ftdetect(packages, heuristics)$/;"	f	method:copy_file.rules_to_code.rule_to_code
generate_packages_entries	plugged/vim-polyglot/scripts/import_vim	/^def generate_packages_entries(filetypes, comments)$/;"	f
generate_plugins	plugged/vim-polyglot/scripts/build	/^def generate_plugins(packages)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
generate_tests	plugged/vim-polyglot/scripts/build	/^def generate_tests(packages)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
generate_tests	plugged/vim-polyglot/scripts/import_vim	/^def generate_tests(autocommands)$/;"	f
get_comments	plugged/vim-polyglot/scripts/import_vim	/^def get_comments$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
globalSetup	plugged/coc.nvim/package.json	/^    "globalSetup": ".\/jest.js",$/;"	s	object:jest
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
global_states_and_properties	plugged/vim-polyglot/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
globals	plugged/coc.nvim/package.json	/^    "globals": {$/;"	o	object:jest
go#config#AddtagsSkipUnexported	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AddtagsSkipUnexported() abort$/;"	f
go#config#AddtagsTransform	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#AlternateMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#AsmfmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#AutoSameids	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#AutoTypeInfo	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#BinPath	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#BuildTags	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#CodeCompletionEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#CodeCompletionEnabled() abort$/;"	f
go#config#CodeCompletionIcase	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#CodeCompletionIcase() abort$/;"	f
go#config#Debug	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugAddress	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugBreakpointSignText	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugBreakpointSignText() abort$/;"	f
go#config#DebugCommands	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#DebugLogOutput	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugLogOutput() abort$/;"	f
go#config#DebugMappings	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugMappings() abort$/;"	f
go#config#DebugWindows	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DeclsIncludes	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#DeclsMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DefMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DefReuseBuffer	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DiagnosticsEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DiagnosticsEnabled() abort$/;"	f
go#config#DiagnosticsLevel	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DiagnosticsLevel() abort$/;"	f
go#config#DocMaxHeight	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#DocPopupWindow	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocPopupWindow() abort$/;"	f
go#config#DocUrl	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#EchoCommandInfo	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#EchoGoInfo	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#EchoGoInfo() abort$/;"	f
go#config#ErrcheckBin	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#FillStructMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FillStructMode() abort$/;"	f
go#config#FmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#FmtCommand	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtExperimental	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#FmtFailSilently	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtOptions	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FoldEnable	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#FoldEnable(...) abort$/;"	f
go#config#GolintBin	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#GoplsAnalyses	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsAnalyses() abort$/;"	f
go#config#GoplsCompleteUnimported	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsCompleteUnimported() abort$/;"	f
go#config#GoplsDeepCompletion	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsDeepCompletion() abort$/;"	f
go#config#GoplsEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsEnabled() abort$/;"	f
go#config#GoplsGofumpt	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsGofumpt() abort$/;"	f
go#config#GoplsLocal	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsLocal() abort$/;"	f
go#config#GoplsMatcher	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsMatcher() abort$/;"	f
go#config#GoplsOptions	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsOptions() abort$/;"	f
go#config#GoplsSettings	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsSettings() abort$/;"	f
go#config#GoplsStaticCheck	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsStaticCheck() abort$/;"	f
go#config#GoplsTempModfile	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsTempModfile() abort$/;"	f
go#config#GoplsUsePlaceholders	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsUsePlaceholders() abort$/;"	f
go#config#GorenameBin	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#GuruScope	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#HighlightArrayWhitespaceError	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightBuildConstraints	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightChanWhitespaceError	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightDebug	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDebug() abort$/;"	f
go#config#HighlightDiagnosticErrors	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticErrors() abort$/;"	f
go#config#HighlightDiagnosticWarnings	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticWarnings() abort$/;"	f
go#config#HighlightExtraTypes	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightFields	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightFormatStrings	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightFunctionCalls	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFunctionParameters	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionParameters() abort$/;"	f
go#config#HighlightFunctions	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightGenerateTags	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightOperators	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightSpaceTabError	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightStringSpellcheck	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightTypes	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightVariableAssignments	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#ImplementsMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImplementsMode() abort$/;"	f
go#config#ImportsAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImportsAutosave() abort$/;"	f
go#config#ImportsMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImportsMode() abort$/;"	f
go#config#InfoMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#ListAutoclose	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#ListHeight	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#ListType	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListTypeCommands	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#LspLog	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#LspLog() abort$/;"	f
go#config#MetalinterAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#MetalinterAutosaveEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterCommand	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterDeadline	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#MetalinterEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#ModFmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ModFmtAutosave() abort$/;"	f
go#config#PlayBrowserCommand	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#PlayOpenBrowser	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#ReferrersMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#ReferrersMode() abort$/;"	f
go#config#RenameCommand	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#RenameCommand() abort$/;"	f
go#config#SearchBinPathFirst	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SearchBinPathFirst() abort$/;"	f
go#config#SetAsmfmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#SetAutoSameids	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#SetAutoTypeInfo	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#SetBuildTags	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#SetDebugDiag	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#SetFmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#SetGuruScope	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#SetMetalinterAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#SetModFmtAutosave	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetModFmtAutosave(value) abort$/;"	f
go#config#SetTemplateAutocreate	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#SetTermCloseOnExit	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTermCloseOnExit(value) abort$/;"	f
go#config#SetTermEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#SnippetEngine	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#StatuslineDuration	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#TemplateAutocreate	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#TemplateFile	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#TemplateTestFile	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateUsePkg	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TermCloseOnExit	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermCloseOnExit() abort$/;"	f
go#config#TermEnabled	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#TermHeight	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermMode	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermReuse	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermReuse() abort$/;"	f
go#config#TermWidth	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TestShowName	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TestTimeout	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#Updatetime	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#Updatetime() abort$/;"	f
go#config#VersionWarning	plugged/vim-polyglot/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
graphic_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
graphql#has_syntax_group	plugged/vim-polyglot/autoload/graphql.vim	/^function! graphql#has_syntax_group(group) abort$/;"	f
graphql#javascript_tags	plugged/vim-polyglot/autoload/graphql.vim	/^function! graphql#javascript_tags() abort$/;"	f
groovy_minlines	plugged/vim-polyglot/syntax/groovy.vim	/^  let groovy_minlines = 10$/;"	v
gsa	plugged/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsa <Plug>(crystal-spec-run-all)$/;"	m
gsc	plugged/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsc <Plug>(crystal-spec-run-current)$/;"	m
gss	plugged/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gss <Plug>(crystal-spec-switch)$/;"	m
haxe_minlines	plugged/vim-polyglot/syntax/haxe.vim	/^  let haxe_minlines = 5000$/;"	v
health#coc#check	plugged/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
highlight_types	plugged/vim-polyglot/syntax/spup.vim	/^    let highlight_types = 1$/;"	v
hog_minlines	plugged/vim-polyglot/syntax/hog.vim	/^    let hog_minlines = 100$/;"	v
homepage	plugged/coc.nvim/package.json	/^  "homepage": "https:\/\/github.com\/neoclide\/coc.nvim#readme",$/;"	s
host	plugged/coc.nvim/data/schema.json	/^        "host": {$/;"	o	object:definitions.languageServerSocket.properties
html_no_rendering	plugged/vim-polyglot/syntax/spyce.vim	/^let html_no_rendering = 1    " do not render <b>,<i>, etc...$/;"	v
htmlcomplete#CheckDoctype	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadAria	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
http.proxy	plugged/coc.nvim/data/schema.json	/^    "http.proxy": {$/;"	o	object:properties
http.proxyAuthorization	plugged/coc.nvim/data/schema.json	/^    "http.proxyAuthorization": {$/;"	o	object:properties
http.proxyCA	plugged/coc.nvim/data/schema.json	/^    "http.proxyCA": {$/;"	o	object:properties
http.proxyStrictSSL	plugged/coc.nvim/data/schema.json	/^    "http.proxyStrictSSL": {$/;"	o	object:properties
hw_subversion	plugged/vim-polyglot/syntax/hollywood.vim	/^  let hw_subversion = 0$/;"	v
hw_version	plugged/vim-polyglot/syntax/hollywood.vim	/^  let hw_version = 8$/;"	v
i	plugged/vim-polyglot/syntax/plantuml.vim	/^  let i = i + 1$/;"	v
i	plugged/vim-polyglot/syntax/plantuml.vim	/^let i = 1$/;"	v
i	plugged/vim-polyglot/syntax/xpm.vim	/^   let i = i + 1$/;"	v
i	plugged/vim-polyglot/syntax/xpm.vim	/^let i      = 1$/;"	v
i	plugged/vim-polyglot/syntax/xpm2.vim	/^    let i = i + 1$/;"	v
i	plugged/vim-polyglot/syntax/xpm2.vim	/^  let i      = 1$/;"	v
iM	plugged/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
iM	plugged/vim-polyglot/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
icon_minlines	plugged/vim-polyglot/syntax/icon.vim	/^  let icon_minlines = 15$/;"	v
idris_response	plugged/vim-polyglot/ftplugin/idris.vim	/^let idris_response = 0$/;"	v
idris_response	plugged/vim-polyglot/ftplugin/idris2.vim	/^let idris_response = 0$/;"	v
ie	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  onoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
ie	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  xnoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
ignoredRootPaths	plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {$/;"	o	object:definitions.languageServerBase.properties
ignoredRootPaths	plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerCommand.properties
ignoredRootPaths	plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerModule.properties
ignoredRootPaths	plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerSocket.properties
im	plugged/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
im	plugged/vim-polyglot/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
impls,trait implementations	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?impl([ \\t\\n]*<[^>]*>)?[ \\t]+(([a-zA-Z0-9_:]+)[ \\t]*(<[^>/;"	k	langdef:Rust
import_autocommands	plugged/vim-polyglot/scripts/import_vim	/^def import_autocommands$/;"	f
include	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*(include|require)[[:space:]]*([a-zA-Z0-9_:]+)\/\\1 \\2\/i,include\/$/;"	k	langdef:puppet
indent	plugged/vim-polyglot/scripts/build	/^def indent(str, amount)$/;"	f	method:copy_file
initializationOptions	plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {$/;"	o	object:definitions.languageServerBase.properties
initializationOptions	plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerCommand.properties
initializationOptions	plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerModule.properties
initializationOptions	plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerSocket.properties
inject_code	plugged/vim-polyglot/scripts/build	/^def inject_code(path, code)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
installedModules	plugged/coc.nvim/build/index.js	/^\/******\/ 	var installedModules = {};$/;"	v
interface	plugged/coc.nvim/data/schema.json	/^        "interface": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
interfaces	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*interface[ \\t]+([a-zA-Z0-9_]+)\/\\2\/i,interfaces\/$/;"	k	langdef:typescript
is_bash	plugged/vim-polyglot/syntax/initng.vim	/^let is_bash = 1$/;"	v
is_bash	plugged/vim-polyglot/syntax/upstart.vim	/^let is_bash = 1$/;"	v
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.additionalSchemes
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.filetypes
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.ignoredRootPaths
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.rootPatterns
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerCommand.properties.args
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.args
items	plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.execArgv
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.formatOnSaveFiletypes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.formatOnTypeFiletypes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.rootPatterns
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.around.disableSyntaxes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.buffer.disableSyntaxes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.disableSyntaxes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.ignorePatterns
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.triggerCharacters
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.trimSameExts
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.list.source.outline.ctagsFilestypes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.list.source.symbols.excludes
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.list.statusLineSegments
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.suggest.invalidInsertCharacters
items	plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.workspace.ignoredFiletypes
java_highlight_all	plugged/vim-polyglot/syntax/java.vim	/^  let java_highlight_all=1$/;"	v
java_minlines	plugged/vim-polyglot/syntax/java.vim	/^  let java_minlines = 10$/;"	v
jest	plugged/coc.nvim/package.json	/^  "jest": {$/;"	o
jj	init.vim	/^inoremap jj <ESC>$/;"	m
jproperties_lines	plugged/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_lines = 256$/;"	v
jproperties_show_messages	plugged/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_show_messages = 0$/;"	v
jproperties_strict_syntax	plugged/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_strict_syntax = 0$/;"	v
jsonnet#CheckBinPath	plugged/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#CheckBinPath(binName)$/;"	f
jsonnet#Format	plugged/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#Format()$/;"	f
jsonnet#System	plugged/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#System(str, ...)$/;"	f
jsx_comment	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^augroup jsx_comment$/;"	a
jsx_comment	plugged/vim-polyglot/after/ftplugin/tsx.vim	/^augroup jsx_comment$/;"	a
jsx_pretty#comment#update_commentstring	plugged/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! jsx_pretty#comment#update_commentstring(original)$/;"	f
jsx_pretty#indent#get	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function! jsx_pretty#indent#get(js_indent)$/;"	f
julia#doc#complete	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#complete(ArgLead, CmdLine, CursorPos) abort$/;"	f
julia#doc#keywordprg	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#keywordprg(word) abort$/;"	f
julia#doc#lookup	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#lookup(keyword, ...) abort$/;"	f
julia#doc#open	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#open(keyword) abort$/;"	f
julia#doc#prompt	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#prompt() abort$/;"	f
julia#function_assign2block	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#function_assign2block()$/;"	f
julia#function_block2assign	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#function_block2assign()$/;"	f
julia#gotodefinition	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#gotodefinition()$/;"	f
julia#idundercursor	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#idundercursor()$/;"	f
julia#set_syntax_version	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#set_syntax_version(jvers)$/;"	f
julia#toggle_deprecated_syntax	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_deprecated_syntax()$/;"	f
julia#toggle_function_blockassign	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_function_blockassign()$/;"	f
julia_blocks#init_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#init_mappings()$/;"	f
julia_blocks#move_N	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_N()$/;"	f
julia_blocks#move_P	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_P()$/;"	f
julia_blocks#move_n	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_n()$/;"	f
julia_blocks#move_p	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_p()$/;"	f
julia_blocks#moveblock_N	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_N()$/;"	f
julia_blocks#moveblock_P	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_P()$/;"	f
julia_blocks#moveblock_n	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_n()$/;"	f
julia_blocks#moveblock_p	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_p()$/;"	f
julia_blocks#owrapper_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_move(oper, function, toend, backwards)$/;"	f
julia_blocks#owrapper_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_select(oper, function) ", toend, backwards)$/;"	f
julia_blocks#remove_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#remove_mappings()$/;"	f
julia_blocks#select_a	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_a(...)$/;"	f
julia_blocks#select_i	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_i()$/;"	f
julia_blocks#select_reset	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function julia_blocks#select_reset()$/;"	f
julia_blocks#vwrapper_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_move(function)$/;"	f
julia_blocks#vwrapper_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_select(function)$/;"	f
julia_blocks#whereami	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#whereami()$/;"	f
julia_latex_symbols#get_dict	plugged/vim-polyglot/autoload/julia_latex_symbols.vim	/^function! julia_latex_symbols#get_dict()$/;"	f
key	plugged/vim-polyglot/ftplugin/markdown.vim	/^        let key = matchstr(s:filetype, "[^=]*")$/;"	v
keyword	plugged/coc.nvim/data/schema.json	/^        "keyword": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
keywords	plugged/coc.nvim/package.json	/^  "keywords": [$/;"	a
landmark_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
landmark_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main'/;"	v
lang_tag	plugged/vim-polyglot/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
langonly	plugged/vim-polyglot/extras/menu.vim	/^	let langonly = substitute(s:lang, '_.*', "", "")$/;"	v
languageServerBase	plugged/coc.nvim/data/schema.json	/^    "languageServerBase": {$/;"	o	object:definitions
languageServerCommand	plugged/coc.nvim/data/schema.json	/^    "languageServerCommand": {$/;"	o	object:definitions
languageServerModule	plugged/coc.nvim/data/schema.json	/^    "languageServerModule": {$/;"	o	object:definitions
languageServerSocket	plugged/coc.nvim/data/schema.json	/^    "languageServerSocket": {$/;"	o	object:definitions
languageserver	plugged/coc.nvim/data/schema.json	/^    "languageserver": {$/;"	o	object:properties
ledger#align_amount_at_cursor	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#align_amount_at_cursor() abort$/;"	f
ledger#align_commodity	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#align_commodity() abort$/;"	f
ledger#autocomplete_and_align	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#autocomplete_and_align() abort$/;"	f
ledger#declared_accounts	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#declared_accounts(...) abort$/;"	f
ledger#entry	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#entry() abort$/;"	f
ledger#filter_items	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#filter_items(list, keyword) abort$/;"	f
ledger#find_in_tree	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#find_in_tree(tree, levels) abort$/;"	f
ledger#output	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#output(report) abort$/;"	f
ledger#reconcile	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#reconcile(file, account, target_amount) abort$/;"	f
ledger#register	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#register(file, args) abort$/;"	f
ledger#report	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#report(file, args) abort$/;"	f
ledger#show_balance	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#show_balance(file, ...) abort$/;"	f
ledger#transaction_date_set	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_date_set(lnum, type, ...) abort$/;"	f
ledger#transaction_from_lnum	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_from_lnum(lnum) abort$/;"	f
ledger#transaction_state_set	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_state_set(lnum, char) abort$/;"	f
ledger#transaction_state_toggle	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_state_toggle(lnum, ...) abort$/;"	f
ledger#transactions	plugged/vim-polyglot/autoload/ledger.vim	/^function! ledger#transactions(...) abort$/;"	f
license	plugged/coc.nvim/package.json	/^  "license": "MIT",$/;"	s
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-to/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
linktypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', /;"	v
list.alignColumns	plugged/coc.nvim/data/schema.json	/^    "list.alignColumns": {$/;"	o	object:properties
list.extendedSearchMode	plugged/coc.nvim/data/schema.json	/^    "list.extendedSearchMode": {$/;"	o	object:properties
list.height	plugged/coc.nvim/data/schema.json	/^    "list.height": {$/;"	o	object:properties
list.indicator	plugged/coc.nvim/data/schema.json	/^    "list.indicator": {$/;"	o	object:properties
list.insertMappings	plugged/coc.nvim/data/schema.json	/^    "list.insertMappings": {$/;"	o	object:properties
list.interactiveDebounceTime	plugged/coc.nvim/data/schema.json	/^    "list.interactiveDebounceTime": {$/;"	o	object:properties
list.limitLines	plugged/coc.nvim/data/schema.json	/^    "list.limitLines": {$/;"	o	object:properties
list.matchHighlightGroup	plugged/coc.nvim/data/schema.json	/^    "list.matchHighlightGroup": {$/;"	o	object:properties
list.maxPreviewHeight	plugged/coc.nvim/data/schema.json	/^    "list.maxPreviewHeight": {$/;"	o	object:properties
list.nextKeymap	plugged/coc.nvim/data/schema.json	/^    "list.nextKeymap": {$/;"	o	object:properties
list.normalMappings	plugged/coc.nvim/data/schema.json	/^    "list.normalMappings": {$/;"	o	object:properties
list.previewHighlightGroup	plugged/coc.nvim/data/schema.json	/^    "list.previewHighlightGroup": {$/;"	o	object:properties
list.previewSplitRight	plugged/coc.nvim/data/schema.json	/^    "list.previewSplitRight": {$/;"	o	object:properties
list.previousKeymap	plugged/coc.nvim/data/schema.json	/^    "list.previousKeymap": {$/;"	o	object:properties
list.selectedSignText	plugged/coc.nvim/data/schema.json	/^    "list.selectedSignText": {$/;"	o	object:properties
list.signOffset	plugged/coc.nvim/data/schema.json	/^    "list.signOffset": {$/;"	o	object:properties
list.source.diagnostics.includeCode	plugged/coc.nvim/data/schema.json	/^    "list.source.diagnostics.includeCode": {$/;"	o	object:properties
list.source.diagnostics.pathFormat	plugged/coc.nvim/data/schema.json	/^    "list.source.diagnostics.pathFormat": {$/;"	o	object:properties
list.source.outline.ctagsFilestypes	plugged/coc.nvim/data/schema.json	/^    "list.source.outline.ctagsFilestypes": {$/;"	o	object:properties
list.source.symbols.excludes	plugged/coc.nvim/data/schema.json	/^    "list.source.symbols.excludes": {$/;"	o	object:properties
list.statusLineSegments	plugged/coc.nvim/data/schema.json	/^    "list.statusLineSegments": {$/;"	o	object:properties
live_region_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
livescript_compiler	plugged/vim-polyglot/compiler/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
livescript_compiler	plugged/vim-polyglot/ftplugin/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
livescript_make_options	plugged/vim-polyglot/compiler/ls.vim	/^  let livescript_make_options = ''$/;"	v
lnum	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let lnum = search('^\\s*(\\*:o\\?caml:', 'n')$/;"	v
load_data	plugged/vim-polyglot/scripts/build	/^def load_data()$/;"	f
load_heuristics	plugged/vim-polyglot/scripts/build	/^def load_heuristics$/;"	f
load_languages	plugged/vim-polyglot/scripts/build	/^def load_languages$/;"	f
load_packages	plugged/vim-polyglot/scripts/build	/^def load_packages$/;"	f
loaded_eregex	plugged/vim-polyglot/scripts/eregex.vim	/^let loaded_eregex=1$/;"	v
macros,macro definitions	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*macro_rules![ \\t]+([a-zA-Z0-9_]+)\/\\1\/d,macros,macro definitions\/$/;"	k	langdef:Rust
main	plugged/coc.nvim/package.json	/^  "main": ".\/lib\/index.js",$/;"	s
main_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^  let main_syntax = 'yaml'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/aptconf.vim	/^  let main_syntax = 'aptconf'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/aspperl.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/aspvbs.vim	/^  let main_syntax = 'aspvbs'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/blade.vim	/^    let main_syntax = 'blade'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/css.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/docker-compose.vim	/^    let main_syntax = 'yaml'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/ecrystal.vim	/^  let main_syntax = 'ecrystal'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/elixir.vim	/^  let main_syntax = "elixir"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/emblem.vim	/^  let main_syntax = 'emblem'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/ferm.vim	/^  let main_syntax = 'ferm'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/groovy.vim	/^  let main_syntax='groovy'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/gsp.vim	/^  let main_syntax = 'gsp'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/haml.vim	/^  let main_syntax = 'haml'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/haxe.vim	/^  let main_syntax='haxe'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/helm.vim	/^  let main_syntax = 'yaml'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/html.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/htmldjango.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/htmlm4.vim	/^  let main_syntax='htmlm4'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/java.vim	/^  let main_syntax='java'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/jinja2.vim	/^  let main_syntax = 'jinja2'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/jsp.vim	/^  let main_syntax = 'jsp'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/jst.vim	/^  let main_syntax = 'jst'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/lite.vim	/^  let main_syntax = 'lite'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/lua.vim	/^  let main_syntax = 'lua'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/m4.vim	/^  let main_syntax='m4'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/mako.vim	/^  let main_syntax = b:mako_outer_lang$/;"	v
main_syntax	plugged/vim-polyglot/syntax/mason.vim	/^	let main_syntax = 'mason'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/msql.vim	/^  let main_syntax = 'msql'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/ora.vim	/^  let main_syntax = 'ora'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/pdf.vim	/^    let main_syntax = 'pdf'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/plp.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/qml.vim	/^  let main_syntax = 'qml'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/scala.vim	/^  let main_syntax = 'scala'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/slim.vim	/^  let main_syntax = 'slim'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/slime.vim	/^  let main_syntax = 'slime'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/smarty.vim	/^  let main_syntax = 'smarty'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/spyce.vim	/^  let main_syntax='spyce'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/stylus.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/svg.vim	/^  let main_syntax = 'svg'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/texinfo.vim	/^  let main_syntax = 'texinfo'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/tf.vim	/^  let main_syntax = 'tf'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/tpp.vim	/^  let main_syntax = 'tpp'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/typescript.vim	/^  let main_syntax = 'typescript'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/typescriptreact.vim	/^  let main_syntax = 'typescriptreact'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/uc.vim	/^  let main_syntax='uc'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/velocity.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/webmacro.vim	/^  let main_syntax = 'webmacro'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/wml.vim	/^  let main_syntax = 'wml'$/;"	v
mapleader	init.vim	/^let mapleader="\\<space>"$/;"	v
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.highPrioritySourceLimit
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 15000,$/;"	n	object:properties.suggest.timeout
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 300,$/;"	n	object:properties.signature.triggerSignatureWait
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 500,$/;"	n	object:properties.suggest.triggerCompletionWait
maximum	plugged/coc.nvim/data/schema.json	/^      "maximum": 5000,$/;"	n	object:properties.coc.preferences.highlightTimeout
mel_minlines	plugged/vim-polyglot/syntax/mel.vim	/^  let mel_minlines=15$/;"	v
members	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*(public|private)[ \\t]+(static|readonly)?[ \\t]*([a/;"	k	langdef:typescript
metadata_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
method	plugged/coc.nvim/data/schema.json	/^        "method": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
methods	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy|override|private[^ ]*(\\[[a-z]*\\]/;"	k	langdef:scala
microdata_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'i/;"	v
microdata_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.highPrioritySourceLimit
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 200,$/;"	n	object:properties.coc.preferences.highlightTimeout
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 3,$/;"	n	object:properties.signature.maxWindowHeight
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 30,$/;"	n	object:properties.suggest.triggerCompletionWait
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 50,$/;"	n	object:properties.signature.triggerSignatureWait
minimum	plugged/coc.nvim/data/schema.json	/^      "minimum": 500,$/;"	n	object:properties.suggest.timeout
module	plugged/coc.nvim/data/schema.json	/^        "module": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
module	plugged/coc.nvim/data/schema.json	/^        "module": {$/;"	o	object:definitions.languageServerModule.properties
module	plugged/nvim-yarp/pythonx/yarp.py	/^module = sys.argv[3]$/;"	v
moduleFileExtensions	plugged/coc.nvim/package.json	/^    "moduleFileExtensions": [$/;"	a	object:jest
module_obj	plugged/nvim-yarp/pythonx/yarp.py	/^    module_obj = importlib.import_module(module)$/;"	v
module_obj	plugged/nvim-yarp/pythonx/yarp.py	/^module_obj = None$/;"	v
modules	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*module[ \\t]+([a-zA-Z0-9_]+)\/\\2\/n,modules\/$/;"	k	langdef:typescript
modules	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*namespace[ \\t]+([a-zA-Z0-9_]+)\/\\2\/n,modules\/$/;"	k	langdef:typescript
modules,module names	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?mod[ \\t]+([a-zA-Z0-9_]+)\/\\2\/m,modules,module names\/$/;"	k	langdef:Rust
multiple_cursors#debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#find	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
multiple_cursors#get_latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
multiple_cursors#new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#prev	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#quit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#select_all	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#select_all(mode, word_boundary)$/;"	f
multiple_cursors#skip	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
mupad_cmdextversion	plugged/vim-polyglot/syntax/mupad.vim	/^  let mupad_cmdextversion = 2$/;"	v
mv_DEtools	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_DEtools    = 1$/;"	v
mv_Galois	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_Galois     = 1$/;"	v
mv_GaussInt	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_GaussInt   = 1$/;"	v
mv_LREtools	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_LREtools   = 1$/;"	v
mv_combinat	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_combinat   = 1$/;"	v
mv_combstruct	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_combstruct = 1$/;"	v
mv_difforms	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_difforms   = 1$/;"	v
mv_finance	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_finance    = 1$/;"	v
mv_genfunc	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_genfunc    = 1$/;"	v
mv_geometry	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_geometry   = 1$/;"	v
mv_grobner	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_grobner    = 1$/;"	v
mv_group	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_group      = 1$/;"	v
mv_inttrans	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_inttrans   = 1$/;"	v
mv_liesymm	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_liesymm    = 1$/;"	v
mv_linalg	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_linalg     = 1$/;"	v
mv_logic	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_logic      = 1$/;"	v
mv_networks	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_networks   = 1$/;"	v
mv_numapprox	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_numapprox  = 1$/;"	v
mv_numtheory	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_numtheory  = 1$/;"	v
mv_orthopoly	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_orthopoly  = 1$/;"	v
mv_padic	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_padic      = 1$/;"	v
mv_plots	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_plots      = 1$/;"	v
mv_plottools	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_plottools  = 1$/;"	v
mv_powseries	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_powseries  = 1$/;"	v
mv_process	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_process    = 1$/;"	v
mv_simplex	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_simplex    = 1$/;"	v
mv_stats	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_stats      = 1$/;"	v
mv_student	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_student    = 1$/;"	v
mv_sumtools	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_sumtools   = 1$/;"	v
mv_tensor	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_tensor     = 1$/;"	v
mv_totorder	plugged/vim-polyglot/syntax/maple.vim	/^  let mv_totorder   = 1$/;"	v
n	plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.n = function(module) {$/;"	f	function:__webpack_require__
n	plugged/vim-polyglot/syntax/xpm.vim	/^	 let n = 1		" n = color index$/;"	v
n	plugged/vim-polyglot/syntax/xpm.vim	/^	 let n = n + 1$/;"	v
n	plugged/vim-polyglot/syntax/xpm.vim	/^let n      = 0$/;"	v
n	plugged/vim-polyglot/syntax/xpm2.vim	/^	let n = 1			" n = color index$/;"	v
n	plugged/vim-polyglot/syntax/xpm2.vim	/^	let n = n + 1$/;"	v
n	plugged/vim-polyglot/syntax/xpm2.vim	/^  let n      = 0$/;"	v
name	plugged/coc.nvim/package.json	/^  "name": "coc.nvim",$/;"	s
nim#init	plugged/vim-polyglot/autoload/nim.vim	/^fun! nim#init() abort$/;"	f
nim_highlight_builtins	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins     = 1$/;"	v
nim_highlight_builtins	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins = 1$/;"	v
nim_highlight_exceptions	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions   = 1$/;"	v
nim_highlight_exceptions	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions = 1$/;"	v
nim_highlight_numbers	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers      = 1$/;"	v
nim_highlight_numbers	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers = 1$/;"	v
nim_highlight_space_errors	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
node	plugged/coc.nvim/package.json	/^    "node": ">=8.10.0"$/;"	s	object:engines
node	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*node[[:space:]]*[\\'|\\"]*([a-zA-Z0-9_\\.\\-]+)[\\'|\\"]*\/\\1\/n,/;"	k	langdef:puppet
normal mode / visual mode	plugged/vim-multiple-cursors/README.md	/^### normal mode \/ visual mode$/;"	S	section:vim-multiple-cursors""Quick Start
notification.highlightGroup	plugged/coc.nvim/data/schema.json	/^    "notification.highlightGroup": {$/;"	o	object:properties
notification.marginRight	plugged/coc.nvim/data/schema.json	/^    "notification.marginRight": {$/;"	o	object:properties
notification.marginTop	plugged/coc.nvim/data/schema.json	/^    "notification.marginTop": {$/;"	o	object:properties
notification.maxHeight	plugged/coc.nvim/data/schema.json	/^    "notification.maxHeight": {$/;"	o	object:properties
notification.maxWidth	plugged/coc.nvim/data/schema.json	/^    "notification.maxWidth": {$/;"	o	object:properties
notification.minProgressWidth	plugged/coc.nvim/data/schema.json	/^    "notification.minProgressWidth": {$/;"	o	object:properties
npm.binPath	plugged/coc.nvim/data/schema.json	/^    "npm.binPath": {$/;"	o	object:properties
nqc_minlines	plugged/vim-polyglot/syntax/nqc.vim	/^    let nqc_minlines = 15	    " mostly for () constructs$/;"	v
nqc_minlines	plugged/vim-polyglot/syntax/nqc.vim	/^    let nqc_minlines = 50	    " #if 0 constructs can be long$/;"	v
nvim	plugged/nvim-yarp/pythonx/yarp.py	/^        nvim = attach('tcp', address=serveraddr, port=port)$/;"	v
nvim	plugged/nvim-yarp/pythonx/yarp.py	/^nvim = None$/;"	v
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnP/;"	f	function:__webpack_require__
objects	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy)[ \\t]*)*(private[^ ]*|protected)?/;"	k	langdef:scala
old_syntax	plugged/vim-polyglot/after/syntax/haskell.vim	/^let old_syntax = b:current_syntax$/;"	v
on_notification	plugged/nvim-yarp/pythonx/yarp.py	/^def on_notification(method, args):$/;"	f
on_request	plugged/nvim-yarp/pythonx/yarp.py	/^def on_request(method, args):$/;"	f
on_setup	plugged/nvim-yarp/pythonx/yarp.py	/^def on_setup():$/;"	f
oneOf	plugged/coc.nvim/data/schema.json	/^          "oneOf": [$/;"	a	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$
oneline_comments	plugged/vim-polyglot/syntax/spup.vim	/^    let oneline_comments = 2$/;"	v
operator	plugged/coc.nvim/data/schema.json	/^        "operator": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
opts.sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
packages	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*package[ \\t]+([a-zA-Z0-9_.]+)\/\\1\/p,packages\/$/;"	k	langdef:scala
parse_remote	plugged/vim-polyglot/scripts/build	/^def parse_remote(remote)$/;"	f
path	plugged/vim-polyglot/ftplugin/awk.vim	/^  let path = substitute(path, ':', ',', 'g')$/;"	v
path	plugged/vim-polyglot/ftplugin/awk.vim	/^  let path = substitute(path, '^\\.\\=:\\|:\\.\\=$\\|:\\.\\=:', ',,', 'g') " POSIX cwd$/;"	v
path	plugged/vim-polyglot/ftplugin/awk.vim	/^  let path = system("gawk 'BEGIN { printf ENVIRON[\\"AWKPATH\\"] }'")$/;"	v
pathlist	plugged/vim-polyglot/autoload/julia/doc.vim	/^    let pathlist = sort(glob($LOCALAPPDATA . '\\Julia-*\\bin\\julia.exe', 1, 1))$/;"	v
paths	plugged/nvim-yarp/pythonx/yarp.py	/^    paths = nvim.eval(r'globpath(&rtp,"pythonx",1) . "\\n" .'$/;"	v
pattern	plugged/coc.nvim/data/schema.json	/^      "pattern": "^https?:\/\/([^:]*(:[^@]*)?@)?([^:]+|\\\\[[:0-9a-fA-F]+\\\\])(:\\\\d+)?\/?$|^$/;"	s	object:properties.http.proxy
patternProperties	plugged/coc.nvim/data/schema.json	/^      "patternProperties": {$/;"	o	object:properties.languageserver
pattern_to_condition	plugged/vim-polyglot/scripts/build	/^def pattern_to_condition(rule)$/;"	f	method:copy_file
patterns_to_vim_patterns	plugged/vim-polyglot/scripts/build	/^def patterns_to_vim_patterns(patterns)$/;"	f
perlpath	plugged/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/raku.vim	/^                let perlpath = system("perl6 -e  '@*INC.join(q\/,\/).say'")$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/raku.vim	/^                let perlpath = system('perl6 -e  "@*INC.join(q\/,\/).say"')$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/raku.vim	/^            let perlpath = ".,,"$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/raku.vim	/^            let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	plugged/vim-polyglot/ftplugin/raku.vim	/^        let perlpath = ".,,"$/;"	v
php_folding	plugged/vim-polyglot/syntax/php.vim	/^  let php_folding = 0$/;"	v
php_html_in_heredoc	plugged/vim-polyglot/syntax/php.vim	/^    let php_html_in_heredoc=1$/;"	v
php_html_in_heredoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_heredoc=0$/;"	v
php_html_in_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^    let php_html_in_nowdoc=1$/;"	v
php_html_in_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_nowdoc=0$/;"	v
php_html_in_strings	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_strings=0$/;"	v
php_html_load	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_load=1$/;"	v
php_phpdoc_folding	plugged/vim-polyglot/syntax/php.vim	/^  let php_phpdoc_folding = 0$/;"	v
php_sql_heredoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_sql_heredoc=1$/;"	v
php_sql_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_sql_nowdoc=1$/;"	v
php_sync_method	plugged/vim-polyglot/syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	plugged/vim-polyglot/syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
php_xml_heredoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_xml_heredoc=0$/;"	v
php_xml_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_xml_nowdoc=0$/;"	v
phrasing_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'co/;"	v
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plugin	plugged/vim-polyglot/ftplugin/crystal.vim	/^augroup plugin-ft-crystal$/;"	a
polyglot	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  augroup polyglot-observer$/;"	a
polyglot	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  augroup polyglot-sleuth$/;"	a
polyglot	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup polyglot-observer | augroup END$/;"	a
polyglot	plugged/vim-polyglot/plugin/polyglot.vim	/^    augroup polyglot-sensible$/;"	a
polyglot#detect#Asa	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Asa(...)$/;"	f
polyglot#detect#Asp	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Asp(...)$/;"	f
polyglot#detect#Bas	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Bas(...)$/;"	f
polyglot#detect#Fs	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Fs(...)$/;"	f
polyglot#detect#H	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#H(...)$/;"	f
polyglot#detect#Html	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Html(...)$/;"	f
polyglot#detect#Idr	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Idr(...)$/;"	f
polyglot#detect#Inp	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Inp(...)$/;"	f
polyglot#detect#Lidr	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Lidr(...)$/;"	f
polyglot#detect#M	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#M(...)$/;"	f
polyglot#detect#Pl	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Pl(...)$/;"	f
polyglot#detect#Pm	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Pm(...)$/;"	f
polyglot#detect#Re	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Re(...)$/;"	f
polyglot#detect#T	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#T(...)$/;"	f
polyglot#detect#Tt2	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Tt2(...)$/;"	f
polyglot#ft#BindzoneCheck	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#BindzoneCheck(default)$/;"	f
polyglot#ft#CSH	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#CSH()$/;"	f
polyglot#ft#Check_inp	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#Check_inp()$/;"	f
polyglot#ft#DtraceCheck	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#DtraceCheck()$/;"	f
polyglot#ft#EuphoriaCheck	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#EuphoriaCheck()$/;"	f
polyglot#ft#FTRules	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTRules()$/;"	f
polyglot#ft#FTVB	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTVB(alt)$/;"	f
polyglot#ft#FTasm	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTasm()$/;"	f
polyglot#ft#FTasmsyntax	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTasmsyntax()$/;"	f
polyglot#ft#FTbtm	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTbtm()$/;"	f
polyglot#ft#FTchange	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTchange()$/;"	f
polyglot#ft#FTe	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTe()$/;"	f
polyglot#ft#FTent	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTent()$/;"	f
polyglot#ft#FTheader	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTheader()$/;"	f
polyglot#ft#FThtml	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FThtml()$/;"	f
polyglot#ft#FTidl	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTidl()$/;"	f
polyglot#ft#FTinc	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTinc()$/;"	f
polyglot#ft#FTlpc	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTlpc()$/;"	f
polyglot#ft#FTm	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTm()$/;"	f
polyglot#ft#FTmm	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTmm()$/;"	f
polyglot#ft#FTmms	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTmms()$/;"	f
polyglot#ft#FTnroff	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTnroff()$/;"	f
polyglot#ft#FTperl	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTperl()$/;"	f
polyglot#ft#FTpl	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTpl()$/;"	f
polyglot#ft#FTprogress_asm	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_asm()$/;"	f
polyglot#ft#FTprogress_cweb	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_cweb()$/;"	f
polyglot#ft#FTprogress_pascal	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_pascal()$/;"	f
polyglot#ft#FTr	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTr()$/;"	f
polyglot#ft#FTtex	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTtex()$/;"	f
polyglot#ft#FTxml	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTxml()$/;"	f
polyglot#ft#FTy	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTy()$/;"	f
polyglot#ft#McSetf	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#McSetf()$/;"	f
polyglot#ft#ProtoCheck	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#ProtoCheck(default)$/;"	f
polyglot#ft#Redif	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#Redif()$/;"	f
polyglot#ft#SQL	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SQL()$/;"	f
polyglot#ft#SetFileTypeSH	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SetFileTypeSH(name)$/;"	f
polyglot#ft#SetFileTypeShell	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SetFileTypeShell(name)$/;"	f
polyglot#shebang#Detect	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^func! polyglot#shebang#Detect()$/;"	f
polyglot#shebang#VimDetect	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^func! polyglot#shebang#VimDetect()$/;"	f
polyglot#sleuth#GlobForFiletype	plugged/vim-polyglot/autoload/polyglot/sleuth.vim	/^func! polyglot#sleuth#GlobForFiletype(type)$/;"	f
pony	plugged/vim-polyglot/indent/pony.vim	/^augroup pony$/;"	a
pony#ClearTrailingSpace	plugged/vim-polyglot/autoload/pony.vim	/^function! pony#ClearTrailingSpace(all, alt, ...)$/;"	f
pony#Indent	plugged/vim-polyglot/autoload/pony.vim	/^function! pony#Indent()$/;"	f
port	plugged/coc.nvim/data/schema.json	/^        "port": {$/;"	o	object:definitions.languageServerSocket.properties
port	plugged/nvim-yarp/pythonx/yarp.py	/^        port = int(port)$/;"	v
port	plugged/nvim-yarp/pythonx/yarp.py	/^        serveraddr, port = serveraddr.split(':')$/;"	v
postscr_level	plugged/vim-polyglot/syntax/postscr.vim	/^  let postscr_level = 2$/;"	v
ppwiz_highlight_defs	plugged/vim-polyglot/syntax/ppwiz.vim	/^    let ppwiz_highlight_defs = 1$/;"	v
ppwiz_with_html	plugged/vim-polyglot/syntax/ppwiz.vim	/^    let ppwiz_with_html = 1$/;"	v
print_and	plugged/vim-polyglot/scripts/build	/^def print_and(list)$/;"	f	method:copy_file.rules_to_code.rule_to_code
print_pattern	plugged/vim-polyglot/scripts/import_vim	/^def print_pattern(p)$/;"	f
prior_isk	plugged/vim-polyglot/syntax/rst.vim	/^    let prior_isk = &l:iskeyword$/;"	v
process_list	plugged/vim-polyglot/scripts/build	/^def process_list(list, extras)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
progress	plugged/vim-polyglot/scripts/build	/^def progress$/;"	f	method:copy_file
progressOnInitialization	plugged/coc.nvim/data/schema.json	/^        "progressOnInitialization": {$/;"	o	object:definitions.languageServerBase.properties
progressOnInitialization	plugged/coc.nvim/data/schema.json	/^        "progressOnInitialization": {},$/;"	o	object:definitions.languageServerCommand.properties
progressOnInitialization	plugged/coc.nvim/data/schema.json	/^        "progressOnInitialization": {},$/;"	o	object:definitions.languageServerModule.properties
progressOnInitialization	plugged/coc.nvim/data/schema.json	/^        "progressOnInitialization": {},$/;"	o	object:definitions.languageServerSocket.properties
projects	plugged/coc.nvim/package.json	/^    "projects": [$/;"	a	object:jest
properties	plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerBase
properties	plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerCommand
properties	plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerModule
properties	plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerSocket
properties	plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:properties.suggest.completionItemKindLabels
properties	plugged/coc.nvim/data/schema.json	/^  "properties": {$/;"	o
property	plugged/coc.nvim/data/schema.json	/^        "property": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
puppet	plugged/vim-polyglot/ctags/puppet.ctags	/^--langdef=puppet$/;"	l
puppet	plugged/vim-polyglot/ctags/puppet_u.ctags	/^--langdef=puppet$/;"	l
puppet#align#AlignHashrockets	plugged/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#AlignHashrockets(...) abort$/;"	f
puppet#align#IndentLevel	plugged/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#IndentLevel(lnum)$/;"	f
puppet#align#LinesInBlock	plugged/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#LinesInBlock(lnum)$/;"	f
puppet#ctags#OptionFile	plugged/vim-polyglot/autoload/puppet/ctags.vim	/^function! puppet#ctags#OptionFile()$/;"	f
puppet#ctags#Type	plugged/vim-polyglot/autoload/puppet/ctags.vim	/^function! puppet#ctags#Type()$/;"	f
puppet#format#Fallback	plugged/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Fallback(start_lnum, end_lnum) abort$/;"	f
puppet#format#Format	plugged/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Format() abort$/;"	f
puppet#format#Hashrocket	plugged/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Hashrocket(start_lnum, end_lnum) abort$/;"	f
puppet#format#Indention	plugged/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Indention(start_lnum, end_lnum) abort$/;"	f
python#utils#fix_qflist	plugged/vim-polyglot/autoload/python/utils.vim	/^function! python#utils#fix_qflist() " {{{$/;"	f
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	plugged/vim-polyglot/autoload/ledger.vim	/^  nnoremap <silent> <buffer> q <c-w><c-p>@=winnr('#')<cr><c-w>c$/;"	m
q	plugged/vim-polyglot/ftplugin/coffee.vim	/^  nnoremap <buffer> <silent> q :hide<CR>$/;"	m
q	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^  nnoremap <buffer> <silent> q :q<CR>$/;"	m
q	plugged/vim-polyglot/ftplugin/ls.vim	/^    nnoremap <buffer> <silent> q :hide<CR>$/;"	m
r	plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.r = function(exports) {$/;"	f	function:__webpack_require__
rdfa_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': /;"	v
rdfa_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
readline	plugged/coc.nvim/bin/prompt.js	/^const readline = require("readline")$/;"	C
reconcile	plugged/vim-polyglot/autoload/ledger.vim	/^    augroup reconcile$/;"	a
reconcile	plugged/vim-polyglot/autoload/ledger.vim	/^  augroup reconcile$/;"	a
refactor.afterContext	plugged/coc.nvim/data/schema.json	/^    "refactor.afterContext": {$/;"	o	object:properties
refactor.beforeContext	plugged/coc.nvim/data/schema.json	/^    "refactor.beforeContext": {$/;"	o	object:properties
refactor.openCommand	plugged/coc.nvim/data/schema.json	/^    "refactor.openCommand": {$/;"	o	object:properties
refactor.saveToFile	plugged/coc.nvim/data/schema.json	/^    "refactor.saveToFile": {$/;"	o	object:properties
reference	plugged/coc.nvim/data/schema.json	/^        "reference": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
referrerpolicy	plugged/vim-polyglot/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'str/;"	v
regex_extra	plugged/vim-polyglot/ftplugin/sql.vim	/^                let regex_extra = '\\\\w*'$/;"	v
regex_extra	plugged/vim-polyglot/ftplugin/sql.vim	/^        let regex_extra = ''$/;"	v
relationship_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
relrev	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'inde/;"	v
repository	plugged/coc.nvim/package.json	/^  "repository": {$/;"	o
requireRootPattern	plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {$/;"	o	object:definitions.languageServerBase.properties
requireRootPattern	plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerCommand.properties
requireRootPattern	plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerModule.properties
requireRootPattern	plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerSocket.properties
required	plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	a	object:definitions.languageServerCommand
required	plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	a	object:definitions.languageServerModule
required	plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	a	object:definitions.languageServerSocket
resource	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*[~|\\-]?>?[[:space:]]*([a-z][a-zA-Z0-9_:]+)[[:space:]]*\\{ *(.*):\//;"	k	langdef:puppet
revealOutputChannelOn	plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {$/;"	o	object:definitions.languageServerBase.properties
revealOutputChannelOn	plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerCommand.properties
revealOutputChannelOn	plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerModule.properties
revealOutputChannelOn	plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerSocket.properties
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-le/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-mult/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbo/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['ra/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin'/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation'/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'ari/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-sel/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline'/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required'/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
rootPatterns	plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {$/;"	o	object:definitions.languageServerBase.properties
rootPatterns	plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerCommand.properties
rootPatterns	plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerModule.properties
rootPatterns	plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerSocket.properties
rp.error	plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.error(msg) dict$/;"	f
rp.warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.warn(msg) dict$/;"	f
ruby_minlines	plugged/vim-polyglot/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
rubycomplete#Complete	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rule_to_code	plugged/vim-polyglot/scripts/build	/^def rule_to_code(rule)$/;"	f	method:copy_file.rules_to_code
rules_to_code	plugged/vim-polyglot/scripts/build	/^def rules_to_code(rules)$/;"	f	method:copy_file
run_script	plugged/vim-polyglot/scripts/test	/^def run_script(src)$/;"	f
run_vimscript	plugged/vim-polyglot/scripts/test	/^def run_vimscript(src)$/;"	f
runtime	plugged/coc.nvim/data/schema.json	/^        "runtime": {$/;"	o	object:definitions.languageServerModule.properties
rust	plugged/vim-polyglot/after/syntax/rust.vim	/^    augroup rust.vim.after$/;"	a
rust	plugged/vim-polyglot/ftplugin/rust.vim	/^    augroup rust.vim.DelimitMate$/;"	a
rust	plugged/vim-polyglot/ftplugin/rust.vim	/^augroup rust.vim.PreWrite$/;"	a
rust#AppendCmdLine	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
rust#CompleteExpand	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
rust#Expand	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
rust#GetConfigVar	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#GetConfigVar(name, default)$/;"	f
rust#IncludeExpr	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#IncludeExpr(fname) abort$/;"	f
rust#Jump	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
rust#Load	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Load()$/;"	f
rust#Play	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
rust#Run	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
rust#Test	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Test(mods, winsize, all, options) abort$/;"	f
rust#debugging#Info	plugged/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#Info() abort$/;"	f
rust#debugging#InfoToClipboard	plugged/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToClipboard() abort$/;"	f
rust#debugging#InfoToFile	plugged/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToFile(filename) abort$/;"	f
rust#delimitmate#onMap	plugged/vim-polyglot/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onMap() abort$/;"	f
rust#delimitmate#onUnmap	plugged/vim-polyglot/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onUnmap() abort$/;"	f
rust#tags#IsUCtags	plugged/vim-polyglot/autoload/rust/tags.vim	/^function! rust#tags#IsUCtags() abort$/;"	f
rustfmt#Cmd	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Cmd()$/;"	f
rustfmt#DetectVersion	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#DetectVersion()$/;"	f
rustfmt#Format	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#FormatRange	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Load	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Load()$/;"	f
rustfmt#PreWrite	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#PreWrite()$/;"	f
s	init.vim	/^map  s <Plug>(easymotion-bd-f)$/;"	m
s	init.vim	/^nmap s <Plug>(easymotion-overwin-f)$/;"	m
s	plugged/vim-polyglot/syntax/xpm.vim	/^	 let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	plugged/vim-polyglot/syntax/xpm.vim	/^   let s = matchstr(getline(i), '".\\{-1,}"')$/;"	v
s	plugged/vim-polyglot/syntax/xpm2.vim	/^	let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	plugged/vim-polyglot/syntax/xpm2.vim	/^	let s = substitute(s, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
s	plugged/vim-polyglot/syntax/xpm2.vim	/^      let s = matchstr(s, "^[^\\!]*")$/;"	v
s	plugged/vim-polyglot/syntax/xpm2.vim	/^    let s = getline(i)$/;"	v
s:Accents	plugged/vim-polyglot/syntax/tex.vim	/^   fun! s:Accents(chr,...)$/;"	f
s:AccessModifier	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
s:AdaBlockStart	plugged/vim-polyglot/indent/ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\/;"	v
s:Add	plugged/vim-polyglot/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
s:AddAnsiGroups	plugged/coc.nvim/plugin/coc.vim	/^function! s:AddAnsiGroups() abort$/;"	f
s:AddBlockTag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
s:AddBlockTag	plugged/vim-polyglot/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
s:AddITags	plugged/vim-polyglot/after/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
s:AddITags	plugged/vim-polyglot/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
s:AfterAccessModifier	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
s:AfterBlockOpening	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
s:AfterEndKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
s:AfterHangingSplat	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
s:AfterIndentKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
s:AfterLeadingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
s:AfterUnbalancedBracket	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
s:Alien2	plugged/vim-polyglot/after/indent/html.vim	/^func! s:Alien2()$/;"	f
s:Alien2	plugged/vim-polyglot/indent/html.vim	/^func! s:Alien2()$/;"	f
s:Alien3	plugged/vim-polyglot/after/indent/html.vim	/^func! s:Alien3()$/;"	f
s:Alien3	plugged/vim-polyglot/indent/html.vim	/^func! s:Alien3()$/;"	f
s:Alien4	plugged/vim-polyglot/after/indent/html.vim	/^func! s:Alien4()$/;"	f
s:Alien4	plugged/vim-polyglot/indent/html.vim	/^func! s:Alien4()$/;"	f
s:Alien5	plugged/vim-polyglot/after/indent/html.vim	/^func! s:Alien5()$/;"	f
s:Alien5	plugged/vim-polyglot/indent/html.vim	/^func! s:Alien5()$/;"	f
s:Alien6	plugged/vim-polyglot/after/indent/html.vim	/^func! s:Alien6()$/;"	f
s:Alien6	plugged/vim-polyglot/indent/html.vim	/^func! s:Alien6()$/;"	f
s:AlternatePair	plugged/vim-polyglot/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
s:AsyncRequest	plugged/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
s:Autocmd	plugged/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
s:BEGIN_BLOCK	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK = s:BEGIN_BLOCK_KEYWORD . '\\|' . s:COMPOUND_EXPRESSION$/;"	v
s:BEGIN_BLOCK_KEYWORD	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_KEYWORD = '\\C^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:BEGIN_BLOCK_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_OP = '[([{:=]$'$/;"	v
s:BMAdd	plugged/vim-polyglot/extras/menu.vim	/^func s:BMAdd()$/;"	f
s:BMCanAdd	plugged/vim-polyglot/extras/menu.vim	/^func s:BMCanAdd(name, num)$/;"	f
s:BMFilename	plugged/vim-polyglot/extras/menu.vim	/^func s:BMFilename(name, num)$/;"	f
s:BMHash	plugged/vim-polyglot/extras/menu.vim	/^func s:BMHash(name)$/;"	f
s:BMHash2	plugged/vim-polyglot/extras/menu.vim	/^func s:BMHash2(name)$/;"	f
s:BMMunge	plugged/vim-polyglot/extras/menu.vim	/^func s:BMMunge(fname, bnum)$/;"	f
s:BMRemove	plugged/vim-polyglot/extras/menu.vim	/^func s:BMRemove()$/;"	f
s:BMShow	plugged/vim-polyglot/extras/menu.vim	/^func s:BMShow(...)$/;"	f
s:BMTruncName	plugged/vim-polyglot/extras/menu.vim	/^func s:BMTruncName(fname)$/;"	f
s:BRACKET_CONTINUATION	plugged/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_CONTINUATION = '^\\s*[}\\])]\\s*' . s:CONTINUATION_OP$/;"	v
s:BRACKET_PAIRS	plugged/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_PAIRS = {']': '\\[', '}': '{', ')': '('}$/;"	v
s:BREAK_BLOCK_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:BREAK_BLOCK_OP = '\\C^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:Balanced	plugged/vim-polyglot/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
s:BeginElementFound	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFound(stack, token, curr_vcol, stored_vcol, end_token, sw)$/;"	f
s:BeginElementFoundIfEmpty	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFoundIfEmpty(stack, token, curr_vcol, stored_vcol, sw)$/;"	f
s:BeginningOfClauseFound	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginningOfClauseFound(stack, token, stored_vcol, lnum, i)$/;"	f
s:BlockComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
s:Block_pattern	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Block_pattern(lin1,lin2,col1,col2)$/;"	f
s:BuildStructures	plugged/vim-polyglot/indent/twig.vim	/^fun! s:BuildStructures()$/;"	f
s:C	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:C = s:V.import('ColorEcho')$/;"	v
s:COLORS	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:COLORS = {$/;"	v
s:COMPOUND_ASSIGNMENT	plugged/vim-polyglot/indent/ls.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:COMPOUND_ASSIGNMENT	plugged/vim-polyglot/indent/moon.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|'$/;"	v
s:COMPOUND_EXPRESSION	plugged/vim-polyglot/indent/coffee.vim	/^let s:COMPOUND_EXPRESSION = '\\C\\%([^-]-\\|[^+]+\\|[^\/]\/\\|[:=*%&|^<>]\\)\\s*'$/;"	v
s:CONTAINED_THEN	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTAINED_THEN = '\\C[(\\[].\\{-}\\<then\\>.\\{-\\}[)\\]]'$/;"	v
s:CONTINUATION	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION = s:CONTINUATION_OP . '\\|' . s:BEGIN_BLOCK_OP$/;"	v
s:CONTINUATION	plugged/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\|do\\)\\>$'$/;"	v
s:CONTINUATION	plugged/vim-polyglot/indent/moon.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	plugged/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:CONTINUATION_BLOCK	plugged/vim-polyglot/indent/moon.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:CONTINUATION_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION_OP = '\\C\\%(\\<\\%(is\\|isnt\\|and\\|or\\)\\>\\|'$/;"	v
s:CSSIndent	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CSSIndent()$/;"	f
s:CSSIndent	plugged/vim-polyglot/indent/html.vim	/^func! s:CSSIndent()$/;"	f
s:CacheRstFold	plugged/vim-polyglot/autoload/RstFold.vim	/^function s:CacheRstFold()$/;"	f
s:CalcVCol	plugged/vim-polyglot/indent/erlang.vim	/^function! s:CalcVCol(line, first_index, last_index, vcol, tabstop)$/;"	f
s:Call	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
s:CallBaseIndent	plugged/vim-polyglot/indent/twig.vim	/^function! s:CallBaseIndent()$/;"	f
s:Cb	plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:Cb() closure$/;"	f
s:ChannelSet	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:ChannelSet(dict, key, val)$/;"	f
s:CharAtCursor	plugged/vim-polyglot/autoload/pony.vim	/^function! s:CharAtCursor(...)$/;"	f
s:CheckBlockTag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
s:CheckBlockTag	plugged/vim-polyglot/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
s:CheckCustomTag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
s:CheckCustomTag	plugged/vim-polyglot/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
s:CheckForFunctions	plugged/vim-polyglot/syntax/octave.vim	/^function! s:CheckForFunctions()$/;"	f
s:CheckPairedIsLastCharacter	plugged/vim-polyglot/indent/tex.vim	/^function! s:CheckPairedIsLastCharacter(lnum, col) "{{{$/;"	f
s:CheckTag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
s:CheckTag	plugged/vim-polyglot/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
s:CheckToIgnoreRightParen	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:CheckToIgnoreRightParen( prev_lnum, num_levels )$/;"	f
s:ClearTokenCacheIfNeeded	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ClearTokenCacheIfNeeded()$/;"	f
s:ClosingBracketOnEmptyLine	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
s:ClosingHeredocDelimiter	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
s:CodeActionFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
s:CoffeeCompile	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
s:CoffeeCompileClose	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
s:CoffeeCompileResetVars	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
s:CoffeeCompileToBuf	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileToBuf(buf, startline, endline)$/;"	f
s:CoffeeComplete	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeComplete(cmd, cmdline, cursor)$/;"	f
s:CoffeeLint	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeLint(startline, endline, bang, args)$/;"	f
s:CoffeeMakeDeprecated	plugged/vim-polyglot/compiler/coffee.vim	/^function! s:CoffeeMakeDeprecated(bang, args)$/;"	f
s:CoffeeRun	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRun(startline, endline, args)$/;"	f
s:CoffeeRunClose	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunClose()$/;"	f
s:CoffeeRunResetVars	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunResetVars()$/;"	f
s:CoffeeWatch	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatch(args)$/;"	f
s:CoffeeWatchClose	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchClose()$/;"	f
s:CoffeeWatchResetVars	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchResetVars()$/;"	f
s:CoffeeWatchUpdate	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchUpdate()$/;"	f
s:ColonEnd	plugged/vim-polyglot/indent/occam.vim	/^let s:ColonEnd = '\\(--.*\\)\\@<!:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColonIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:ColonIndent = '\\(--.*\\)\\@<!\\<PROC\\>'$/;"	v
s:ColonNonColonEndIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:ColonNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\/;"	v
s:ColonStart	plugged/vim-polyglot/indent/occam.vim	/^let s:ColonStart = '^\\s*:\\s*\\(--.*\\)\\=$'$/;"	v
s:CommandList	plugged/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
s:Comment	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:Comment(arg)$/;"	f
s:CommentKeywordMatch	plugged/vim-polyglot/syntax/swift.vim	/^function! s:CommentKeywordMatch(keyword)$/;"	f
s:CommentLine	plugged/vim-polyglot/indent/occam.vim	/^let s:CommentLine = '^\\s*--'$/;"	v
s:CommentOrString	plugged/vim-polyglot/indent/mp.vim	/^function! s:CommentOrString(line, pos)$/;"	f
s:ContainedGroup	plugged/vim-polyglot/syntax/scala.vim	/^function! s:ContainedGroup()$/;"	f
s:ContinuedHangingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
s:ContinuedLine	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
s:Continues	plugged/vim-polyglot/indent/javascript.vim	/^function s:Continues()$/;"	f
s:CountITags	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CountITags(text)$/;"	f
s:CountITags	plugged/vim-polyglot/indent/html.vim	/^func! s:CountITags(text)$/;"	f
s:CountTagsAndState	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
s:CountTagsAndState	plugged/vim-polyglot/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
s:CountUnbalancedParen	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:CountUnbalancedParen( line, paren_to_check )$/;"	f
s:Cpath	plugged/vim-polyglot/syntax/lex.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	plugged/vim-polyglot/syntax/lex.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h")."\/cpp.vim")$/;"	v
s:Cpath	plugged/vim-polyglot/syntax/yacc.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	plugged/vim-polyglot/syntax/yacc.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h").(exists("g:yacc_uses_cpp")? "\/cpp.vim" : "\/c.vi/;"	v
s:CreateOrExpression	plugged/vim-polyglot/ftplugin/scala.vim	/^function! s:CreateOrExpression(keywords)$/;"	f
s:CssFirstUnfinished	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
s:CssFirstUnfinished	plugged/vim-polyglot/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
s:CssPrevNonComment	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
s:CssPrevNonComment	plugged/vim-polyglot/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
s:CssUnfinished	plugged/vim-polyglot/after/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
s:CssUnfinished	plugged/vim-polyglot/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
s:CurrentNimFile	plugged/vim-polyglot/autoload/nim.vim	/^fun! s:CurrentNimFile() abort$/;"	f
s:Cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
s:Cursor.column	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
s:Cursor.line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
s:Cursor.move	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
s:Cursor.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
s:Cursor.remove_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
s:Cursor.restore_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
s:Cursor.save_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
s:Cursor.update_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
s:Cursor.update_line_length	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
s:Cursor.update_position	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
s:Cursor.update_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
s:CursorManager	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
s:CursorManager.add	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
s:CursorManager.debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
s:CursorManager.delete_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
s:CursorManager.get	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
s:CursorManager.get_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
s:CursorManager.initialize	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
s:CursorManager.is_empty	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
s:CursorManager.loop_done	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
s:CursorManager.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
s:CursorManager.next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
s:CursorManager.reapply_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
s:CursorManager.remove_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
s:CursorManager.reposition_all_within_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
s:CursorManager.reset	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
s:CursorManager.restore_user_settings	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
s:CursorManager.size	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
s:CursorManager.start_loop	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
s:CursorManager.update_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
s:CursorRangeFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:CursorRangeFromSelected(type, ...) abort$/;"	f
s:DEFAULT_LEVEL	plugged/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = '-1'$/;"	v
s:DEFAULT_LEVEL	plugged/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = 'indent(prevnlnum)'$/;"	v
s:DOT_ACCESS	plugged/vim-polyglot/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DOT_ACCESS	plugged/vim-polyglot/indent/ls.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DOT_ACCESS	plugged/vim-polyglot/indent/moon.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DecreaseFunc	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:DecreaseFunc(type)$/;"	f
s:DecreaseIndent	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:DecreaseIndent()$/;"	f
s:DecreaseIndentOnClosingTag	plugged/vim-polyglot/indent/mp.vim	/^function! s:DecreaseIndentOnClosingTag(curr_indent)$/;"	f
s:DefRuby	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
s:DefineInlineMarkup	plugged/vim-polyglot/syntax/rst.vim	/^function! s:DefineInlineMarkup(name, start, middle, end)$/;"	f
s:DefineOneInlineMarkup	plugged/vim-polyglot/syntax/rst.vim	/^function! s:DefineOneInlineMarkup(name, start, middle, end, char_left, char_right)$/;"	f
s:DeindentingKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
s:DeleteLines	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:DeleteLines(start, end) abort$/;"	f
s:Disable	plugged/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
s:DoWhile	plugged/vim-polyglot/indent/javascript.vim	/^function s:DoWhile()$/;"	f
s:DocumentationForSymbolRequest	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:DocumentationForSymbolRequest(xmlSig, assembly)$/;"	f
s:DotPackagesFile	plugged/vim-polyglot/autoload/dart.vim	/^function! s:DotPackagesFile() abort$/;"	f
s:ECRDedent	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:ECRDedent(...) abort$/;"	f
s:ECRIndent	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:ECRIndent(...) abort$/;"	f
s:ELSE_COND	plugged/vim-polyglot/indent/coffee.vim	/^let s:ELSE_COND = '\\C^\\s*else\\s\\+\\<\\%(if\\|unless\\)\\>'$/;"	v
s:ES	plugged/vim-polyglot/indent/vhdl.vim	/^let s:ES = '\\s*\\%(--.*\\)\\=$'$/;"	v
s:ESCAPEDCHARS	plugged/vim-polyglot/autoload/julia/doc.vim	/^  let s:ESCAPEDCHARS = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:ESCAPEDCHARS	plugged/vim-polyglot/autoload/julia/doc.vim	/^  let s:ESCAPEDCHARS = " \\t\\n\\"#%'*<?`|"$/;"	v
s:Echo	plugged/vim-polyglot/autoload/rust/debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:EchoGlobalVariables	plugged/vim-polyglot/autoload/rust/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EditUrlUnderCursor	plugged/vim-polyglot/ftplugin/markdown.vim	/^    function s:EditUrlUnderCursor()$/;"	f
s:EditVimrc	plugged/vim-polyglot/extras/menu.vim	/^fun! s:EditVimrc()$/;"	f
s:Eglobal	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Eglobal(bang, ...) range$/;"	f
s:Ematch	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Ematch(...)$/;"	f
s:Emit	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
s:EmptyInsideString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
s:Enable	plugged/coc.nvim/plugin/coc.vim	/^function! s:Enable(initialize)$/;"	f
s:EnableByDefault	plugged/vim-polyglot/syntax/python.vim	/^function! s:EnableByDefault(name)$/;"	f
s:Enabled	plugged/vim-polyglot/syntax/python.vim	/^function! s:Enabled(name)$/;"	f
s:EndBlockIndent	plugged/vim-polyglot/indent/ada.vim	/^function s:EndBlockIndent( prev_indent, prev_lnum, blockstart, blockend )$/;"	f
s:EndStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:EndStructure(name)$/;"	f
s:Enter_annotation_buffer	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Enter_annotation_buffer(annot_file_path)$/;"	f
s:ErlangCalcIndent	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent(lnum, stack)$/;"	f
s:ErlangCalcIndent2	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent2(lnum, stack)$/;"	f
s:ErrMsg	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
s:EscapeAndUnescape	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:EscapeAndUnescape(vimregex, delim)$/;"	f
s:Esubstitute	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Esubstitute(...) range$/;"	f
s:Evglobal	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Evglobal(...) range$/;"	f
s:ExchangeReplaceSpecials	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ExchangeReplaceSpecials(replacement, sort)$/;"	f
s:Exit_annotation_buffer	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Exit_annotation_buffer()$/;"	f
s:ExitingOneLineScope	plugged/vim-polyglot/indent/solidity.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
s:ExitingOneLineScope	plugged/vim-polyglot/indent/typescript.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
s:Expand	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
s:ExpandAtomsInBrackets	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ExpandAtomsInBrackets(bracket)$/;"	f
s:ExpandMap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ExpandMap(map)$/;"	f
s:ExprCol	plugged/vim-polyglot/indent/javascript.vim	/^function s:ExprCol()$/;"	f
s:ExtendedRegex2VimRegex	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ExtendedRegex2VimRegex(extendedregex, ...)$/;"	f
s:ExtendedRegex2VimRegexLineWise	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ExtendedRegex2VimRegexLineWise(...) range$/;"	f
s:ExtensionList	plugged/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
s:ExtraBrackets	plugged/vim-polyglot/indent/falcon.vim	/^function s:ExtraBrackets(lnum)$/;"	f
s:ExtraBrackets	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
s:Extract_type_data	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Extract_type_data(block_pattern, annot_file_name)$/;"	f
s:FALSE	plugged/vim-polyglot/indent/autohotkey.vim	/^let s:FALSE = 0$/;"	v
s:FNAMEESCAPEPATTERN	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:FNAMEESCAPEPATTERN = '\\\\\\ze[' . escape(s:ESCAPEDCHARS, ']^-\\') . ']'$/;"	v
s:FUNCTION	plugged/vim-polyglot/indent/coffee.vim	/^let s:FUNCTION = '[-=]>$'$/;"	v
s:Ferm_SpecialDelimiters	plugged/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = 0$/;"	v
s:Ferm_SpecialDelimiters	plugged/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = g:Ferm_SpecialDelimiters$/;"	v
s:FileFormat	plugged/vim-polyglot/extras/menu.vim	/^fun! s:FileFormat()$/;"	f
s:Filetype	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^func! s:Filetype()$/;"	f
s:FindComment	plugged/vim-polyglot/indent/moon.vim	/^function! s:FindComment(linenum)$/;"	f
s:FindContainingClass	plugged/vim-polyglot/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
s:FindCornerOfSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindCornerOfSyntax(lnum, col, step)$/;"	f
s:FindCornersOfSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindCornersOfSyntax(lnum, col)$/;"	f
s:FindDartFmt	plugged/vim-polyglot/autoload/dart.vim	/^function! s:FindDartFmt() abort$/;"	f
s:FindECRControl	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:FindECRControl(...) abort$/;"	f
s:FindIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:FindIndToken(lnum, dir)$/;"	f
s:FindLeftOfSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindLeftOfSyntax(lnum, col)$/;"	f
s:FindLet	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
s:FindLet	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
s:FindLet	plugged/vim-polyglot/indent/sml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
s:FindNextSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindNextSyntax(lnum, col, name)$/;"	f
s:FindPair	plugged/vim-polyglot/indent/elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
s:FindPair	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
s:FindPair	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
s:FindPair	plugged/vim-polyglot/indent/sml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
s:FindPrevECRControl	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:FindPrevECRControl(...) abort$/;"	f
s:FindPrevLEIndentedLineMatchingRegex	plugged/vim-polyglot/indent/yaml.vim	/^function s:FindPrevLEIndentedLineMatchingRegex(lnum, regex)$/;"	f
s:FindPrevLessIndentedLine	plugged/vim-polyglot/indent/yaml.vim	/^function s:FindPrevLessIndentedLine(lnum, ...)$/;"	f
s:FindPreviousNonCompilerDirectiveLine	plugged/vim-polyglot/indent/cs.vim	/^function! s:FindPreviousNonCompilerDirectiveLine(start_lnum)$/;"	f
s:FindPreviousOpenStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:FindPreviousOpenStructure(lineNumber)$/;"	f
s:FindRightOfSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindRightOfSyntax(lnum, col)$/;"	f
s:FindStartLine	plugged/vim-polyglot/indent/nim.vim	/^function! s:FindStartLine(fromln, pattern)$/;"	f
s:Find_common_path	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Find_common_path (p1,p2)$/;"	f
s:FirstLevelIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:FirstLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\|PAR\\|SEQ\\|PRI\\s\\+PAR\\|WHILE\\/;"	v
s:FirstLevelNonColonEndIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:FirstLevelNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\/;"	v
s:First_word_len	plugged/vim-polyglot/indent/awk.vim	/^function! s:First_word_len( line )$/;"	f
s:FixFText	plugged/vim-polyglot/extras/menu.vim	/^fun! s:FixFText()$/;"	f
s:FnameEscape	plugged/vim-polyglot/extras/menu.vim	/^func s:FnameEscape(fname)$/;"	f
s:Fnameescape	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Fnameescape(s)$/;"	f
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<begin\\>$\\|'$/;"	v
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<exception\\>$\\|'$/;"	v
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<is\\>$\\|'$/;"	v
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<private\\>$\\|'$/;"	v
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^   let s:Fold_Collate .= '--\\)'$/;"	v
s:Fold_Collate	plugged/vim-polyglot/autoload/ada.vim	/^   let s:Fold_Collate = '^\\([;)]*$\\|'$/;"	v
s:FoldableRegion	plugged/vim-polyglot/syntax/lua.vim	/^function! s:FoldableRegion(tag, name, expr)$/;"	f
s:FormatFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
s:FreshState	plugged/vim-polyglot/after/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
s:FreshState	plugged/vim-polyglot/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
s:FsdnRequest	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:FsdnRequest(query)$/;"	f
s:GetBufferRubyClass	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
s:GetBufferRubyEntity	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
s:GetBufferRubyModule	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
s:GetBufferRubySingletonMethods	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
s:GetContents	plugged/vim-polyglot/indent/lua.vim	/^function s:GetContents(lnum)$/;"	f
s:GetDefaultPolicy	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetDefaultPolicy(curlnum)$/;"	f
s:GetDelim	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:GetDelim(str)$/;"	f
s:GetEndIndentation	plugged/vim-polyglot/indent/tex.vim	/^function! s:GetEndIndentation(lnum) " {{{$/;"	f
s:GetHeaderLevel	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderLevel(...)$/;"	f
s:GetHeaderLineNum	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderLineNum(...)$/;"	f
s:GetHeaderList	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderList()$/;"	f
s:GetInd	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
s:GetInd	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
s:GetInd	plugged/vim-polyglot/indent/sml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
s:GetIndtokenAtCol	plugged/vim-polyglot/indent/erlang.vim	/^function! s:GetIndtokenAtCol(indtokens, col)$/;"	f
s:GetLastBeginIndentation	plugged/vim-polyglot/indent/tex.vim	/^function! s:GetLastBeginIndentation(lnum) " {{{$/;"	f
s:GetLevelOfHeaderAtLine	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetLevelOfHeaderAtLine(linenum)$/;"	f
s:GetLineWithoutFullComment	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
s:GetLineWithoutFullComment	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
s:GetLiveScriptIndent	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetLiveScriptIndent(curlinenum)$/;"	f
s:GetMSL	plugged/vim-polyglot/indent/falcon.vim	/^function s:GetMSL(lnum)$/;"	f
s:GetMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
s:GetMSL	plugged/vim-polyglot/indent/solidity.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
s:GetMSL	plugged/vim-polyglot/indent/typescript.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
s:GetMakePrg	plugged/vim-polyglot/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
s:GetMakePrg	plugged/vim-polyglot/compiler/ls.vim	/^function! s:GetMakePrg()$/;"	f
s:GetMatch	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetMatch(curline)$/;"	f
s:GetMatch	plugged/vim-polyglot/indent/moon.vim	/^function! s:GetMatch(curline)$/;"	f
s:GetMdIndent	plugged/vim-polyglot/indent/rmd.vim	/^function s:GetMdIndent()$/;"	f
s:GetMoonIndent	plugged/vim-polyglot/indent/moon.vim	/^function! s:GetMoonIndent(curlinenum)$/;"	f
s:GetNextHeaderLineNumberAtLevel	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetNextHeaderLineNumberAtLevel(level, ...)$/;"	f
s:GetOffsetOf	plugged/vim-polyglot/indent/config.vim	/^function s:GetOffsetOf(line, regexp)$/;"	f
s:GetPair	plugged/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
s:GetParentHeaderLineNumber	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetParentHeaderLineNumber(...)$/;"	f
s:GetPrevNonCommentLineNum	plugged/vim-polyglot/indent/pascal.vim	/^function! s:GetPrevNonCommentLineNum( line_num )$/;"	f
s:GetPrevNormalLine	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlnum)$/;"	f
s:GetPrevNormalLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
s:GetPrevNormalLine	plugged/vim-polyglot/indent/moon.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
s:GetPreviousHeaderLineNumberAtLevel	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetPreviousHeaderLineNumberAtLevel(level, ...)$/;"	f
s:GetRelVer	plugged/vim-polyglot/ftplugin/spec.vim	/^	function! s:GetRelVer()$/;"	f
s:GetRubyVarType	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
s:GetScriptType	plugged/vim-polyglot/after/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
s:GetScriptType	plugged/vim-polyglot/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
s:GetStmtStarterIndent	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:GetStmtStarterIndent( keyword, curr_lnum )$/;"	f
s:GetSynStack	plugged/vim-polyglot/indent/purescript.vim	/^function! s:GetSynStack(lnum, col)$/;"	f
s:GetTokensFromLine	plugged/vim-polyglot/indent/erlang.vim	/^function! s:GetTokensFromLine(line, string_continuation, atom_continuation,$/;"	f
s:GetTrimmedLine	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetTrimmedLine(lnum)$/;"	f
s:GetTrimmedLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
s:GetTrimmedLine	plugged/vim-polyglot/indent/moon.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
s:GetVarIndent	plugged/vim-polyglot/indent/solidity.vim	/^function s:GetVarIndent(lnum)$/;"	f
s:GetVarIndent	plugged/vim-polyglot/indent/typescript.vim	/^function s:GetVarIndent(lnum)$/;"	f
s:GetVars	plugged/vim-polyglot/indent/javascript.vim	/^function s:GetVars()$/;"	f
s:GetYamlIndent	plugged/vim-polyglot/indent/rmd.vim	/^function s:GetYamlIndent()$/;"	f
s:Get_brace_balance	plugged/vim-polyglot/indent/awk.vim	/^function! s:Get_brace_balance( line, b_open, b_close )$/;"	f
s:Get_prev_line	plugged/vim-polyglot/indent/awk.vim	/^function! s:Get_prev_line( lineno )$/;"	f
s:Get_type	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Get_type(mode, annot_file_name)$/;"	f
s:GlobalChange	plugged/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
s:Go	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Go	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:Greek	plugged/vim-polyglot/syntax/tex.vim	/^  fun! s:Greek(group,pat,cchar)$/;"	f
s:HELPHISTORY	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:HELPHISTORY = []$/;"	v
s:HELPPROMPT	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:HELPPROMPT = 'help?> '$/;"	v
s:HeaderDecrease	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:HeaderDecrease(line1, line2, ...)$/;"	f
s:Helpfind	plugged/vim-polyglot/extras/menu.vim	/^fun! s:Helpfind()$/;"	f
s:Hi	plugged/coc.nvim/plugin/coc.vim	/^function! s:Hi() abort$/;"	f
s:INDENT_AFTER_KEYWORD	plugged/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_KEYWORD	plugged/vim-polyglot/indent/moon.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|with\\|elseif\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	plugged/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:INDENT_AFTER_OPERATOR	plugged/vim-polyglot/indent/moon.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:IS_WINDOWS	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:IS_WINDOWS = has('win32')$/;"	v
s:IdrisCommand	plugged/vim-polyglot/ftplugin/idris.vim	/^function! s:IdrisCommand(...)$/;"	f
s:IdrisCommand	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! s:IdrisCommand(...)$/;"	f
s:InBracket	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InBracket(...)$/;"	f
s:InComment	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InComment(...)$/;"	f
s:InComment2	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InComment2(...)$/;"	f
s:InCommentOrLiteral	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InCommentOrLiteral(...)$/;"	f
s:InKeyword	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InKeyword(...)$/;"	f
s:InLiteral	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InLiteral(...)$/;"	f
s:InLiteral2	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InLiteral2(...)$/;"	f
s:InMultiVarStatement	plugged/vim-polyglot/indent/solidity.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
s:InMultiVarStatement	plugged/vim-polyglot/indent/typescript.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
s:InOneLineScope	plugged/vim-polyglot/indent/solidity.vim	/^function s:InOneLineScope(lnum)$/;"	f
s:InOneLineScope	plugged/vim-polyglot/indent/typescript.vim	/^function s:InOneLineScope(lnum)$/;"	f
s:InString	plugged/vim-polyglot/indent/graphql.vim	/^function s:InString(lnum, col)$/;"	f
s:IncreaseFunc	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:IncreaseFunc(type)$/;"	f
s:IncreaseIndent	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:IncreaseIndent()$/;"	f
s:IndentError	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IndentError(msg, token, stack)$/;"	f
s:IndentWithContinuation	plugged/vim-polyglot/indent/solidity.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
s:IndentWithContinuation	plugged/vim-polyglot/indent/typescript.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
s:IndentingKeywordInMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
s:InnerPos	plugged/vim-polyglot/autoload/pony.vim	/^function! s:InnerPos(x, y)$/;"	f
s:InsertToc	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:InsertToc(format, ...)$/;"	f
s:InsideMultilineString	plugged/vim-polyglot/indent/puppet.vim	/^function! s:InsideMultilineString(lnum)$/;"	f
s:InsideTag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
s:InsideTag	plugged/vim-polyglot/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
s:InstallOptions	plugged/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
s:IsAssignment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
s:IsAttributeLine	plugged/vim-polyglot/indent/cs.vim	/^function! s:IsAttributeLine(line)$/;"	f
s:IsBlankLine	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsBlankLine(line)$/;"	f
s:IsBlock	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsBlock()$/;"	f
s:IsCatchStandalone	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsCatchStandalone(lnum, i)$/;"	f
s:IsColComment	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:IsColComment(lnum, cnum)$/;"	f
s:IsComment	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsComment(lnum, col)$/;"	f
s:IsComment	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsComment(linenum, col)$/;"	f
s:IsComment	plugged/vim-polyglot/indent/moon.vim	/^function! s:IsComment(linenum, col)$/;"	f
s:IsCommentLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsCommentLine(linenum)$/;"	f
s:IsCommentLine	plugged/vim-polyglot/indent/moon.vim	/^function! s:IsCommentLine(linenum)$/;"	f
s:IsCommentLine	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsCommentLine(lnum)$/;"	f
s:IsCommentOrString	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
s:IsCommentOrString	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
s:IsCommentOrString	plugged/vim-polyglot/indent/moon.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
s:IsCompilerDirective	plugged/vim-polyglot/indent/cs.vim	/^function! s:IsCompilerDirective(line)$/;"	f
s:IsContOne	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
s:IsContinued	plugged/vim-polyglot/autoload/pony.vim	/^function! s:IsContinued(lnum)$/;"	f
s:IsExcludedFromIndent	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndent()$/;"	f
s:IsExcludedFromIndentAtPosition	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndentAtPosition(line, column)$/;"	f
s:IsHeaderLine	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsHeaderLine(line)$/;"	f
s:IsInBlock	plugged/vim-polyglot/indent/hog.vim	/^function s:IsInBlock(lnum)$/;"	f
s:IsInClassDef	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
s:IsInComment	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
s:IsInCommentOrString	plugged/vim-polyglot/indent/lua.vim	/^function s:IsInCommentOrString(lnum, col)$/;"	f
s:IsInMultilineComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
s:IsInRubyGroup	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
s:IsInString	plugged/vim-polyglot/indent/falcon.vim	/^function s:IsInString(lnum, col)$/;"	f
s:IsInString	plugged/vim-polyglot/indent/json.vim	/^function s:IsInString(lnum, col)$/;"	f
s:IsInString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
s:IsInString	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInString(lnum, col)$/;"	f
s:IsInString	plugged/vim-polyglot/indent/typescript.vim	/^function s:IsInString(lnum, col)$/;"	f
s:IsInStringDelimiter	plugged/vim-polyglot/indent/falcon.vim	/^function s:IsInStringDelimiter(lnum, col)$/;"	f
s:IsInStringDelimiter	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
s:IsInStringOrComment	plugged/vim-polyglot/indent/falcon.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
s:IsInStringOrComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
s:IsInStringOrComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
s:IsInStringOrComment	plugged/vim-polyglot/indent/typescript.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
s:IsInStringOrDocumentation	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
s:IsLiStart	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsLiStart(line)$/;"	f
s:IsLineAtomContinuation	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsLineAtomContinuation(lnum)$/;"	f
s:IsLineComment	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:IsLineComment(lnum)$/;"	f
s:IsLineComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsLineComment(lnum, col)$/;"	f
s:IsLineStringContinuation	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsLineStringContinuation(lnum)$/;"	f
s:IsMkdCode	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsMkdCode(lnum)$/;"	f
s:IsPosInClassDef	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
s:IsStartingDelimiter	plugged/vim-polyglot/indent/blade.vim	/^function! s:IsStartingDelimiter(lnum)$/;"	f
s:IsString	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsString(lnum, col)$/;"	f
s:IsString	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsString(linenum, col)$/;"	f
s:IsString	plugged/vim-polyglot/indent/moon.vim	/^function! s:IsString(linenum, col)$/;"	f
s:IsSwitch	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
s:IsSyntaxNameExcludedFromIndent	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsSyntaxNameExcludedFromIndent(name)$/;"	f
s:J	plugged/vim-polyglot/autoload/crystal_lang.vim	/^  let s:J = s:V.import('Web.JSON')$/;"	v
s:Jump_Back	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
s:Jump_Forward	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
s:KEYWORDPATTERN	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:KEYWORDPATTERN = '\\m@\\?\\h\\k*!\\?'$/;"	v
s:KEYWORD_PAIRS	plugged/vim-polyglot/indent/coffee.vim	/^let s:KEYWORD_PAIRS = [$/;"	v
s:KIND_BLOCK_FOLLOW	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_BLOCK_FOLLOW = 1$/;"	v
s:KIND_BLOCK_PREC	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_BLOCK_PREC = 0$/;"	v
s:KIND_FUNC_BEGIN	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_FUNC_BEGIN = 2$/;"	v
s:KIND_FUNC_END	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_FUNC_END = 3$/;"	v
s:L2U_ResetLastCompletionInfo	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ResetLastCompletionInfo()$/;"	f
s:L2U_SetAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetAutoSub(wait_insert_enter)$/;"	f
s:L2U_SetFallbackMapping	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetFallbackMapping(s, k)$/;"	f
s:L2U_SetKeymap	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetKeymap()$/;"	f
s:L2U_SetTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetTab(wait_insert_enter)$/;"	f
s:L2U_Setup	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_Setup()$/;"	f
s:L2U_SetupGlobal	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetupGlobal()$/;"	f
s:L2U_UnsetAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetAutoSub()$/;"	f
s:L2U_UnsetKeymap	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetKeymap()$/;"	f
s:L2U_UnsetTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetTab()$/;"	f
s:L2U_deprecated_options	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_deprecated_options()$/;"	f
s:L2U_file_type_regex	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_file_type_regex(ft)$/;"	f
s:L2U_fix_compose_chars	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_fix_compose_chars(uni)$/;"	f
s:L2U_ismatch	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ismatch()$/;"	f
s:L2U_longest_common_prefix	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_longest_common_prefix(partmatches)$/;"	f
s:L2U_partmatches_sort	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_partmatches_sort(p1, p2)$/;"	f
s:LastTagIsOpen	plugged/vim-polyglot/indent/mp.vim	/^function! s:LastTagIsOpen(line)$/;"	f
s:LastValidMatchEnd	plugged/vim-polyglot/indent/mp.vim	/^function! s:LastValidMatchEnd(line, pat, start)$/;"	f
s:LeadingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
s:Left	plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:LineHasOpeningBrackets	plugged/vim-polyglot/indent/json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
s:LineHasOpeningBrackets	plugged/vim-polyglot/indent/solidity.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
s:LineHasOpeningBrackets	plugged/vim-polyglot/indent/typescript.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
s:LiveScriptCompile	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompile(startline, endline, args)$/;"	f
s:LiveScriptCompileClose	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileClose()$/;"	f
s:LiveScriptCompileComplete	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileComplete(arg, cmdline, cursor)$/;"	f
s:LiveScriptCompileResetVars	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileResetVars()$/;"	f
s:LiveScriptCompileUpdate	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileUpdate(startline, endline)$/;"	f
s:LiveScriptCompileWatchUpdate	plugged/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileWatchUpdate()$/;"	f
s:LoadVimSesn	plugged/vim-polyglot/extras/menu.vim	/^fun! s:LoadVimSesn()$/;"	f
s:Load_annotation	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Load_annotation(annot_file_name)$/;"	f
s:LoadedExtensions	plugged/coc.nvim/plugin/coc.vim	/^function! s:LoadedExtensions(...) abort$/;"	f
s:Locate_annotation	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Locate_annotation()$/;"	f
s:Log	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Log(s)$/;"	f
s:LookingAt	plugged/vim-polyglot/indent/javascript.vim	/^function s:LookingAt()$/;"	f
s:MAX_LOOKBACK	plugged/vim-polyglot/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MAX_LOOKBACK	plugged/vim-polyglot/indent/ls.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MAX_LOOKBACK	plugged/vim-polyglot/indent/moon.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MainBlockIndent	plugged/vim-polyglot/indent/ada.vim	/^function s:MainBlockIndent (prev_indent, prev_lnum, blockstart, stop_at)$/;"	f
s:Map	plugged/vim-polyglot/indent/twig.vim	/^function! s:Map(Fun, list)$/;"	f
s:MapNormVis	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MapNormVis(rhs,lhs)$/;"	f
s:MapNotHasmapto	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MapNotHasmapto(lhs, rhs)$/;"	f
s:MarkdownClearSyntaxVariables	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownClearSyntaxVariables()$/;"	f
s:MarkdownHighlightSources	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownHighlightSources(force)$/;"	f
s:MarkdownRefreshSyntax	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownRefreshSyntax(force)$/;"	f
s:Markdown_GetUrlForPosition	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:Markdown_GetUrlForPosition(lnum, col)$/;"	f
s:Match	plugged/vim-polyglot/indent/falcon.vim	/^function s:Match(lnum, regex)$/;"	f
s:Match	plugged/vim-polyglot/indent/json.vim	/^function s:Match(lnum, regex)$/;"	f
s:Match	plugged/vim-polyglot/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
s:Match	plugged/vim-polyglot/indent/solidity.vim	/^function s:Match(lnum, regex)$/;"	f
s:Match	plugged/vim-polyglot/indent/typescript.vim	/^function s:Match(lnum, regex)$/;"	f
s:MatchAt	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchAt(lnum, col, pattern) abort$/;"	f
s:MatchCount	plugged/vim-polyglot/indent/pov.vim	/^function! s:MatchCount(line, rexp)$/;"	f
s:MatchCursor	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchCursor(pattern) abort$/;"	f
s:MatchECR	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchECR(...) abort$/;"	f
s:MatchECRControl	plugged/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchECRControl(...) abort$/;"	f
s:MatchLast	plugged/vim-polyglot/indent/falcon.vim	/^function s:MatchLast(lnum, regex)$/;"	f
s:Match_borders	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Match_borders(mode)$/;"	f
s:Match_data	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Match_data()$/;"	f
s:MaxLookback	plugged/vim-polyglot/indent/ls.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
s:MaxLookback	plugged/vim-polyglot/indent/moon.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
s:ModuloIndent	plugged/vim-polyglot/indent/pgsql.vim	/^function! s:ModuloIndent(ind)$/;"	f
s:MoveToCurHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToCurHeader()$/;"	f
s:MoveToNextHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToNextHeader()$/;"	f
s:MoveToNextSiblingHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToNextSiblingHeader()$/;"	f
s:MoveToParentHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToParentHeader()$/;"	f
s:MoveToPreviousHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToPreviousHeader()$/;"	f
s:MoveToPreviousSiblingHeader	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToPreviousSiblingHeader()$/;"	f
s:MultilineStringOrLineComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
s:NC	plugged/vim-polyglot/indent/vhdl.vim	/^let s:NC = '\\%(--.*\\)\\@<!'$/;"	v
s:NE	plugged/vim-polyglot/indent/vhdl.vim	/^let s:NE = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:NODOCPATTERN	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:NODOCPATTERN = '\\C\\VNo documentation found.'$/;"	v
s:Nat	plugged/vim-polyglot/indent/javascript.vim	/^function s:Nat(int)$/;"	f
s:NextIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:NextIndToken(lnum, i)$/;"	f
s:NextSection	plugged/vim-polyglot/ftplugin/scala.vim	/^function! s:NextSection(backwards)$/;"	f
s:NoTeXIndent	plugged/vim-polyglot/indent/rnoweb.vim	/^function! s:NoTeXIndent()$/;"	f
s:NumberOfMatches	plugged/vim-polyglot/indent/swift.vim	/^function! s:NumberOfMatches(char, string, index)$/;"	f
s:OUTDENT_AFTER	plugged/vim-polyglot/indent/ls.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:OUTDENT_AFTER	plugged/vim-polyglot/indent/moon.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\)\\>'$/;"	v
s:Observe	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! s:Observe(fn)$/;"	f
s:OcpGrep	plugged/vim-polyglot/ftplugin/ocaml.vim	/^function! s:OcpGrep(bang,args) abort$/;"	f
s:OnExit	plugged/coc.nvim/autoload/coc/terminal.vim	/^  function! s:OnExit(status) closure$/;"	f
s:OnExit	plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnExit(status) closure$/;"	f
s:OneScope	plugged/vim-polyglot/indent/javascript.vim	/^function s:OneScope()$/;"	f
s:OpenBrace	plugged/vim-polyglot/indent/puppet.vim	/^function! s:OpenBrace(lnum)$/;"	f
s:OpenConfig	plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
s:OpenDiagnostics	plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenDiagnostics(...) abort$/;"	f
s:OpenUrlUnderCursor	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:OpenUrlUnderCursor()$/;"	f
s:Or	plugged/vim-polyglot/autoload/pony.vim	/^function! s:Or(x, y)$/;"	f
s:OuterPos	plugged/vim-polyglot/autoload/pony.vim	/^function! s:OuterPos(x, y)$/;"	f
s:P	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:P = s:V.import('Process')$/;"	v
s:POSTFIX_CONDITION	plugged/vim-polyglot/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\C\\S\\s\\+\\zs\\<\\%(if\\|unless\\|when\\|while\\|until\\)\\>'$/;"	v
s:POSTFIX_CONDITION	plugged/vim-polyglot/indent/ls.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:POSTFIX_CONDITION	plugged/vim-polyglot/indent/moon.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:PS	plugged/vim-polyglot/ftplugin/purescript.vim	/^let s:PS = []$/;"	v
s:PackageMap	plugged/vim-polyglot/autoload/dart.vim	/^function! s:PackageMap() abort$/;"	f
s:ParseCino	plugged/vim-polyglot/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
s:ParseCoffeeError	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:ParseCoffeeError(output, src, startline)$/;"	f
s:ParseRpmVars	plugged/vim-polyglot/ftplugin/spec.vim	/^    function s:ParseRpmVars(str, strline)$/;"	f
s:PartOfInclude	plugged/vim-polyglot/indent/puppet.vim	/^function! s:PartOfInclude(lnum)$/;"	f
s:PlainNotification	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:PlainNotification(content)$/;"	f
s:Pop	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Pop(stack)$/;"	f
s:Pop	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Pop()$/;"	f
s:Position	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:Position(line, character)$/;"	f
s:PrevIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:PrevIndToken(lnum, i)$/;"	f
s:PrevLineOfCode	plugged/vim-polyglot/indent/lua.vim	/^function s:PrevLineOfCode(lnum)$/;"	f
s:PrevMatch	plugged/vim-polyglot/indent/sas.vim	/^function! s:PrevMatch(lnum, regex)$/;"	f
s:PrevNonBlank	plugged/vim-polyglot/indent/markdown.vim	/^function! s:PrevNonBlank(lnum)$/;"	f
s:PrevNonBlankNonComment	plugged/vim-polyglot/indent/mp.vim	/^function! s:PrevNonBlankNonComment(lnum)$/;"	f
s:PrevNonBlankNonString	plugged/vim-polyglot/indent/falcon.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
s:PrevNonBlankNonString	plugged/vim-polyglot/indent/json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
s:PrevNonBlankNonString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
s:PrevNonBlankNonString	plugged/vim-polyglot/indent/solidity.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
s:PrevNonBlankNonString	plugged/vim-polyglot/indent/typescript.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
s:PrevNonMultilineString	plugged/vim-polyglot/indent/puppet.vim	/^function! s:PrevNonMultilineString(lnum)$/;"	f
s:PrevNonblank	plugged/vim-polyglot/autoload/pony.vim	/^function! s:PrevNonblank(lnum)$/;"	f
s:PreviousNotMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
s:PreviousToken	plugged/vim-polyglot/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
s:ProjectParms	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:ProjectParms(projectUri)$/;"	f
s:Pure	plugged/vim-polyglot/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
s:PurifyCode	plugged/vim-polyglot/indent/pascal.vim	/^function! s:PurifyCode( line_num )$/;"	f
s:Push	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Push(stack, token)$/;"	f
s:Push	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:Push(fct, kind)$/;"	f
s:Python2Syntax	plugged/vim-polyglot/syntax/python.vim	/^function! s:Python2Syntax()$/;"	f
s:QuickpickFilter	plugged/coc.nvim/autoload/coc/util.vim	/^    function! s:QuickpickFilter(id, key) closure$/;"	f
s:QuickpickHandler	plugged/coc.nvim/autoload/coc/util.vim	/^    function! s:QuickpickHandler(id, result) closure$/;"	f
s:REPL_SEARCH	plugged/vim-polyglot/autoload/julia/doc.vim	/^  let s:REPL_SEARCH = 'Base.Docs.repl_search'$/;"	v
s:REPL_SEARCH	plugged/vim-polyglot/autoload/julia/doc.vim	/^  let s:REPL_SEARCH = 'import REPL.repl_search; repl_search'$/;"	v
s:RIndent	plugged/vim-polyglot/indent/rmd.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	plugged/vim-polyglot/indent/rnoweb.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	plugged/vim-polyglot/indent/rrst.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:Racket_visual_doc	plugged/vim-polyglot/ftplugin/racket.vim	/^function! s:Racket_visual_doc()$/;"	f
s:ReferenceName	plugged/vim-polyglot/syntax/rst.vim	/^let s:ReferenceName = '[[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*'$/;"	v
s:RemoveITags	plugged/vim-polyglot/after/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
s:RemoveITags	plugged/vim-polyglot/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
s:RemoveTrailingComments	plugged/vim-polyglot/indent/solidity.vim	/^function s:RemoveTrailingComments(content)$/;"	f
s:RemoveTrailingComments	plugged/vim-polyglot/indent/typescript.vim	/^function s:RemoveTrailingComments(content)$/;"	f
s:ReplaceAsStr	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceAsStr(str, search, replacement, ...)$/;"	f
s:ReplaceExtendedRegexFactorWithNumberFactor	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceExtendedRegexFactorWithNumberFactor(extendedregex)$/;"	f
s:ReplaceNumberFactorWithVimRegexFactor	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceNumberFactorWithVimRegexFactor(halfway)$/;"	f
s:ReplaceRemainFactorWithVimRegexFactor	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceRemainFactorWithVimRegexFactor(halfway)$/;"	f
s:RestoreShiftwidth	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:RestoreShiftwidth()$/;"	f
s:Right	plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
s:RmDir	plugged/vim-polyglot/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
s:Run	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
s:RunRustfmt	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, tmpname, from_writepre)$/;"	f
s:RustfmtCommand	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommand()$/;"	f
s:RustfmtCommandRange	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
s:RustfmtConfigOptions	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtConfigOptions()$/;"	f
s:RustfmtWriteMode	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtWriteMode()$/;"	f
s:SINGLE_LINE_ELSE	plugged/vim-polyglot/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '\\C^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SINGLE_LINE_ELSE	plugged/vim-polyglot/indent/ls.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SINGLE_LINE_ELSE	plugged/vim-polyglot/indent/moon.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\)\\>\\)\\@!'$/;"	v
s:SNR	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val]))/;"	v
s:SQLBlockEnd	plugged/vim-polyglot/indent/pgsql.vim	/^let s:SQLBlockEnd = '^\\s*\\(end\\)\\>'$/;"	v
s:SQLBlockStart	plugged/vim-polyglot/indent/pgsql.vim	/^let s:SQLBlockStart = '^\\s*\\%('.$/;"	v
s:SYNTAX_COMMENT	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_COMMENT	plugged/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_COMMENT = 'moon\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING	plugged/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_STRING = 'moon\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:SYNTAX_STRING_COMMENT	plugged/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:Safe_indent	plugged/vim-polyglot/indent/awk.vim	/^function! s:Safe_indent( base, wordlen, this_line )$/;"	f
s:SaveVimSesn	plugged/vim-polyglot/extras/menu.vim	/^fun! s:SaveVimSesn()$/;"	f
s:ScratchBufBuild	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufBuild(src, vert, size)$/;"	f
s:ScratchBufUpdate	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufUpdate(buf, text)$/;"	f
s:SearchCode	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchCode(lnum, regex)$/;"	f
s:SearchEndPair	plugged/vim-polyglot/indent/erlang.vim	/^function! s:SearchEndPair(lnum, curr_col)$/;"	f
s:SearchLoop	plugged/vim-polyglot/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
s:SearchMatchingKeyword	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchMatchingKeyword(startlnum, open, close)$/;"	f
s:SearchOptions	plugged/coc.nvim/plugin/coc.vim	/^function! s:SearchOptions(...) abort$/;"	f
s:SearchP	plugged/vim-polyglot/extras/menu.vim	/^fun! s:SearchP()$/;"	f
s:SearchPair	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchPair(startlnum, lookback, skip, open, close)$/;"	f
s:SearchPair	plugged/vim-polyglot/indent/erlang.vim	/^function! s:SearchPair(lnum, curr_col, start, middle, end)$/;"	f
s:SearchPair	plugged/vim-polyglot/indent/ls.vim	/^function! s:SearchPair(start, end)$/;"	f
s:SearchPair	plugged/vim-polyglot/indent/moon.vim	/^function! s:SearchPair(start, end)$/;"	f
s:SearchSection	plugged/vim-polyglot/ftplugin/j.vim	/^function! s:SearchSection(end, backwards, visualmode) abort$/;"	f
s:SearchTestFunctionNameUnderCursor	plugged/vim-polyglot/autoload/rust.vim	/^function! s:SearchTestFunctionNameUnderCursor() abort$/;"	f
s:SecondLevelIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:SecondLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\)\\>\\|\\(--.*\\)\\@<!?\\s*\\<CAS/;"	v
s:SecondLevelNonColonEndIndent	plugged/vim-polyglot/indent/occam.vim	/^let s:SecondLevelNonColonEndIndent = '\\(--.*\\)\\@<!\\<\\(CHAN\\|DATA\\)\\s\\+TYPE\\>'$/;"	v
s:Seems_continuing	plugged/vim-polyglot/indent/awk.vim	/^function! s:Seems_continuing( line )$/;"	f
s:SelectAll	plugged/vim-polyglot/extras/menu.vim	/^func s:SelectAll()$/;"	f
s:SetDefault	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:SetDefault(name, value)$/;"	f
s:SetErlangOptions	plugged/vim-polyglot/ftplugin/erlang.vim	/^function s:SetErlangOptions()$/;"	f
s:SetMakePrg	plugged/vim-polyglot/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
s:SetMakePrg	plugged/vim-polyglot/compiler/ls.vim	/^function! s:SetMakePrg()$/;"	f
s:SetModifiers	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:SetModifiers(mods)$/;"	f
s:SetexToAtx	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:SetexToAtx(line1, line2)$/;"	f
s:Setf	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! s:Setf(ft)$/;"	f
s:SetupColorSchemes	plugged/vim-polyglot/extras/menu.vim	/^func s:SetupColorSchemes() abort$/;"	f
s:SetupCompilers	plugged/vim-polyglot/extras/menu.vim	/^func s:SetupCompilers() abort$/;"	f
s:SetupKeymaps	plugged/vim-polyglot/extras/menu.vim	/^  func s:SetupKeymaps() abort$/;"	f
s:SetupLazyloadMenus	plugged/vim-polyglot/extras/menu.vim	/^  func s:SetupLazyloadMenus()$/;"	f
s:ShellTokenize	plugged/vim-polyglot/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
s:ShiftWidth	plugged/vim-polyglot/indent/coffee.vim	/^  function! s:ShiftWidth()$/;"	f
s:ShiftWidth	plugged/vim-polyglot/indent/coffee.vim	/^  let s:ShiftWidth = function('shiftwidth')$/;"	v
s:ShouldSkip	plugged/vim-polyglot/indent/coffee.vim	/^function! s:ShouldSkip(startlnum, lnum, col)$/;"	f
s:ShouldSkip	plugged/vim-polyglot/indent/ls.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
s:ShouldSkip	plugged/vim-polyglot/indent/moon.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
s:ShowInfo	plugged/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
s:SimplifyAdjacentCollections	plugged/vim-polyglot/syntax/yaml.vim	/^function s:SimplifyAdjacentCollections(p)$/;"	f
s:SimplifyToAssumeAllPrintable	plugged/vim-polyglot/syntax/yaml.vim	/^function s:SimplifyToAssumeAllPrintable(p)$/;"	f
s:SkipExpr	plugged/vim-polyglot/indent/ls.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
s:SkipExpr	plugged/vim-polyglot/indent/moon.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
s:SkipFunc	plugged/vim-polyglot/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
s:SkipPattern	plugged/vim-polyglot/indent/sml.vim	/^function! s:SkipPattern(lnum, pat)$/;"	f
s:SmartSearch	plugged/vim-polyglot/indent/ls.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
s:SmartSearch	plugged/vim-polyglot/indent/moon.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
s:SpecChangelog	plugged/vim-polyglot/ftplugin/spec.vim	/^	function s:SpecChangelog(format)$/;"	f
s:SpellDel	plugged/vim-polyglot/extras/menu.vim	/^  func s:SpellDel()$/;"	f
s:SpellLang	plugged/vim-polyglot/extras/menu.vim	/^  func s:SpellLang()$/;"	f
s:SpellPopup	plugged/vim-polyglot/extras/menu.vim	/^  func s:SpellPopup()$/;"	f
s:SpellReplace	plugged/vim-polyglot/extras/menu.vim	/^  func s:SpellReplace(n)$/;"	f
s:StarSetf	plugged/vim-polyglot/extras/filetype.vim	/^func! s:StarSetf(ft)$/;"	f
s:StarSetf	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! s:StarSetf(ft)$/;"	f
s:StartOfFile	plugged/vim-polyglot/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
s:StartStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:StartStructure(name)$/;"	f
s:Starts_with_word	plugged/vim-polyglot/indent/awk.vim	/^function! s:Starts_with_word( line )$/;"	f
s:StatementIndent	plugged/vim-polyglot/indent/ada.vim	/^function s:StatementIndent( current_indent, prev_lnum )$/;"	f
s:SuperSub	plugged/vim-polyglot/syntax/tex.vim	/^  fun! s:SuperSub(group,leader,pat,cchar)$/;"	f
s:SwitchWindow	plugged/vim-polyglot/ftplugin/coffee.vim	/^function! s:SwitchWindow(buf)$/;"	f
s:SynAt	plugged/vim-polyglot/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
s:SynOnOff	plugged/vim-polyglot/extras/menu.vim	/^    fun s:SynOnOff()$/;"	f
s:SyncAutocmd	plugged/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
s:SyntaxInclude	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:SyntaxInclude(filetype)$/;"	f
s:SyntaxName	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SyntaxName(lnum, col)$/;"	f
s:SyntaxName	plugged/vim-polyglot/indent/ls.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
s:SyntaxName	plugged/vim-polyglot/indent/moon.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
s:SyntaxName	plugged/vim-polyglot/indent/swift.vim	/^function! s:SyntaxName()$/;"	f
s:SyntaxNameAtPosition	plugged/vim-polyglot/indent/swift.vim	/^function! s:SyntaxNameAtPosition(line, column)$/;"	f
s:TRUE	plugged/vim-polyglot/indent/autohotkey.vim	/^let s:TRUE = !0$/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TYPE_DICT	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:Tab	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:Tab()$/;"	f
s:TableFormat	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:TableFormat()$/;"	f
s:Tag	plugged/vim-polyglot/ftplugin/pdf.vim	/^function! s:Tag()$/;"	f
s:TagFiles	plugged/vim-polyglot/extras/menu.vim	/^fun! s:TagFiles()$/;"	f
s:TeXIndent	plugged/vim-polyglot/indent/rnoweb.vim	/^  let s:TeXIndent = function("s:NoTeXIndent")$/;"	v
s:TeXIndent	plugged/vim-polyglot/indent/rnoweb.vim	/^  let s:TeXIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:TextDocumentIdentifier	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:TextDocumentIdentifier(path)$/;"	f
s:TextDocumentPositionParams	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:TextDocumentPositionParams(documentUri, line, character)$/;"	f
s:TextWidth	plugged/vim-polyglot/extras/menu.vim	/^fun! s:TextWidth()$/;"	f
s:Toc	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:Toc(...)$/;"	f
s:ToggleGuiOption	plugged/vim-polyglot/extras/menu.vim	/^fun! s:ToggleGuiOption(option)$/;"	f
s:Token	plugged/vim-polyglot/indent/javascript.vim	/^function s:Token()$/;"	f
s:TokenizeLine	plugged/vim-polyglot/indent/erlang.vim	/^function! s:TokenizeLine(lnum, direction)$/;"	f
s:UnexpectedToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:UnexpectedToken(token, stack)$/;"	f
s:UnletStack	plugged/vim-polyglot/scripts/eregex.vim	/^function! s:UnletStack()$/;"	f
s:UpdateMakePrg	plugged/vim-polyglot/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
s:UpdateMakePrg	plugged/vim-polyglot/compiler/ls.vim	/^  function! s:UpdateMakePrg()$/;"	f
s:UpdateNimLog	plugged/vim-polyglot/autoload/nim.vim	/^fun! s:UpdateNimLog() abort$/;"	f
s:V	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:V = vital#crystal#new()$/;"	v
s:VERSION	plugged/vim-polyglot/autoload/julia/doc.vim	/^let s:VERSION = s:version()$/;"	v
s:ValidMatchEnd	plugged/vim-polyglot/indent/mp.vim	/^function! s:ValidMatchEnd(line, pat, start)$/;"	f
s:VersionAwareNetrwBrowseX	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:VersionAwareNetrwBrowseX(url)$/;"	f
s:VisMove	plugged/vim-polyglot/ftplugin/markdown.vim	/^function! s:VisMove(f)$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital = {}$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:Weight	plugged/vim-polyglot/indent/mp.vim	/^function! s:Weight(line)$/;"	f
s:WithPath	plugged/vim-polyglot/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
s:WorkspaceLoadParms	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:WorkspaceLoadParms(files)$/;"	f
s:WorkspacePeekRequest	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:WorkspacePeekRequest(directory, deep, excludedDirs)$/;"	f
s:XxdBack	plugged/vim-polyglot/extras/menu.vim	/^func s:XxdBack()$/;"	f
s:XxdConv	plugged/vim-polyglot/extras/menu.vim	/^func s:XxdConv()$/;"	f
s:XxdFind	plugged/vim-polyglot/extras/menu.vim	/^func s:XxdFind()$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_SID() abort$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_SID() abort$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_SID() abort$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:_SID() abort$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_SID() abort$/;"	f
s:_SID	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_SID() abort$/;"	f
s:_bounder	plugged/vim-polyglot/syntax/yaml.vim	/^let s:_bounder = s:SimplifyToAssumeAllPrintable('\\%([[\\]{}, \\t]\\@!\\p\\)')$/;"	v
s:_call_string_expr	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_call_string_expr(expr, args) abort$/;"	f
s:_collection	plugged/vim-polyglot/syntax/yaml.vim	/^let s:_collection = '[^\\@!\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:_compare	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_default_compare	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_define_ansi_highlights	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_define_ansi_highlights() abort$/;"	f
s:_dot_to_sharp	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
s:_encode_dict	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_dict(val, settings) abort$/;"	f
s:_encode_list	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_list(val, settings) abort$/;"	f
s:_ends_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:_ends_with(text, expr, lnum)$/;"	f
s:_execute	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_execute(cmd) abort$/;"	f
s:_extract_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
s:_false	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_false() abort$/;"	f
s:_file2module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_file2module(file) abort$/;"	f
s:_function	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_get_builtin_module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:_get_module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_module(name) abort dict$/;"	f
s:_global_vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_global_vital_files() abort$/;"	f
s:_import	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import(name) abort dict$/;"	f
s:_import_func_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
s:_is_available	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_is_available() abort$/;"	f
s:_module_path	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_path(name) abort$/;"	f
s:_module_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid(name) abort$/;"	f
s:_module_sid_base_dir	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
s:_neg_collection	plugged/vim-polyglot/syntax/yaml.vim	/^let s:_neg_collection = '[^\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:_null	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_null() abort$/;"	f
s:_pad_with_char	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
s:_plugin_name	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_replace	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
s:_resolve	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_resolve(val, prefix) abort$/;"	f
s:_s	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_self_vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_self_vital_files() abort$/;"	f
s:_serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    fun! s:_serveraddr()$/;"	f
s:_sfuncname	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
s:_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
s:_skip_special_chars	plugged/vim-polyglot/indent/cython.vim	/^    function! s:_skip_special_chars(line, col)$/;"	f
s:_skip_special_chars	plugged/vim-polyglot/indent/python.vim	/^    function! s:_skip_special_chars(line, col)$/;"	f
s:_source	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_source(path) abort$/;"	f
s:_split_by_wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
s:_split_by_wcswidth_once	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
s:_starts_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:_starts_with(text, expr, lnum)$/;"	f
s:_true	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_true() abort$/;"	f
s:_unify_path	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path_cache	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:_uniq	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_vital_created	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_created	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_depends	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_loaded	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_wcwidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:abort	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:abort()$/;"	f
s:access_modifier_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:action_for	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:activate	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	plugged/coc.nvim/autoload/coc/util.vim	/^let s:activate = ""$/;"	v
s:activated	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:activated = 0$/;"	v
s:add_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:add_related(winid, target) abort$/;"	f
s:add_syntax	plugged/vim-polyglot/syntax/pgsql.vim	/^fun! s:add_syntax(s)$/;"	f
s:adjust_win_row	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:adjust_win_row(winid, changed) abort$/;"	f
s:ag_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
s:ag_to_qf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
s:alias_pattern	plugged/vim-polyglot/syntax/rst.vim	/^    let s:alias_pattern = ''$/;"	v
s:align_lists	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:all	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
s:all_delims	plugged/vim-polyglot/syntax/raku.vim	/^let s:all_delims = s:plain_delims + s:bracketing_delims$/;"	v
s:all_tokens	plugged/vim-polyglot/indent/erlang.vim	/^let s:all_tokens = {}$/;"	v
s:allsteps	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! s:allsteps()$/;"	f
s:alpha_metaops	plugged/vim-polyglot/syntax/raku.vim	/^let s:alpha_metaops = [$/;"	v
s:alpha_metaops_or	plugged/vim-polyglot/syntax/raku.vim	/^let s:alpha_metaops_or = join(s:temp, "\\\\|")$/;"	v
s:and	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:and(xs) abort$/;"	f
s:annot_file_list	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:annot_file_list = {}$/;"	v
s:annotationMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:annotationMatcher = '@[A-Za-z._]\\+\\s\\+'$/;"	v
s:anon_func_end	plugged/vim-polyglot/indent/lua.vim	/^let s:anon_func_end = '\\<end\\%(\\s*[)}]\\)\\+'$/;"	v
s:anon_func_start	plugged/vim-polyglot/indent/lua.vim	/^let s:anon_func_start = '\\S\\+\\s*[({].*\\<function\\s*(.*)\\s*$'$/;"	v
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:ant_cpo_save	plugged/vim-polyglot/syntax/ant.vim	/^let s:ant_cpo_save = &cpo$/;"	v
s:any	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
s:app	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "MacVim"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "System Events"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "Terminal"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "iTerm2"$/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:apply_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
s:apply_user_input_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
s:archs	plugged/vim-polyglot/syntax/debcontrol.vim	/^let s:archs = [$/;"	v
s:array_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:array_entry = '\\v^\\s*-\\s' " - foo$/;"	v
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assignment_rx	plugged/vim-polyglot/indent/make.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:assignment_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:attr	plugged/vim-polyglot/syntax/svelte.vim	/^  let s:attr = '\\(lang\\|type\\)=\\("\\|''\\)[^\\2]*' . s:language.name . '[^\\2]*\\2'$/;"	v
s:attr	plugged/vim-polyglot/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
s:attr_pattern	plugged/vim-polyglot/syntax/vue.vim	/^  let s:attr_pattern = has_key(s:language, 'attr_pattern') ? s:language.attr_pattern : s:attr('l/;"	v
s:attribute_highlight	plugged/vim-polyglot/syntax/ansible.vim	/^fun! s:attribute_highlight(attributes)$/;"	f
s:attributes	plugged/vim-polyglot/indent/haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:attributes	plugged/vim-polyglot/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:attributes	plugged/vim-polyglot/indent/slim.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:attributes	plugged/vim-polyglot/indent/slime.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:backslash_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:backspace	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:backspace(s)$/;"	f
s:bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:bakregex	plugged/vim-polyglot/scripts/eregex.vim	/^let s:bakregex=''$/;"	v
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:base = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:baseIndentExpr	plugged/vim-polyglot/indent/twig.vim	/^let s:baseIndentExpr=&indentexpr$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:beflet	plugged/vim-polyglot/indent/ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\/;"	v
s:beflet	plugged/vim-polyglot/indent/sml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\/;"	v
s:before_function_called	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:beginBlock	plugged/vim-polyglot/indent/octave.vim	/^let s:beginBlock = ['for', 'parfor', 'function', 'if', 'switch',$/;"	v
s:bg	plugged/vim-polyglot/syntax/tmux.vim	/^        let s:bg = (!s:i || s:i == 16 || (s:i > 231 && s:i < 235)) ? 15 : "none"$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:binNMU	plugged/vim-polyglot/syntax/debchangelog.vim	/^let s:binNMU='binary-only=yes'$/;"	v
s:bin_dir	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:bin_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:bin_regex = '0b[01]\\%(_\\?[01]\\)*\\%(\\>\\|im\\>\\|\\ze[^01]\\)'$/;"	v
s:binary_search	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:binding_close	plugged/vim-polyglot/indent/nix.vim	/^let s:binding_close = '\\%(\\<in\\>\\)'$/;"	v
s:binding_open	plugged/vim-polyglot/indent/nix.vim	/^let s:binding_open = '\\%(\\<let\\>\\)'$/;"	v
s:binop_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←/;"	v
s:binop_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←/;"	v
s:binop_chars_extra	plugged/vim-polyglot/autoload/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U/;"	v
s:binop_chars_extra	plugged/vim-polyglot/syntax/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U/;"	v
s:block_close	plugged/vim-polyglot/indent/nix.vim	/^let s:block_close = '\\%(}\\|]\\)'$/;"	v
s:block_continuation_regex	plugged/vim-polyglot/indent/falcon.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_end	plugged/vim-polyglot/indent/sas.vim	/^let s:block_end = '\\v<%(end|endcomp|endlayout|endgraph)\\s*;'$/;"	v
s:block_open	plugged/vim-polyglot/indent/nix.vim	/^let s:block_open  = '\\%({\\|[\\)'$/;"	v
s:block_regex	plugged/vim-polyglot/indent/falcon.vim	/^let s:block_regex =$/;"	v
s:block_regex	plugged/vim-polyglot/indent/json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\/;"	v
s:block_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:block_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)/;"	v
s:block_regex	plugged/vim-polyglot/indent/typescript.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)/;"	v
s:block_rules	plugged/vim-polyglot/indent/cython.vim	/^let s:block_rules = {$/;"	v
s:block_rules	plugged/vim-polyglot/indent/python.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	plugged/vim-polyglot/indent/cython.vim	/^let s:block_rules_multiple = {$/;"	v
s:block_rules_multiple	plugged/vim-polyglot/indent/python.vim	/^let s:block_rules_multiple = {$/;"	v
s:block_scalar_header	plugged/vim-polyglot/indent/yaml.vim	/^let s:block_scalar_header = '\\v[|>]%([+-]?[1-9]|[1-9]?[+-])?'$/;"	v
s:block_str	plugged/vim-polyglot/indent/sas.vim	/^let s:block_str = '\\v<%(do>%([^;]+<%(to|over|while)>[^;]+)=|%(compute|define\\s+%(column|footer/;"	v
s:blocks_graph_at	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:blocks_graph_at(linum) abort$/;"	f
s:bmenu_items	plugged/vim-polyglot/extras/menu.vim	/^let s:bmenu_items = {}$/;"	v
s:bmenu_wait	plugged/vim-polyglot/extras/menu.vim	/^let s:bmenu_wait = 1$/;"	v
s:boolQuadGen	plugged/vim-polyglot/syntax/neomuttrc.vim	/^function! s:boolQuadGen(type, vars, deprecated)$/;"	f
s:borderchars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:borderchars = get(g:, 'coc_borderchars', ['─', '│', '─', '│', '┌', '┐', '┘',/;"	v
s:borderjoinchars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:borderjoinchars = get(g:, 'coc_border_joinchars', ['┬', '┤', '┴', '├'])$/;"	v
s:bracketBlocks	plugged/vim-polyglot/indent/julia.vim	/^let s:bracketBlocks = '\\<julia\\%(\\%(\\%(Printf\\)\\?Par\\|SqBra\\%(Idx\\)\\?\\|CurBra\\)Block/;"	v
s:bracket_continuation_regex	plugged/vim-polyglot/indent/falcon.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:bracket_type	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:bracket_type(char)$/;"	f
s:bracket_type	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:bracket_type(char)$/;"	f
s:bracketing_delims	plugged/vim-polyglot/syntax/raku.vim	/^let s:bracketing_delims = [$/;"	v
s:break	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
s:browsefilter	plugged/vim-polyglot/ftplugin/ant.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/ant.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.htm*\\n" .$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/config.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/config.vim	/^let s:browsefilter = "Bourne Shell Files (*.sh)\\t*.sh\\n" .$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let s:browsefilter = 'All Files (*.*)\\t*.*\\n'$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/jsp.vim	/^let s:browsefilter = "Java Files (*.java)\\t*.java\\n" .$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/pug.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/pug.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/stylus.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/stylus.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/xsd.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-polyglot/ftplugin/xsd.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browser_open_command	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:browser_open_command() abort$/;"	f
s:bstartp	plugged/vim-polyglot/autoload/pony.vim	/^let s:bstartp = '\\v<%(ifdef|if|then|elseif|else|(match)|while|for|in|do|try|with|recover|repeat/;"	v
s:bsub	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
s:btags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buf_line_count	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
s:buffer_line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buflisted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:buildConfigKeys	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:buildConfigKeys()$/;"	f
s:build_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
s:bvars	plugged/vim-polyglot/indent/javascript.vim	/^let s:bvars = {$/;"	v
s:byte_pattern	plugged/vim-polyglot/syntax/cdrtoc.vim	/^let s:byte_pattern = '\\<\\%([01]\\=\\d\\{1,2}\\|2\\%([0-4]\\d\\|5[0-5]\\)\\)\\>'$/;"	v
s:c_flow_indicator	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_flow_indicator = '[,[\\]{}]'$/;"	v
s:c_indicator	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_indicator      = '[\\-?:,[\\]{}#&*!|>''"%@`]'$/;"	v
s:c_named_tag_handle	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_named_tag_handle     = '\\v\\!'.s:ns_word_char.'+\\!'$/;"	v
s:c_named_tag_handle	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_named_tag_handle     = '!'.s:ns_word_char.'\\+!'$/;"	v
s:c_non_specific_tag	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_non_specific_tag = '\\v\\!'$/;"	v
s:c_non_specific_tag	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_non_specific_tag = '!'$/;"	v
s:c_ns_alias_node	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_alias_node      = '\\*'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_char	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_char = '\\v%([\\n\\r\\uFEFF \\t,[\\]{}]@!\\p)'$/;"	v
s:c_ns_anchor_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_char = '\\%([\\n\\r\\uFEFF \\t,[\\]{}]\\@!\\p\\)'$/;"	v
s:c_ns_anchor_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_char = s:SimplifyToAssumeAllPrintable(s:c_ns_anchor_char)$/;"	v
s:c_ns_anchor_name	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'+'$/;"	v
s:c_ns_anchor_name	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'\\+'$/;"	v
s:c_ns_anchor_property	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_property =  '\\v\\&'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_property	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_property =  '&'.s:c_ns_anchor_name$/;"	v
s:c_ns_shorthand_tag	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_ns_shorthand_tag = '\\v'.s:c_tag_handle . s:ns_tag_char.'+'$/;"	v
s:c_ns_shorthand_tag	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_shorthand_tag = s:c_tag_handle . s:ns_tag_char.'\\+'$/;"	v
s:c_ns_tag_property	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_ns_tag_property = '\\v'.s:c_verbatim_tag.$/;"	v
s:c_ns_tag_property	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_tag_property = s:c_verbatim_tag.$/;"	v
s:c_primary_tag_handle	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_primary_tag_handle   = '\\v\\!'$/;"	v
s:c_primary_tag_handle	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_primary_tag_handle   = '!'$/;"	v
s:c_secondary_tag_handle	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_secondary_tag_handle = '\\v\\!\\!'$/;"	v
s:c_secondary_tag_handle	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_secondary_tag_handle = '!!'$/;"	v
s:c_tag_handle	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_tag_handle = '\\v%('.s:c_named_tag_handle.$/;"	v
s:c_tag_handle	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_tag_handle = '\\%('.s:c_named_tag_handle.$/;"	v
s:c_verbatim_tag	plugged/vim-polyglot/indent/yaml.vim	/^let s:c_verbatim_tag = '\\v\\!\\<'.s:ns_uri_char.'+\\>'$/;"	v
s:c_verbatim_tag	plugged/vim-polyglot/syntax/yaml.vim	/^let s:c_verbatim_tag = '!<'.s:ns_uri_char.'\\+>'$/;"	v
s:cache_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:cache_sid = {}$/;"	v
s:call	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:call(method, params, cont)$/;"	f
s:callback_findWorkspace	plugged/vim-polyglot/autoload/fsharp.vim	/^    function! s:callback_findWorkspace(result)$/;"	f
s:callback_load	plugged/vim-polyglot/autoload/fsharp.vim	/^    function! s:callback_load(_)$/;"	f
s:callback_reloadProjects	plugged/vim-polyglot/autoload/fsharp.vim	/^        function! s:callback_reloadProjects(_)$/;"	f
s:callback_showSignature	plugged/vim-polyglot/autoload/fsharp.vim	/^    function! s:callback_showSignature(result)$/;"	f
s:callback_showTooltip	plugged/vim-polyglot/autoload/fsharp.vim	/^    function! s:callback_showTooltip(result)$/;"	f
s:callbacks	plugged/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:cexpr	plugged/vim-polyglot/autoload/dart.vim	/^function! s:cexpr(errorformat, lines, reason) abort$/;"	f
s:cfend	plugged/vim-polyglot/autoload/pony.vim	/^let s:cfend = '\\v<end>'$/;"	v
s:cfilemap	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? e/;"	v
s:cfilemap	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:cfmiddle	plugged/vim-polyglot/autoload/pony.vim	/^let s:cfmiddle = '\\v<%(then|elseif|else|until|do|in|elseiftype)>|\\|'$/;"	v
s:cfstart	plugged/vim-polyglot/autoload/pony.vim	/^let s:cfstart = '\\v<%(ifdef|if|match|while|for|repeat|try|with|recover|object|lambda|iftype)>'$/;"	v
s:ch_braces	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_braces=3$/;"	v
s:ch_brackets	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_brackets=2$/;"	v
s:ch_parentheses	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_parentheses=5$/;"	v
s:ch_parentheses_option	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_parentheses_option=4$/;"	v
s:ch_posix_charclass	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_posix_charclass=1$/;"	v
s:ch_with_backslash	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ch_with_backslash=0$/;"	v
s:chained_func_call	plugged/vim-polyglot/indent/lua.vim	/^let s:chained_func_call = "^\\\\v\\\\s*[:.]\\\\w+[({\\"']"$/;"	v
s:channel_map	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:channel_map = {}$/;"	v
s:char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:char_map	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:char_map = {$/;"	v
s:char_range	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:checkAutocmd	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
s:checkCommand	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
s:checkEnvironment	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
s:checkInitailize	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitailize() abort$/;"	f
s:checkVersion	plugged/coc.nvim/plugin/coc.vim	/^function! s:checkVersion() abort$/;"	f
s:check_for_string	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:check_for_string()$/;"	f
s:check_for_string	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:check_for_string()$/;"	f
s:check_requirements	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checked	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked_ctags	plugged/vim-polyglot/autoload/rust/tags.vim	/^let s:checked_ctags = 0$/;"	v
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chomp	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:chomp	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
s:choose	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:choose(word) abort$/;"	f
s:chop	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clear	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:clear(list) abort$/;"	f
s:clearQfList	plugged/vim-polyglot/autoload/dart.vim	/^function! s:clearQfList(reason) abort$/;"	f
s:clear_match_by_id	plugged/coc.nvim/autoload/coc/util.vim	/^let s:clear_match_by_id = has('nvim-0.5.0') || has('patch-8.1.1084')$/;"	v
s:clear_match_by_window	plugged/coc.nvim/autoload/coc/highlight.vim	/^    let s:clear_match_by_window = 0$/;"	v
s:clear_match_by_window	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:clear_match_by_window = has('nvim-0.5.0') || has('patch-8.1.1084')$/;"	v
s:client	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:clients	plugged/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:clojure_check_for_string_worker	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
s:clojure_indent_pos	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
s:clojure_is_method_special_case_worker	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
s:clojure_syntax_keywords	plugged/vim-polyglot/syntax/clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
s:closeBlock	plugged/vim-polyglot/indent/octave.vim	/^let s:closeBlock = s:midBlock + s:endBlock$/;"	v
s:close_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:close_patt = '\\C\\%(\\<\\%(end\\|until\\)\\>\\|)\\|}\\)'$/;"	v
s:close_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:close_win(winid) abort$/;"	f
s:close_win	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:close_win(winid) abort$/;"	f
s:cm	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
s:cmd	plugged/vim-polyglot/autoload/db/adapter/ecto.vim	/^let s:cmd = join(['mix', 'run', '--no-start', '--no-compile', shellescape(s:path.'\/get_repos.ex/;"	v
s:cmd_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:colour(r, g, b)$/;"	f
s:combinations	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:comma_first	plugged/vim-polyglot/indent/solidity.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_first	plugged/vim-polyglot/indent/typescript.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	plugged/vim-polyglot/indent/solidity.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:comma_last	plugged/vim-polyglot/indent/typescript.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:command_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commands	plugged/vim-polyglot/syntax/wget.vim	/^let s:commands = map([$/;"	v
s:comment	plugged/vim-polyglot/indent/ansible.vim	/^let s:comment = '\\v^\\s*#' " # comment$/;"	v
s:comment_rx	plugged/vim-polyglot/indent/make.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:comment_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:comments	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:comments = escape(&comments, ' \\')$/;"	v
s:comments	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let s:comments = ''$/;"	v
s:commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
s:commits_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_head	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
s:compare_pos	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:compare_pos(pos1, pos2)$/;"	f
s:compile	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:compile(projectPath, cont)$/;"	f
s:compilerLocation	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:compilerLocation(cont)$/;"	f
s:complete_insert	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:concat	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:concat(list) abort$/;"	f
s:conceal	plugged/vim-polyglot/syntax/markdown.vim	/^  let s:conceal = ' conceal'$/;"	v
s:conceal	plugged/vim-polyglot/syntax/markdown.vim	/^let s:conceal = ''$/;"	v
s:concealcode	plugged/vim-polyglot/syntax/markdown.vim	/^  let s:concealcode = ' concealends'$/;"	v
s:concealcode	plugged/vim-polyglot/syntax/markdown.vim	/^let s:concealcode = ''$/;"	v
s:concealends	plugged/vim-polyglot/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	plugged/vim-polyglot/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:conditional_directive_rx	plugged/vim-polyglot/indent/make.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:conditional_directive_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:config_keys	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:config_keys = []$/;"	v
s:config_keys_camel	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:config_keys_camel =$/;"	v
s:conj	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:cons	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:contains_multibyte	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
s:continuable_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:continuation	plugged/vim-polyglot/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/falcon.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:l/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/typescript.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\|[^=]=[^/;"	v
s:continuation_rx	plugged/vim-polyglot/indent/make.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continuation_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continued_rule_rx	plugged/vim-polyglot/indent/make.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:continued_rule_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:convert_config_nvim	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:convert_config_nvim(config) abort$/;"	f
s:count	plugged/vim-polyglot/indent/bst.vim	/^function! s:count(string,char)$/;"	f
s:count	plugged/vim-polyglot/indent/liquid.vim	/^function! s:count(string,pattern)$/;"	f
s:count_braces	plugged/vim-polyglot/indent/css.vim	/^function s:count_braces(lnum, count_open)$/;"	f
s:count_braces	plugged/vim-polyglot/indent/ld.vim	/^function s:count_braces(lnum, count_open)$/;"	f
s:count_braces	plugged/vim-polyglot/indent/stylus.vim	/^function s:count_braces(lnum, count_open)$/;"	f
s:count_braces	plugged/vim-polyglot/indent/tcl.vim	/^function s:count_braces(lnum, count_open)$/;"	f
s:count_braces	plugged/vim-polyglot/indent/xinetd.vim	/^function s:count_braces(lnum, count_open)$/;"	f
s:count_chars	plugged/vim-polyglot/indent/scss.vim	/^function s:count_chars(lnum, count_open, chars)$/;"	f
s:countermeasure	plugged/vim-polyglot/scripts/eregex.vim	/^let s:countermeasure=1$/;"	v
s:countonly	plugged/vim-polyglot/after/indent/html.vim	/^let s:countonly = 0$/;"	v
s:countonly	plugged/vim-polyglot/indent/html.vim	/^let s:countonly = 0$/;"	v
s:cpo	plugged/vim-polyglot/ftplugin/scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	plugged/vim-polyglot/syntax/debchangelog.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	plugged/vim-polyglot/syntax/debsources.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	plugged/vim-polyglot/syntax/scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo_orig	plugged/vim-polyglot/ftplugin/zig.vim	/^let s:cpo_orig = &cpo$/;"	v
s:cpo_orig	plugged/vim-polyglot/syntax/plantuml.vim	/^let s:cpo_orig=&cpoptions$/;"	v
s:cpo_sav	plugged/vim-polyglot/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/fennel.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/mp.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/puppet.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/after/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/go/config.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/polyglot/detect.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/polyglot/sleuth.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/autoload/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/ant.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/cucumber.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/haml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/nim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/ocaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/powershell.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/rake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/sass.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/compiler/sbt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/extras/filetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/extras/menu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/abap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/abaqus.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/automake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/awk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/cfg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/cobol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/csv.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/dosini.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/fennel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/hamster.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/handlebars.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/hostsaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/kwt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/m4.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mailcap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mma.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/plantuml.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/postscr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/procmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/prolog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/rnoweb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/rrst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/spec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/sshconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/systemd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/tcl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/vb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/xdefaults.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/xf86conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/ftplugin/zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/applescript.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/dtd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/gohtmltmpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/graphql.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/json.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/nix.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/raku.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/sdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/solidity.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/swift.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/systemverilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/tex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/vlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/8th.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/aap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/abel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/aptconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/art.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/asn.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/autodoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/awk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/basic.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/bib.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/blank.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cabal-2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cdrtoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cf.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/chordpro.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/clean.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cmod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cmusrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/csc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/csv.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cupl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/d.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/ddoc.vim	/^    let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/debcontrol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/debcopyright.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/desktop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/dnsmasq.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/forth.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/fortran.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/fstab.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/gdb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/gp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/gsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/hb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/hollywood.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/ist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/jam.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/java.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/javacc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/litestep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/log.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/logtalk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/lout.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/lpc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/lynx.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/make.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/meson.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/messages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mix.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mma.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/monk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mrxvtrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/msidl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/natural.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/ninja.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/nroff.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/opl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pike.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/privoxy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/raml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/reva.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/rpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sisu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/spup.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/st.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/terraform.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/tidy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/tsalt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/tt2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/viminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/wast.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/wget.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/xpm2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	plugged/vim-polyglot/ftplugin/ada.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:cpoptions_save	plugged/vim-polyglot/ftplugin/qml.vim	/^let s:cpoptions_save = &cpoptions$/;"	v
s:cposet	plugged/vim-polyglot/ftplugin/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	plugged/vim-polyglot/indent/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:create_btns_buffer	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:create_btns_buffer(bufnr, width, buttons, borderbottom) abort$/;"	f
s:create_cterm_hlgroup	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_cterm_hlgroup(group, fg, bg, attr) abort$/;"	f
s:create_gui_hlgroup	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_gui_hlgroup(group, fg, bg, attr)$/;"	f
s:create_namespace	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_namespace(key) abort$/;"	f
s:csi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:csv_numeric_sort	plugged/vim-polyglot/autoload/csv.vim	/^let s:csv_numeric_sort = v:version > 704 || v:version == 704 && has("patch341")$/;"	v
s:ctagmap	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:ctagmap	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctags_is_uctags	plugged/vim-polyglot/autoload/rust/tags.vim	/^let s:ctags_is_uctags = 0$/;"	v
s:ctags_options_dir	plugged/vim-polyglot/autoload/puppet/ctags.vim	/^let s:ctags_options_dir = expand('<sfile>:p:h:h:h') . '\/ctags\/'$/;"	v
s:ctags_type	plugged/vim-polyglot/autoload/puppet/ctags.vim	/^  let s:ctags_type = 0$/;"	v
s:currentQueryObject	plugged/vim-polyglot/ftplugin/idris.vim	/^function! s:currentQueryObject()$/;"	f
s:currentQueryObject	plugged/vim-polyglot/ftplugin/idris2.vim	/^function! s:currentQueryObject()$/;"	f
s:current_char	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:current_char()$/;"	f
s:current_char	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:current_char()$/;"	f
s:current_session	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:current_session() abort$/;"	f
s:current_syntax	plugged/vim-polyglot/after/syntax/coffee.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/javascript/sql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/jsx.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/mdx.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/php/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/reason/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/tsx.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:current_word	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:current_word()$/;"	f
s:current_word	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:current_word()$/;"	f
s:cursor_moved	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cursor_moved(...)$/;"	f
s:cycle	plugged/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:cycle(count) abort$/;"	f
s:cycle_until_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cycle_until_end()$/;"	f
s:d	plugged/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
s:debug	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
s:decIndent	plugged/vim-polyglot/indent/plantuml.vim	/^let s:decIndent = '^\\s*\\%(end\\|else\\|}\\)'$/;"	v
s:dec_num	plugged/vim-polyglot/syntax/nim.vim	/^  let s:dec_num = '\\d%(_?\\d)*'$/;"	v
s:dec_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:dec_regex = '\\d\\%(_\\?\\d\\)*\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:decimalpos	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:decimalpos(expr) abort$/;"	f
s:decode	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:decode(json, ...) abort$/;"	f
s:decode_json	plugged/vim-polyglot/autoload/crystal_lang.vim	/^  function! s:decode_json(text) abort$/;"	f
s:decrease	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:decrease(...)$/;"	f
s:defArgMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:defArgMatcher = '\\%((\\_.\\{-})\\)'$/;"	v
s:defMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:defMatcher = '\\%(' . s:modifierMatcher . '\\)*\\<def\\>'$/;"	v
s:def_comment	plugged/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_comment(name, nextgroup)$/;"	f
s:def_keyword	plugged/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_keyword(name, nextgroup, keyword)$/;"	f
s:def_keywords	plugged/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_keywords(name, nextgroup, keywords)$/;"	f
s:def_match	plugged/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_match(name, nextgroup, pattern)$/;"	f
s:def_region	plugged/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_region(name, nextgroup, start, skip, end, matchgroup, contains)$/;"	f
s:default_action	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_list_type_commands	plugged/vim-polyglot/autoload/zig/list.vim	/^let s:default_list_type_commands = {$/;"	v
s:default_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^let s:default_mappings = {$/;"	v
s:default_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':/;"	v
s:default_shiftwidth	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let s:default_shiftwidth = &shiftwidth$/;"	v
s:default_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:defs	plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:delete(s)$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delimitMate_extra_excluded_regions	plugged/vim-polyglot/autoload/rust/delimitmate.vim	/^let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
s:delimiter	plugged/vim-polyglot/syntax/ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
s:delimiters	plugged/vim-polyglot/ftplugin/caddyfile.vim	/^let s:delimiters = {'left': '#'}$/;"	v
s:delims	plugged/vim-polyglot/ftplugin/hcl.vim	/^let s:delims = { 'left': '#' }$/;"	v
s:desktop_enable_kde	plugged/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_kde = v:false$/;"	v
s:desktop_enable_kde	plugged/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_kde = v:true$/;"	v
s:desktop_enable_nonstd	plugged/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_nonstd = v:false$/;"	v
s:desktop_enable_nonstd	plugged/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_nonstd = v:true$/;"	v
s:detect_bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
s:detect_indent	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:detect_indent() abort$/;"	f
s:dictionary_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:dictionary_entry = '\\v^\\s*[^:-]+:\\s*$' " with_items:$/;"	v
s:did_function_definitions	plugged/vim-polyglot/ftplugin/erlang.vim	/^	let s:did_function_definitions = 1$/;"	v
s:did_indent	plugged/vim-polyglot/after/indent/jsx.vim	/^  let s:did_indent = b:did_indent$/;"	v
s:did_indent	plugged/vim-polyglot/after/indent/tsx.vim	/^  let s:did_indent = b:did_indent$/;"	v
s:did_indent	plugged/vim-polyglot/indent/typescriptreact.vim	/^  let s:did_indent=b:did_indent$/;"	v
s:did_setup_color_schemes	plugged/vim-polyglot/extras/menu.vim	/^let s:did_setup_color_schemes = 0$/;"	v
s:did_setup_compilers	plugged/vim-polyglot/extras/menu.vim	/^let s:did_setup_compilers = 0$/;"	v
s:did_setup_keymaps	plugged/vim-polyglot/extras/menu.vim	/^  let s:did_setup_keymaps = 0$/;"	v
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:diffcomplete	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
s:diffidx	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
s:dir	plugged/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = fnameescape(s:dir)$/;"	v
s:dir	plugged/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\ ', '\\\\ ', 'g')$/;"	v
s:dir	plugged/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\', '\\\\\\\\', 'g')$/;"	v
s:directives_end	plugged/vim-polyglot/indent/blade.vim	/^    let s:directives_end .= '\\|' . join(values(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_end	plugged/vim-polyglot/indent/blade.vim	/^let s:directives_end = 'else\\|end\\|empty\\|show\\|stop\\|append\\|overwrite'$/;"	v
s:directives_start	plugged/vim-polyglot/indent/blade.vim	/^    let s:directives_start .= '\\|' . join(keys(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_start	plugged/vim-polyglot/indent/blade.vim	/^let s:directives_start = 'if\\|else\\|unless\\|for\\|while\\|empty\\|push\\|section\\|can\\|hasS/;"	v
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:display_error	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_handle_pattern_match_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_pattern_match_block(relative_line, context)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:documentationSymbol	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:documentationSymbol(xmlSig, assembly, cont)$/;"	f
s:dodigits	plugged/vim-polyglot/ftplugin/pdf.vim	/^function! s:dodigits(digits)$/;"	f
s:doesOrderConnect	plugged/vim-polyglot/indent/applescript.vim	/^func! s:doesOrderConnect(text)$/;"	f
s:doobject	plugged/vim-polyglot/ftplugin/pdf.vim	/^function! s:doobject(string)$/;"	f
s:dot_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:doubleArrow	plugged/vim-polyglot/after/syntax/idris.vim	/^let s:doubleArrow = 1$/;"	v
s:doubleArrow	plugged/vim-polyglot/after/syntax/idris2.vim	/^let s:doubleArrow = 1$/;"	v
s:download	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:download(branch)$/;"	f
s:dprint	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
s:drop_while	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:drop_while(f, xs) abort$/;"	f
s:dstring	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
s:dtd_cpo_save	plugged/vim-polyglot/syntax/dtd.vim	/^let s:dtd_cpo_save = &cpo$/;"	v
s:echo	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:echo(str) abort$/;"	f
s:echo	plugged/vim-polyglot/autoload/zig/util.vim	/^function! s:echo(msg, hi)$/;"	f
s:echo_error	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:echo_error(msg, ...) abort$/;"	f
s:echo_signature	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:echo_signature(parts)$/;"	f
s:echorizer	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:echorizer = {$/;"	v
s:echorizer.eat	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.eat() abort$/;"	f
s:echorizer.echo	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo() abort$/;"	f
s:echorizer.echo_ansi	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo_ansi(code) abort$/;"	f
s:ecr_close	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_close = '%>'$/;"	v
s:ecr_comment_open	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_comment_open = '<%%\\@!-\\=#'$/;"	v
s:ecr_control_open	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_control_open = '<%%\\@!-\\=[=#]\\@!'$/;"	v
s:ecr_dedent_regex	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_dedent_regex =$/;"	v
s:ecr_indent_regex	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_indent_regex =$/;"	v
s:ecr_open	plugged/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_open = '<%%\\@!'$/;"	v
s:ecrystal_extensions	plugged/vim-polyglot/autoload/ecrystal.vim	/^let s:ecrystal_extensions = {$/;"	v
s:ed	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:ed = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:eglobal_working	plugged/vim-polyglot/scripts/eregex.vim	/^let s:eglobal_working=0$/;"	v
s:empty_border	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:empty_border(border) abort$/;"	f
s:enable	plugged/vim-polyglot/scripts/eregex.vim	/^let s:enable = 0$/;"	v
s:enable_tagged_jsx	plugged/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:enable_tagged_jsx = !empty(s:tags)$/;"	v
s:enabled	plugged/vim-polyglot/syntax/svelte.vim	/^function! s:enabled(language)$/;"	f
s:encode	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:encode(val, ...) abort$/;"	f
s:endBlock	plugged/vim-polyglot/indent/octave.vim	/^let s:endBlock = ['end', 'endfor', 'endparfor', 'endfunction', 'endif',$/;"	v
s:end_conditional_directive_rx	plugged/vim-polyglot/indent/make.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_conditional_directive_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_end_regex	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_end_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
s:end_middle_regex	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\/;"	v
s:end_middle_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\/;"	v
s:end_skip_expr	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_start_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:end_tag	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^let s:end_tag = '\\%(<\\_s*\/\\_s*\\%(\\<[-:._$A-Za-z0-9]\\+\\>\\)\\_s*>\\|\/\\_s*>\\)'$/;"	v
s:ends_with	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
s:ends_with_backslash	plugged/vim-polyglot/indent/tcl.vim	/^function s:ends_with_backslash(lnum)$/;"	f
s:endtag	plugged/vim-polyglot/indent/typescriptreact.vim	/^let s:endtag = '^\\s*\\\/\\?>\\s*;\\='$/;"	v
s:endtags	plugged/vim-polyglot/after/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:endtags	plugged/vim-polyglot/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:enumeration_pattern	plugged/vim-polyglot/indent/rst.vim	/^let s:enumeration_pattern = '^\\s*\\%(\\d\\+\\|#\\)\\.\\s\\+'$/;"	v
s:env_cache	plugged/vim-polyglot/autoload/zig/util.vim	/^let s:env_cache = {}$/;"	v
s:eol	plugged/vim-polyglot/indent/mp.vim	/^let s:eol = '\\s*\\%($\\|%\\)'$/;"	v
s:eol	plugged/vim-polyglot/syntax/julia.vim	/^let s:eol = '\\s*\\%(\\%(\\%(#=\\%(=#\\@!\\|[^=]\\|\\n\\)\\{-}=#\\)\\s*\\)\\+\\)\\?\\%(#=\\@!.*\\/;"	v
s:eregex_replacement	plugged/vim-polyglot/scripts/eregex.vim	/^    let s:eregex_replacement=eregex_replacement$/;"	v
s:eregex_replacement	plugged/vim-polyglot/scripts/eregex.vim	/^let s:eregex_replacement=0$/;"	v
s:erlang_fun_begin	plugged/vim-polyglot/ftplugin/erlang.vim	/^let s:erlang_fun_begin = '^\\a\\w*(.*$'$/;"	v
s:erlang_fun_end	plugged/vim-polyglot/ftplugin/erlang.vim	/^let s:erlang_fun_end   = '^[^%]*\\.\\s*\\(%.*\\)\\?$'$/;"	v
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:err_remain_text	plugged/coc.nvim/autoload/coc/task.vim	/^let s:err_remain_text = {}$/;"	v
s:error	plugged/vim-polyglot/autoload/dart.vim	/^function! s:error(text) abort$/;"	f
s:error_message	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:error_message(msg) abort$/;"	f
s:error_sign	plugged/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') ? '❌ ' : 'E')$/;"	v
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:escape(chars)$/;"	f
s:escape_pattern	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escapesConditionals	plugged/vim-polyglot/syntax/neomuttrc.vim	/^function! s:escapesConditionals(baseName, sequence, padding, conditional)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:excmds	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec	plugged/vim-polyglot/autoload/zig/util.vim	/^function! s:exec(cmd, ...) abort$/;"	f
s:execute	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
s:execute	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:execute(winid, cmd) abort$/;"	f
s:exists	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:exists(name) abort dict$/;"	f
s:exit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
s:exit_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
s:exp	plugged/vim-polyglot/syntax/nim.vim	/^  let s:exp = '%([eE][+-]?'.s:dec_num.')'$/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^        let s:exs_re .= '|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|Conn/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^        let s:exs_re .= '|StandardError'$/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^    let s:exs_re = 'BaseException|Exception|ArithmeticError|LookupError|EnvironmentError|Asserti/;"	v
s:extend	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend	plugged/vim-polyglot/indent/sass.vim	/^let s:extend = '^\\s*\\%(@extend\\|@include\\|+\\)'$/;"	v
s:extend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extended_complements	plugged/vim-polyglot/scripts/eregex.vim	/^let s:extended_complements=0$/;"	v
s:extended_dots	plugged/vim-polyglot/scripts/eregex.vim	/^let s:extended_dots=0$/;"	v
s:extended_spaces	plugged/vim-polyglot/scripts/eregex.vim	/^let s:extended_spaces=0$/;"	v
s:extfname	plugged/vim-polyglot/syntax/tex.vim	/^let s:extfname=expand("%:e")$/;"	v
s:extraConceal	plugged/vim-polyglot/after/syntax/idris.vim	/^            let s:extraConceal = 0$/;"	v
s:extraConceal	plugged/vim-polyglot/after/syntax/idris.vim	/^let s:extraConceal = 1$/;"	v
s:extraConceal	plugged/vim-polyglot/after/syntax/idris2.vim	/^            let s:extraConceal = 0$/;"	v
s:extraConceal	plugged/vim-polyglot/after/syntax/idris2.vim	/^let s:extraConceal = 1$/;"	v
s:extract_identifier	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:extract_identifier(word) abort$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:f1Help	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:f1Help(filePath, line, character, cont)$/;"	f
s:falcon_deindent_keywords	plugged/vim-polyglot/indent/falcon.vim	/^let s:falcon_deindent_keywords = '^\\s*\\(case\\|catch\\|default\\|elif\\|else\\|end\\)'$/;"	v
s:falcon_indent_keywords	plugged/vim-polyglot/indent/falcon.vim	/^let s:falcon_indent_keywords = '^\\s*\\(case\\|catch\\|class\\|enum\\|default\\|elif\\|else' .$/;"	v
s:fb	plugged/vim-polyglot/syntax/ledger.vim	/^let s:fb = get(g:, 'ledger_fold_blanks', 0)$/;"	v
s:feedkeys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
s:fennel_check_for_string_worker	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:fennel_check_for_string_worker()$/;"	f
s:fennel_indent_pos	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:fennel_indent_pos()$/;"	f
s:file_name	plugged/vim-polyglot/indent/erlang.vim	/^let s:file_name = ''$/;"	v
s:file_options	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_source	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filename_case_checks	plugged/vim-polyglot/tests/native.vim	/^let s:filename_case_checks = {$/;"	v
s:filename_checks	plugged/vim-polyglot/tests/native.vim	/^let s:filename_checks = {$/;"	v
s:filetype_dict	plugged/vim-polyglot/ftplugin/markdown.vim	/^        let s:filetype_dict[key] = val$/;"	v
s:filetype_dict	plugged/vim-polyglot/ftplugin/markdown.vim	/^    let s:filetype_dict = {$/;"	v
s:filetype_dict	plugged/vim-polyglot/ftplugin/markdown.vim	/^    let s:filetype_dict = {}$/;"	v
s:filetype_map	plugged/coc.nvim/autoload/coc/list.vim	/^let s:filetype_map = {$/;"	v
s:fill_quickfix	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:filter	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:filter(list, id) abort$/;"	f
s:find	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:findWorkspace	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:findWorkspace(dir, cont)$/;"	f
s:find_block	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:find_block(current_mode)$/;"	f
s:find_completion_start	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_completion_start() abort$/;"	f
s:find_following_block	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:find_following_block(linum) abort$/;"	f
s:find_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_indices	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_last_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_last_pos	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
s:find_open_window	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:find_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_opening_paren(lnum, col)$/;"	f
s:find_opening_paren	plugged/vim-polyglot/indent/python.vim	/^function! s:find_opening_paren(lnum, col)$/;"	f
s:find_pred_block	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:find_pred_block(linum) abort$/;"	f
s:find_root_by	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by(search_dir, d) abort$/;"	f
s:find_root_by_spec_and_src	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by_spec_and_src(d) abort$/;"	f
s:find_start_of_block	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_block(lnum, types, skip, multiple) abort$/;"	f
s:find_start_of_block	plugged/vim-polyglot/indent/python.vim	/^function! s:find_start_of_block(lnum, types, skip, multiple) abort$/;"	f
s:find_start_of_multiline_statement	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
s:find_start_of_multiline_statement	plugged/vim-polyglot/indent/python.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
s:findall	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:findall(text, rx) abort$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:finish_reconciling	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:finish_reconciling() abort$/;"	f
s:fire_pre_triggers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:fire_pre_triggers()$/;"	f
s:first_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fix_beginfigs	plugged/vim-polyglot/ftplugin/mp.vim	/^  function! s:fix_beginfigs()$/;"	f
s:flatten	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:float_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex = '\\%(' . s:float_regex3 .$/;"	v
s:float_regex1	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex1 = '\\.\\d\\%(_\\?\\d\\)*\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D/;"	v
s:float_regex2	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex2 = '\\d\\%(_\\?\\d\\)*\\.\\%(\\d\\%(_\\?\\d\\)*\\)\\?\\%([eEf][-+]\\?\\d\\+\\)/;"	v
s:float_regex3	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex3 = '\\d\\%(_\\?\\d\\)*[eEf][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_suf	plugged/vim-polyglot/syntax/nim.vim	/^  let s:float_suf = '%(''%(%(f|F)%(32|64|128)?|d|D))'$/;"	v
s:float_supported	plugged/coc.nvim/autoload/coc/float.vim	/^let s:float_supported = exists('*nvim_open_win') || has('patch-8.1.1719')$/;"	v
s:fmt_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fold_arg	plugged/vim-polyglot/syntax/crystal.vim	/^let s:fold_arg      = s:foldable('string') ? ' fold' : ''$/;"	v
s:fold_arg	plugged/vim-polyglot/syntax/ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:foldable	plugged/vim-polyglot/syntax/crystal.vim	/^function! s:foldable(...) abort$/;"	f
s:foldable	plugged/vim-polyglot/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
s:foldable_groups	plugged/vim-polyglot/syntax/crystal.vim	/^let s:foldable_groups = split($/;"	v
s:foldable_groups	plugged/vim-polyglot/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
s:folded_assignment_rx	plugged/vim-polyglot/indent/make.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:folded_assignment_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:foldl	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl1	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldr	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr1	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:format_cmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_mark	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:from_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:fsac	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:fsac = fnamemodify(s:script_root_dir . "fsac\/fsautocomplete.dll", ":p")$/;"	v
s:fsdn	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:fsdn(signature, cont)$/;"	f
s:fsi_buffer	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_buffer = -1$/;"	v
s:fsi_height	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_height = 0$/;"	v
s:fsi_job	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_job    = -1$/;"	v
s:fsi_width	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_width  = 0$/;"	v
s:ft	plugged/vim-polyglot/syntax/c.vim	/^let s:ft = matchstr(&ft, '^\\([^.]\\)\\+')$/;"	v
s:ft	plugged/vim-polyglot/syntax/rmd.vim	/^    let s:ft = s:type$/;"	v
s:ft	plugged/vim-polyglot/syntax/rmd.vim	/^    let s:ft = substitute(s:type, '.*=', '', '')$/;"	v
s:ft_rules_udev_rules_pattern	plugged/vim-polyglot/autoload/polyglot/ft.vim	/^let s:ft_rules_udev_rules_pattern = '^\\s*\\cudev_rules\\s*=\\s*"\\([^"]\\{-1,}\\)\/*".*'$/;"	v
s:ftplugin_sql_objects	plugged/vim-polyglot/ftplugin/sql.vim	/^let s:ftplugin_sql_objects =$/;"	v
s:funcNameMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:funcNameMatcher = '\\w\\+'$/;"	v
s:funcs	plugged/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:funcs.buf_add_highlight	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd) abort$/;"	f
s:funcs.buf_attach	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
s:funcs.buf_clear_namespace	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
s:funcs.buf_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
s:funcs.buf_detach	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
s:funcs.buf_get_changedtick	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
s:funcs.buf_get_lines	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
s:funcs.buf_get_mark	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
s:funcs.buf_get_name	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
s:funcs.buf_get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
s:funcs.buf_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
s:funcs.buf_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
s:funcs.buf_line_count	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
s:funcs.buf_set_lines	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
s:funcs.buf_set_name	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
s:funcs.buf_set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
s:funcs.buf_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
s:funcs.call_atomic	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
s:funcs.call_dict_function	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
s:funcs.call_function	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
s:funcs.command	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
s:funcs.command_output	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
s:funcs.create_namespace	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
s:funcs.del_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line(line)$/;"	f
s:funcs.del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
s:funcs.err_write	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
s:funcs.err_writeln	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
s:funcs.eval	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
s:funcs.feedkeys	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
s:funcs.get_api_info	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
s:funcs.get_current_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
s:funcs.get_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
s:funcs.get_current_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
s:funcs.get_current_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
s:funcs.get_mode	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
s:funcs.get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
s:funcs.get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
s:funcs.get_vvar	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
s:funcs.list_bufs	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
s:funcs.list_runtime_paths	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
s:funcs.list_tabpages	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
s:funcs.list_wins	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
s:funcs.out_write	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
s:funcs.set_client_info	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
s:funcs.set_current_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
s:funcs.set_current_dir	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
s:funcs.set_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
s:funcs.set_current_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tabnr) abort$/;"	f
s:funcs.set_current_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(win_id) abort$/;"	f
s:funcs.set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
s:funcs.set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
s:funcs.strwidth	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
s:funcs.subscribe	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
s:funcs.tabpage_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tabnr, name)$/;"	f
s:funcs.tabpage_get_number	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(id)$/;"	f
s:funcs.tabpage_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tabnr, name)$/;"	f
s:funcs.tabpage_get_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tabnr)$/;"	f
s:funcs.tabpage_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tabnr)$/;"	f
s:funcs.tabpage_list_wins	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tabnr)$/;"	f
s:funcs.tabpage_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tabnr, name, value)$/;"	f
s:funcs.unsubscribe	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
s:funcs.win_close	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_close(win_id, ...) abort$/;"	f
s:funcs.win_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(win_id, name) abort$/;"	f
s:funcs.win_get_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
s:funcs.win_get_cursor	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(win_id) abort$/;"	f
s:funcs.win_get_height	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(win_id) abort$/;"	f
s:funcs.win_get_number	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(win_id) abort$/;"	f
s:funcs.win_get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(win_id, name) abort$/;"	f
s:funcs.win_get_position	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(win_id) abort$/;"	f
s:funcs.win_get_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(win_id) abort$/;"	f
s:funcs.win_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(win_id, name) abort$/;"	f
s:funcs.win_get_width	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(win_id) abort$/;"	f
s:funcs.win_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(win_id) abort$/;"	f
s:funcs.win_set_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_buf(win_id, buf_id) abort$/;"	f
s:funcs.win_set_cursor	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(win_id, pos) abort$/;"	f
s:funcs.win_set_height	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(win_id, height) abort$/;"	f
s:funcs.win_set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(win_id, name, value) abort$/;"	f
s:funcs.win_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(win_id, name, value) abort$/;"	f
s:funcs.win_set_width	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(win_id, width) abort$/;"	f
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^            let s:funcs_re .= '|print'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '\\=@!'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '|apply|basestring|buffer|cmp|coerce|execfile|file|intern|long|raw_inp/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '|ascii|breakpoint|exec|print'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^    let s:funcs_re = '__import__|abs|all|any|bin|callable|chr|classmethod|compile|complex|delatt/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^    let s:funcs_re = 'syn match pythonBuiltinFunc ''\\v\\.@<!\\zs<%(' . s:funcs_re . ')>'$/;"	v
s:function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function_range_at	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:function_range_at(linum) abort$/;"	f
s:fzf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_restore_colors	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_vim_term	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:genFunctions	plugged/vim-polyglot/syntax/neomuttrc.vim	/^function! s:genFunctions(functions)$/;"	f
s:gen_filter_keys	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:gen_filter_keys(line) abort$/;"	f
s:generate_suffix_groups	plugged/vim-polyglot/syntax/hostconf.vim	/^function s:generate_suffix_groups(list_of_order_of_orders, context, trailing_context)$/;"	f
s:getAuthor	plugged/vim-polyglot/ftplugin/debchangelog.vim	/^function! s:getAuthor(zonestart, zoneend)$/;"	f
s:getField	plugged/vim-polyglot/ftplugin/debcontrol.vim	/^function! s:getField(f, lnum)$/;"	f
s:getHLStack	plugged/vim-polyglot/indent/haskell.vim	/^function! s:getHLStack(line, col)$/;"	f
s:getIncIndent	plugged/vim-polyglot/indent/plantuml.vim	/^function! s:getIncIndent() abort$/;"	f
s:getNesting	plugged/vim-polyglot/indent/haskell.vim	/^function! s:getNesting(hlstack)$/;"	f
s:get_256color	plugged/vim-polyglot/syntax/dircolors.vim	/^function! s:get_256color(colors) abort$/;"	f
s:get_base_indent	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
s:get_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char(...)$/;"	f
s:get_color	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_complete_buffer	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:get_complete_buffer()$/;"	f
s:get_cursorline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_cursorline(topline, lines, scrolloff, width, height) abort$/;"	f
s:get_echorizer	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:get_echorizer(str) abort$/;"	f
s:get_fsi_command	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:get_fsi_command()$/;"	f
s:get_func_identifiers	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:get_func_identifiers(line) abort$/;"	f
s:get_git_root	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_height	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:get_height(lines, config) abort$/;"	f
s:get_hi_str	plugged/vim-polyglot/syntax/dircolors.vim	/^function! s:get_hi_str(color, place) abort$/;"	f
s:get_identifiers	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:get_identifiers(line) abort$/;"	f
s:get_indentexpr	plugged/vim-polyglot/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
s:get_last_status	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:get_last_status() abort$/;"	f
s:get_line_trimmed	plugged/vim-polyglot/indent/reason.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
s:get_line_trimmed	plugged/vim-polyglot/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
s:get_options	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_options(winid) abort$/;"	f
s:get_paragraph_start	plugged/vim-polyglot/indent/rst.vim	/^function! s:get_paragraph_start()$/;"	f
s:get_save_pos	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:get_save_pos(...)$/;"	f
s:get_shiftwidth	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:get_shiftwidth(indents) abort$/;"	f
s:get_tag	plugged/vim-polyglot/after/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
s:get_tag	plugged/vim-polyglot/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
s:get_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
s:get_time_in_ms	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_time_in_ms()$/;"	f
s:get_topline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_topline(topline, lines, forward, height, width) abort$/;"	f
s:get_transaction_extents	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:get_transaction_extents(lnum) abort$/;"	f
s:get_visual_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
s:get_visual_selection	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:get_visual_selection()$/;"	f
s:get_win_opts	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_win_opts(winid) abort$/;"	f
s:getline	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:getline()$/;"	f
s:getmapchars	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:getmapchars(function)$/;"	f
s:git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
s:git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
s:git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
s:git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
s:git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:gitdiffcached	plugged/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:global_variable_list	plugged/vim-polyglot/autoload/rust/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globs	plugged/vim-polyglot/autoload/polyglot/sleuth.vim	/^let s:globs = {$/;"	v
s:got_fmt_error	plugged/vim-polyglot/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:goto_col	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:goto_col(pos, min_spaces) abort$/;"	f
s:goto_definition	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:goto_definition() abort$/;"	f
s:grey_colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_colour(n)$/;"	f
s:grey_level	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_level(n)$/;"	f
s:grey_number	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_number(x)$/;"	f
s:group	plugged/vim-polyglot/syntax/ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:group_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:guess	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:guess(lines) abort$/;"	f
s:gui	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:gui = has('gui_running') || has('nvim')$/;"	v
s:handle_special_key	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
s:handle_visual_IA_to_insert	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
s:handle_visual_IA_to_normal	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
s:handle_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:handle_with(start_lnum, start_col, context)$/;"	f
s:has	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
s:has_common_items	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_service_field	plugged/vim-polyglot/syntax/pamconf.vim	/^let s:has_service_field = exists("b:pamconf_has_service_field")$/;"	v
s:has_vimproc	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:has_vimproc() abort$/;"	f
s:has_webapi	plugged/vim-polyglot/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
s:hash	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:hash(str) abort$/;"	f
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:headersRegexp	plugged/vim-polyglot/ftplugin/markdown.vim	/^let s:headersRegexp = '\\v^(#|.+\\n(\\=+|-+)$)'$/;"	v
s:helptag_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hex_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:hex_regex = '0x\\x\\%(_\\?\\x\\)*\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:hexfloat_regex1	plugged/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex1 = '0x\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\/;"	v
s:hexfloat_regex2	plugged/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex2 = '0x\\x\\%(_\\?\\x\\)*\\%\\(\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?\\)\\?[pP][-/;"	v
s:hi	plugged/vim-polyglot/syntax/go.vim	/^function! s:hi()$/;"	f
s:hi_group_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:highlight_close_tag	plugged/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:highlight_close_tag = get(g:, 'vim_jsx_pretty_highlight_close_tag', 0)$/;"	v
s:highlight_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
s:highlight_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
s:history	plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hog_keyword_match	plugged/vim-polyglot/ftplugin/hog.vim	/^let s:hog_keyword_match = '\\c^\\s*\\<\\(preprocessor\\\\|config\\\\|output\\\\|include\\\\|ipva/;"	v
s:html_indent	plugged/vim-polyglot/indent/svelte.vim	/^let s:html_indent = &l:indentexpr$/;"	v
s:html_indent	plugged/vim-polyglot/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
s:htmlindent	plugged/vim-polyglot/indent/blade.vim	/^let s:htmlindent = &indentexpr$/;"	v
s:i	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = s:idef$/;"	v
s:i	plugged/vim-polyglot/syntax/help.vim	/^let s:i = match(expand("%"), '\\.\\a\\ax$')$/;"	v
s:iconv	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:id	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:id = 1$/;"	v
s:idef	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = 2$/;"	v
s:idef	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	plugged/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idregex	plugged/vim-polyglot/autoload/julia.vim	/^let s:idregex = '[^' . s:nonidS_chars . '0-9!' . s:uniop_chars . s:binop_chars . '][^' . s:nonid/;"	v
s:idregex	plugged/vim-polyglot/syntax/julia.vim	/^let s:idregex = '\\%([^' . s:nonidS_chars . '0-9!?' . s:uniop_chars . s:binop_chars . '][^' . s:/;"	v
s:ignorecase	plugged/vim-polyglot/scripts/eregex.vim	/^let s:ignorecase=0$/;"	v
s:ignored_region	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:ignored_region()$/;"	f
s:ignored_region	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:ignored_region()$/;"	f
s:import	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:in_comm	plugged/vim-polyglot/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:include	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:include = &l:include$/;"	v
s:include	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:incompleteFont	plugged/vim-polyglot/after/syntax/idris.vim	/^    let s:incompleteFont = [ 'Consolas'$/;"	v
s:incompleteFont	plugged/vim-polyglot/after/syntax/idris2.vim	/^    let s:incompleteFont = [ 'Consolas'$/;"	v
s:increase	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:increase(...)$/;"	f
s:indentGuard	plugged/vim-polyglot/indent/haskell.vim	/^function! s:indentGuard(pos, prevline)$/;"	f
s:indentMatching	plugged/vim-polyglot/indent/haskell.vim	/^function! s:indentMatching(char)$/;"	f
s:indent_access_modifier_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_like_block	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_block(lnum)$/;"	f
s:indent_like_block	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_block(lnum)$/;"	f
s:indent_like_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
s:indent_like_opening_paren	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
s:indent_like_previous_line	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
s:indent_like_previous_line	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
s:indent_tags	plugged/vim-polyglot/after/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:indent_tags	plugged/vim-polyglot/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:indent_to_innermost_parentheses	plugged/vim-polyglot/indent/dtd.vim	/^function s:indent_to_innermost_parentheses(line, end)$/;"	f
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init_settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
s:inject_snippet	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:insidePlantUMLTags	plugged/vim-polyglot/indent/plantuml.vim	/^function! s:insidePlantUMLTags(lnum) abort$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:int_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:int_regex = '\\%(' . s:hex_regex .$/;"	v
s:int_suf	plugged/vim-polyglot/syntax/nim.vim	/^  let s:int_suf = '%(''%(%(i|I|u|U)%(8|16|32|64)|u|U))'$/;"	v
s:interp_dollar	plugged/vim-polyglot/syntax/julia.vim	/^let s:interp_dollar = '\\([' . s:nonidS_chars . s:uniop_chars . s:binop_chars . '!?]\\|^\\)\\@'./;"	v
s:interpreters	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:interpreters = {$/;"	v
s:intersect	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:invert	plugged/vim-polyglot/scripts/eregex.vim	/^let s:invert=0$/;"	v
s:isInBlock	plugged/vim-polyglot/indent/haskell.vim	/^function! s:isInBlock(hlstack)$/;"	f
s:isSYN	plugged/vim-polyglot/indent/haskell.vim	/^function! s:isSYN(grp, line, col)$/;"	f
s:is_available	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:is_available() abort$/;"	f
s:is_blocking	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:is_blocking() abort$/;"	f
s:is_closing_tag	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_closing_tag(syntax)$/;"	f
s:is_comment	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_comment(syntax)$/;"	f
s:is_concealed	plugged/vim-polyglot/indent/cython.vim	/^    function! s:is_concealed(line, col)$/;"	f
s:is_concealed	plugged/vim-polyglot/indent/python.vim	/^    function! s:is_concealed(line, col)$/;"	f
s:is_dedented_already	plugged/vim-polyglot/indent/cython.vim	/^function! s:is_dedented_already(current, base)$/;"	f
s:is_dedented_already	plugged/vim-polyglot/indent/python.vim	/^function! s:is_dedented_already(current, base)$/;"	f
s:is_gvim	plugged/coc.nvim/plugin/coc.vim	/^let s:is_gvim = get(v:, 'progname', '') ==# 'gvim'$/;"	v
s:is_jsx_backticks	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_backticks(syntax)$/;"	f
s:is_jsx_brace	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_brace(syntax)$/;"	f
s:is_jsx_comment	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_comment(syntax)$/;"	f
s:is_jsx_element	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_element(syntax)$/;"	f
s:is_jsx_expression	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_expression(syntax)$/;"	f
s:is_jsx_region	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_region(syntax)$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_method_special_case	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
s:is_opening_tag	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_opening_tag(syntax)$/;"	f
s:is_paren	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_paren()$/;"	f
s:is_paren	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:is_paren()$/;"	f
s:is_parent_element	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_parent_element(pos, element_count)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_python_string	plugged/vim-polyglot/indent/cython.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
s:is_python_string	plugged/vim-polyglot/indent/python.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
s:is_reader_conditional_special_case	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
s:is_section_delim	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:is_section_delim(line, func_delim) abort$/;"	f
s:is_string_comment	plugged/vim-polyglot/indent/reason.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
s:is_string_comment	plugged/vim-polyglot/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
s:is_string_or_comment	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
s:is_unix	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_vim	plugged/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/compat.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/float.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vital_vim	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/coc.nvim/plugin/coc.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_windows	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
s:iskeyword_save	plugged/vim-polyglot/syntax/php.vim	/^let s:iskeyword_save = &iskeyword$/;"	v
s:itemization_pattern	plugged/vim-polyglot/indent/rst.vim	/^let s:itemization_pattern = '^\\s*[-*+]\\s'$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = 'jobstart'$/;"	v
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = get(g:, 'yarp_jobstart', 'neovim_rpc#jobstart')$/;"	v
s:join_posix_lines	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
s:js_keywords	plugged/vim-polyglot/indent/solidity.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\/;"	v
s:js_keywords	plugged/vim-polyglot/indent/typescript.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\/;"	v
s:jsx_cpo	plugged/vim-polyglot/after/syntax/jsx.vim	/^let s:jsx_cpo = &cpo$/;"	v
s:jsx_cpo	plugged/vim-polyglot/after/syntax/tsx.vim	/^let s:jsx_cpo = &cpo$/;"	v
s:jsx_indent_backticks	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_backticks(lnum)$/;"	f
s:jsx_indent_closing_tag	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_closing_tag(lnum)$/;"	f
s:jsx_indent_comment	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_comment(lnum)$/;"	f
s:jsx_indent_element	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_element(lnum)$/;"	f
s:jsx_indent_trail_punct	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_trail_punct(lnum)$/;"	f
s:julia_blocks_functions	plugged/vim-polyglot/autoload/julia_blocks.vim	/^let s:julia_blocks_functions = {$/;"	v
s:julia_highlight_operators	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_highlight_operators = get(g:, "julia_highlight_operators", 1)$/;"	v
s:julia_spellcheck_comments	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_comments = get(g:, "julia_spellcheck_comments", 1)$/;"	v
s:julia_spellcheck_docstrings	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_docstrings = get(g:, "julia_spellcheck_docstrings", 1)$/;"	v
s:julia_spellcheck_strings	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_strings = get(g:, "julia_spellcheck_strings", 0)$/;"	v
s:jump	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jump	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! s:jump(command,count)$/;"	f
s:jump_to_identifier_at	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:jump_to_identifier_at(linum, ident) abort$/;"	f
s:jump_to_impl	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:jump_to_impl(impl) abort$/;"	f
s:just_inserted_rule_rx	plugged/vim-polyglot/indent/make.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:just_inserted_rule_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:justify_equal_spacing	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
s:keepcpo	plugged/vim-polyglot/after/indent/jsx.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/after/indent/tsx.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/autoload/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/compiler/cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/compiler/tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/ftplugin/cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/ftplugin/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/ftplugin/meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/ftplugin/occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/ftplugin/pyrex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/css.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/gdscript3.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/java.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/mp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/pgsql.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/scss.vim	/^let s:keepcpo= &cpoptions$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/svg.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/xinetd.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/autoit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/datascript.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/fvwm.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/lsl.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/po.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/raku.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/sil.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/taskdata.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/taskedit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:kernels	plugged/vim-polyglot/syntax/debcontrol.vim	/^let s:kernels = ['linux', 'hurd', 'kfreebsd', 'knetbsd', 'kopensolaris', 'netbsd']$/;"	v
s:key_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:key_value	plugged/vim-polyglot/indent/ansible.vim	/^let s:key_value = '\\v^\\s*[^:-]+:\\s*\\S' " apt: name=package$/;"	v
s:keyword	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
s:keywords	plugged/vim-polyglot/syntax/raku.vim	/^let s:keywords = {$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^      let s:lang = ""$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^      let s:lang = &langmenu$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^      let s:lang = s:lang . '.' . &enc$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^      let s:lang = substitute(s:lang, '\\.[^.]*', "", "")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, " ", "_", "g")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, "@euro", "", "")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, '\\.iso8859', ".iso_8859", "")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, 'iso_8859-15\\=$', "latin1", "")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(tolower(s:lang), '\\.iso-', ".iso_", "")$/;"	v
s:lang	plugged/vim-polyglot/extras/menu.vim	/^    let s:lang = v:lang$/;"	v
s:language	plugged/vim-polyglot/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:languages	plugged/vim-polyglot/indent/vue.vim	/^let s:languages = [$/;"	v
s:languages	plugged/vim-polyglot/syntax/svelte.vim	/^  let s:languages += g:svelte_preprocessor_tags$/;"	v
s:languages	plugged/vim-polyglot/syntax/svelte.vim	/^let s:languages = [$/;"	v
s:languages	plugged/vim-polyglot/syntax/vue.vim	/^let s:languages = [$/;"	v
s:last_changedtick	plugged/vim-polyglot/indent/erlang.vim	/^let s:last_changedtick = -1$/;"	v
s:last_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
s:layout_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lb1	plugged/vim-polyglot/syntax/ledger.vim	/^let s:lb1 = '\\@1<='$/;"	v
s:leading_operator_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
s:leaving	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:leaving = 0$/;"	v
s:ledgerAmount_contains	plugged/vim-polyglot/syntax/ledger.vim	/^    let s:ledgerAmount_contains .= '@NoSpell'$/;"	v
s:ledgerAmount_contains	plugged/vim-polyglot/syntax/ledger.vim	/^let s:ledgerAmount_contains = ''$/;"	v
s:ledger_cmd	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:ledger_cmd(file, args) abort$/;"	f
s:left	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:left(s)$/;"	f
s:length_pattern	plugged/vim-polyglot/syntax/cdrtoc.vim	/^let s:length_pattern = '\\%(\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|/;"	v
s:letlim	plugged/vim-polyglot/indent/ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letlim	plugged/vim-polyglot/indent/sml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letpat	plugged/vim-polyglot/indent/ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|externa/;"	v
s:letpat	plugged/vim-polyglot/indent/sml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|externa/;"	v
s:levelRegexpDict	plugged/vim-polyglot/ftplugin/markdown.vim	/^let s:levelRegexpDict = {$/;"	v
s:levenshtein_distance	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
s:lex	plugged/vim-polyglot/indent/dtd.vim	/^function s:lex(input, start, ...)$/;"	f
s:lex1	plugged/vim-polyglot/indent/dtd.vim	/^function s:lex1(input, start, ...)$/;"	f
s:likely	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:likely(str) abort$/;"	f
s:lim	plugged/vim-polyglot/indent/ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lim	plugged/vim-polyglot/indent/sml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lineLens	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:lineLens(projectPath, cont)$/;"	f
s:line_comment_chars	plugged/vim-polyglot/syntax/ledger.vim	/^let s:line_comment_chars = b:is_hledger ? ';*#' : ';|*#%'$/;"	v
s:line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:line_term	plugged/vim-polyglot/indent/json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:line_term	plugged/vim-polyglot/indent/solidity.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:line_term	plugged/vim-polyglot/indent/typescript.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:lines(str) abort$/;"	f
s:lines	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
s:lines	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/ftplugin/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/syntax/jst.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/syntax/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-polyglot/syntax/ragel.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:listSyntax	plugged/vim-polyglot/indent/plantuml.vim	/^function! s:listSyntax(syntaxKeyword) abort$/;"	f
s:liststartregex	plugged/vim-polyglot/indent/yaml.vim	/^let s:liststartregex='\\v^\\s*%(\\-%(\\ |$))'$/;"	v
s:listtype	plugged/vim-polyglot/autoload/zig/list.vim	/^function! s:listtype(listtype) abort$/;"	f
s:lmax	plugged/vim-polyglot/ftplugin/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	plugged/vim-polyglot/ftplugin/fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	plugged/vim-polyglot/indent/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	plugged/vim-polyglot/indent/fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	plugged/vim-polyglot/syntax/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	plugged/vim-polyglot/syntax/fortran.vim	/^    let s:lmax = 500$/;"	v
s:ln	plugged/vim-polyglot/ftplugin/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	plugged/vim-polyglot/ftplugin/fortran.vim	/^    let s:ln=1$/;"	v
s:ln	plugged/vim-polyglot/indent/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	plugged/vim-polyglot/indent/fortran.vim	/^    let s:ln=1$/;"	v
s:ln	plugged/vim-polyglot/syntax/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	plugged/vim-polyglot/syntax/fortran.vim	/^    let s:ln=1$/;"	v
s:load	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:load(arg)$/;"	f
s:load	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:load(...) abort dict$/;"	f
s:load_buffer	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:load_buffer(name) abort$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:loaded = 1$/;"	v
s:loaded	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:loaded = {}$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logfile	plugged/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = resolve($NODE_CLIENT_LOG_FILE)$/;"	v
s:logfile	plugged/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = tempname()$/;"	v
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:m	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:m	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:macro_end	plugged/vim-polyglot/indent/sas.vim	/^let s:macro_end = '\\v%(^|;)\\s*\\%mend\\s*;'$/;"	v
s:macro_regex	plugged/vim-polyglot/ftplugin/julia.vim	/^  let s:macro_regex = '\\%(@\\%([#(]\\@!\\S\\)\\+\\|\\<\\%(local\\|global\\)\\)\\s\\+'$/;"	v
s:macro_str	plugged/vim-polyglot/indent/sas.vim	/^let s:macro_str = '\\v%(^|;)\\s*\\%macro>'$/;"	v
s:mainfont	plugged/vim-polyglot/after/syntax/idris.vim	/^    let s:mainfont = substitute( &guifont, '^\\([^:,]\\+\\).*', '\\1', '')$/;"	v
s:mainfont	plugged/vim-polyglot/after/syntax/idris2.vim	/^    let s:mainfont = substitute( &guifont, '^\\([^:,]\\+\\).*', '\\1', '')$/;"	v
s:maj	plugged/vim-polyglot/scripts/eregex.vim	/^let s:maj=matchstr(s:tmp, '\\d\\+') * 100$/;"	v
s:map	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
s:map_accum	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:map_aux	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_aux(function)$/;"	f
s:map_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_move(function, toend, backwards)$/;"	f
s:map_next	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:map_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_select(function)$/;"	f
s:mapkeyregex	plugged/vim-polyglot/indent/yaml.vim	/^let s:mapkeyregex='\\v^\\s*\\#@!\\S@=%(\\''%([^'']|\\''\\'')*\\'''.$/;"	v
s:mark_complements	plugged/vim-polyglot/scripts/eregex.vim	/^let s:mark_complements=s:mark_left . 'cOmPLemEnTs' . s:mark_right$/;"	v
s:mark_left	plugged/vim-polyglot/scripts/eregex.vim	/^let s:mark_left="\\<Esc>" . strftime("%X") . ":" . strftime("%d") . "\\<C-f>"$/;"	v
s:mark_right	plugged/vim-polyglot/scripts/eregex.vim	/^let s:mark_right="\\<C-l>" . strftime("%X") . ":" . strftime("%d") . "\\<Esc>"$/;"	v
s:mark_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:match_expr_on_line	plugged/vim-polyglot/indent/cython.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
s:match_expr_on_line	plugged/vim-polyglot/indent/python.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
s:match_one	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
s:match_one	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:match_one(patterns, string)$/;"	f
s:match_pairs	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
s:match_pairs	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
s:match_words	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/config.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let s:match_words = ''$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/haml.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/jsp.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/pug.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/pug.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/stylus.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/stylus.vim	/^let s:match_words = ""$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:match_words = b:match_words . "," . s:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let s:match_words = ""$/;"	v
s:matchbegin	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchbegin(text, close)$/;"	f
s:matchend	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchend(text, open)$/;"	f
s:matchit	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:matchit()$/;"	f
s:max_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:max_firstline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:max_firstline(lines, height, width) abort$/;"	f
s:maxoff	plugged/vim-polyglot/indent/bzl.vim	/^let s:maxoff = 50$/;"	v
s:maxoff	plugged/vim-polyglot/indent/gdscript3.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	plugged/vim-polyglot/indent/meson.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	plugged/vim-polyglot/indent/zimbu.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:meta_chars	plugged/vim-polyglot/scripts/eregex.vim	/^let s:meta_chars='$*.[\\]^~'$/;"	v
s:midBlock	plugged/vim-polyglot/indent/octave.vim	/^let s:midBlock = ['case', 'catch', 'else', 'elseif', 'otherwise',$/;"	v
s:middle_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:middle_patt = '\\C\\<\\%(else\\|elseif\\)\\>'$/;"	v
s:min	plugged/vim-polyglot/scripts/eregex.vim	/^let s:min=matchstr(s:tmp, '\\.\\zs\\d\\+') + 0$/;"	v
s:min_btns_width	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:min_btns_width(buttons) abort$/;"	f
s:min_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:min_version	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:mindmapHilightLinks	plugged/vim-polyglot/syntax/plantuml.vim	/^let s:mindmapHilightLinks = [$/;"	v
s:mmssff_pattern	plugged/vim-polyglot/syntax/cdrtoc.vim	/^let s:mmssff_pattern = '\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\/;"	v
s:modeline	plugged/vim-polyglot/ftplugin/ocaml.vim	/^let s:modeline = lnum? getline(lnum): ""$/;"	v
s:modifierMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:modifierMatcher = s:annotationMatcher . '\\|\\%(private\\|protected\\)\\%(\\[[^\\]]*\\]\\)/;"	v
s:module	plugged/vim-polyglot/indent/ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:module	plugged/vim-polyglot/indent/sml.vim	/^let s:module = '\\<\\%(let\\|sig\\|struct\\)\\>'$/;"	v
s:move_around	plugged/vim-polyglot/ftplugin/mf.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
s:move_around	plugged/vim-polyglot/ftplugin/mp.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
s:move_before_begin	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:move_before_begin()$/;"	f
s:move_to_following_block	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:move_to_following_block() abort$/;"	f
s:move_to_pred_block	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:move_to_pred_block() abort$/;"	f
s:moveto_block_delim	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_block_delim(toend, backwards, ...)$/;"	f
s:moveto_currentblock_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_currentblock_end()$/;"	f
s:mp_regex	plugged/vim-polyglot/ftplugin/mf.vim	/^let s:mp_regex = {$/;"	v
s:mp_regex	plugged/vim-polyglot/ftplugin/mp.vim	/^let s:mp_regex = {$/;"	v
s:msl_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_ter/;"	v
s:msl_regex	plugged/vim-polyglot/indent/typescript.vim	/^let s:msl_regex = s:continuation_regex$/;"	v
s:multiline	plugged/vim-polyglot/scripts/eregex.vim	/^let s:multiline=0$/;"	v
s:name	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:named_module_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:named_module_entry = '\\v^\\s*-\\s*(name|hosts|role):\\s*\\S' " - name: 'do stuff'$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	plugged/vim-polyglot/syntax/ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dolla/;"	v
s:namespace_cache	plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_id	plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:namespace_map	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:namespace_map = {}$/;"	v
s:nbs	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:nearest_cargo	plugged/vim-polyglot/autoload/cargo.vim	/^function! s:nearest_cargo(...) abort$/;"	f
s:need_trans	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:new	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:new(plugin_name) abort$/;"	f
s:new_polyglot_disabled	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:new_polyglot_disabled = []$/;"	v
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:next_section	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:next_section(stop_func_begin) abort$/;"	f
s:nm	plugged/vim-polyglot/syntax/rmd.vim	/^    let s:nm  = s:type$/;"	v
s:nm	plugged/vim-polyglot/syntax/rmd.vim	/^    let s:nm = substitute(s:type, '=.*', '', '')$/;"	v
s:nodot	plugged/vim-polyglot/syntax/julia.vim	/^let s:nodot = '\\%(\\.\\)\\@'.s:d(1).'<!'$/;"	v
s:nomacro	plugged/vim-polyglot/ftplugin/julia.vim	/^  let s:nomacro = '\\%(' . s:macro_regex . '\\)\\@<!'$/;"	v
s:non_bracket_continuation_regex	plugged/vim-polyglot/indent/falcon.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]/;"	v
s:non_bracket_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:nonidS_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:nonidS_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:nonid_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonid_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:not_end	plugged/vim-polyglot/ftplugin/framescript.vim	/^  let s:not_end = '\\c\\%(\\<End\\)\\@<!'$/;"	v
s:notag	plugged/vim-polyglot/ftplugin/pdf.vim	/^function! s:notag()$/;"	f
s:note_pattern	plugged/vim-polyglot/indent/rst.vim	/^let s:note_pattern = '^\\.\\. '$/;"	v
s:notelse	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let s:notelse = '\\%(\\<end\\s\\+\\|\\<else\\s\\+\\)\\@<!'$/;"	v
s:notend	plugged/vim-polyglot/ftplugin/ada.vim	/^   let s:notend      = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	plugged/vim-polyglot/ftplugin/sql.vim	/^let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	plugged/vim-polyglot/ftplugin/vhdl.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notify	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
s:notprocedure	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let s:notprocedure = '\\%(\\s\\+procedure\\>\\)\\@!'$/;"	v
s:notselect	plugged/vim-polyglot/ftplugin/fortran.vim	/^  let s:notselect = '\\%(\\<select\\s\\+\\)\\@<!'$/;"	v
s:nr2byte	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
s:nr2enc_char	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
s:nr2hex	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
s:ns_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_char = '\\%([\\n\\r\\uFEFF \\t]\\@!\\p\\)'$/;"	v
s:ns_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_char = s:SimplifyToAssumeAllPrintable(s:ns_char)$/;"	v
s:ns_char_without_c_indicator	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_char_without_c_indicator = s:SimplifyToAssumeAllPrintable(s:ns_char_without_c_indicator/;"	v
s:ns_char_without_c_indicator	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_char_without_c_indicator = substitute(s:ns_char, '\\v\\C[\\zs', '\\=s:c_indicator[1:-2]/;"	v
s:ns_directive_name	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_directive_name = s:ns_char.'\\+'$/;"	v
s:ns_global_tag_prefix	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_global_tag_prefix = s:ns_tag_char.s:ns_uri_char.'*'$/;"	v
s:ns_id	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:ns_id = 1$/;"	v
s:ns_local_tag_prefix	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_local_tag_prefix  = '!'.s:ns_uri_char.'*'$/;"	v
s:ns_plain_char_in	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_char_in  = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_in.'\\|'.s:ns_plain_safe_in_w/;"	v
s:ns_plain_char_out	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_char_out = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_out.'\\|'.s:ns_plain_safe_out/;"	v
s:ns_plain_first_in	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_first_in  = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe/;"	v
s:ns_plain_first_out	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_first_out = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe/;"	v
s:ns_plain_in	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_in  = s:ns_plain_first_in  . s:ns_plain_char_in.'*'$/;"	v
s:ns_plain_out	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_out = s:ns_plain_first_out . s:ns_plain_char_out.'*'$/;"	v
s:ns_plain_safe_in	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in  = '\\%('.s:c_flow_indicator.'\\@!'.s:ns_char.'\\)'$/;"	v
s:ns_plain_safe_in	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in = substitute(s:ns_plain_safe_in, '\\V\\C\\\\%('.s:_collection.'\\\\@!'.s:/;"	v
s:ns_plain_safe_in_without_colhash	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in_without_colhash = substitute(s:ns_plain_safe_in, '\\V\\C'.s:_neg_collecti/;"	v
s:ns_plain_safe_out	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_out = s:ns_char$/;"	v
s:ns_plain_safe_out_without_colhash	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_out_without_colhash = substitute(s:ns_plain_safe_out, '\\V\\C'.s:_neg_collec/;"	v
s:ns_tag_char	plugged/vim-polyglot/indent/yaml.vim	/^let s:ns_tag_char  = '\\v%(%\\x\\x|'.s:ns_word_char.'|[#\/;?:@&=+$.~*''()])'$/;"	v
s:ns_tag_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$.~*''()]\\)'$/;"	v
s:ns_tag_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_char = s:SimplifyAdjacentCollections(s:ns_tag_char)$/;"	v
s:ns_tag_prefix	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_prefix = s:ns_local_tag_prefix.$/;"	v
s:ns_uri_char	plugged/vim-polyglot/indent/yaml.vim	/^let s:ns_uri_char  = '\\v%(%\\x\\x|'.s:ns_word_char.'\\v|[#\/;?:@&=+$,.!~*''()[\\]])'$/;"	v
s:ns_uri_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_uri_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$,.!~*''()[\\]]\\)'$/;"	v
s:ns_uri_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_uri_char = s:SimplifyAdjacentCollections(s:ns_uri_char)$/;"	v
s:ns_word_char	plugged/vim-polyglot/indent/yaml.vim	/^let s:ns_word_char = '\\v[[:alnum:]_\\-]'$/;"	v
s:ns_word_char	plugged/vim-polyglot/syntax/yaml.vim	/^let s:ns_word_char = '[[:alnum:]_\\-]'$/;"	v
s:nsplit	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_create_keymap	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_create_keymap(winid) abort$/;"	f
s:nvim_get_botline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_get_botline(topline, height, width, bufnr) abort$/;"	f
s:obj	plugged/vim-polyglot/indent/ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|ob/;"	v
s:obj	plugged/vim-polyglot/indent/sml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|ob/;"	v
s:ocaml_word_char	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    let s:ocaml_word_char = '\\w|[\\xc0-\\xff]|'''$/;"	v
s:oct_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:oct_regex = '0o\\o\\%(_\\?\\o\\)*\\%(\\>\\|im\\>\\|\\ze\\O\\)'$/;"	v
s:oe	plugged/vim-polyglot/syntax/ledger.vim	/^let s:oe = '\\%#=1'$/;"	v
s:old_spec	plugged/vim-polyglot/syntax/rst.vim	/^    let s:old_spec = g:rst_syntax_code_list$/;"	v
s:old_style	plugged/vim-polyglot/syntax/erlang.vim	/^let s:old_style = (exists("g:erlang_old_style_highlight") &&$/;"	v
s:oldcolumn	plugged/vim-polyglot/syntax/lhaskell.vim	/^let s:oldcolumn=col(".")$/;"	v
s:oldline	plugged/vim-polyglot/syntax/lhaskell.vim	/^let s:oldline=line(".")$/;"	v
s:on_async_response	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
s:on_begin	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_begin()$/;"	f
s:on_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_end()$/;"	f
s:on_exit	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
s:on_exit	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
s:on_stderr	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
s:on_stderr	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
s:on_stdout	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
s:one_line_scope_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:one_line_scope_regex	plugged/vim-polyglot/indent/typescript.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:oneline	plugged/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ' oneline'$/;"	v
s:oneline	plugged/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ''$/;"	v
s:open	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:openBlock	plugged/vim-polyglot/indent/octave.vim	/^let s:openBlock = s:beginBlock + s:midBlock$/;"	v
s:open_browser	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:open_browser(url) abort$/;"	f
s:open_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:open_patt = '\\C\\%(\\<\\%(function\\|if\\|repeat\\|do\\)\\>\\|(\\|{\\)'$/;"	v
s:operators	plugged/vim-polyglot/autoload/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:operators	plugged/vim-polyglot/syntax/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:opfirst	plugged/vim-polyglot/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:optionalblock	plugged/vim-polyglot/indent/cobol.vim	/^function! s:optionalblock(lnum,ind,blocks,clauses)$/;"	f
s:or	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:or(xs) abort$/;"	f
s:or_replace	plugged/vim-polyglot/ftplugin/sql.vim	/^let s:or_replace = '\\%(or\\s\\+replace\\s\\+\\)\\?'$/;"	v
s:orders	plugged/vim-polyglot/syntax/hostconf.vim	/^let s:orders = ['bind', 'hosts', 'nis']$/;"	v
s:ordot	plugged/vim-polyglot/ftplugin/cobol.vim	/^    let s:ordot = '\\|\\ze\\.\\%( \\@=\\|$\\)'$/;"	v
s:original_cpo	plugged/vim-polyglot/syntax/tmux.vim	/^let s:original_cpo = &cpo$/;"	v
s:osascript	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:osascript(...) abort$/;"	f
s:other_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^  let s:other_mf_macros = g:other_mf_macros$/;"	v
s:out_remain_text	plugged/coc.nvim/autoload/coc/task.vim	/^let s:out_remain_text = {}$/;"	v
s:p	plugged/fzf.vim/plugin/fzf.vim	/^function! s:p(...)$/;"	f
s:pad_between_letters	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
s:pad_both_sides	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
s:pad_left	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
s:pad_right	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
s:padding_by_displaywidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
s:pair_skip_expr	plugged/vim-polyglot/indent/graphql.vim	/^let s:pair_skip_expr =$/;"	v
s:pairs	plugged/vim-polyglot/syntax/debcontrol.vim	/^let s:pairs = [$/;"	v
s:paren_pairs	plugged/vim-polyglot/indent/cython.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
s:paren_pairs	plugged/vim-polyglot/indent/python.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
s:parse_errors	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! s:parse_errors(filename, content) abort$/;"	f
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:partition	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:paste_buffer_temporary_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
s:pat	plugged/vim-polyglot/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:pat	plugged/vim-polyglot/compiler/ls.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path	plugged/vim-polyglot/autoload/db/adapter/ecto.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:path = &l:path$/;"	v
s:path	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:pattern	plugged/vim-polyglot/ftplugin/twig.vim	/^                let s:pattern .= ':'$/;"	v
s:pattern	plugged/vim-polyglot/ftplugin/twig.vim	/^            let s:pattern .= '{%\\s*\\<' . s:tag . '\\>\\s*\\%(.*=\\)\\@![^}]\\{-}%}'$/;"	v
s:pattern	plugged/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern .= ':{%\\s*\\<' . s:element[-1:][0] . '\\>\\s*.\\{-}%}'$/;"	v
s:pattern	plugged/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern = ''$/;"	v
s:pattern	plugged/vim-polyglot/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
s:permutations	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:permute_suffixes	plugged/vim-polyglot/syntax/hostconf.vim	/^function s:permute_suffixes(list)$/;"	f
s:phpindent	plugged/vim-polyglot/indent/blade.vim	/^let s:phpindent = &indentexpr$/;"	v
s:plain_delims	plugged/vim-polyglot/syntax/raku.vim	/^let s:plain_delims = [$/;"	v
s:plain_mf_macros	plugged/vim-polyglot/syntax/mp.vim	/^  let s:plain_mf_macros = g:plain_mf_macros$/;"	v
s:plain_mf_modes	plugged/vim-polyglot/syntax/mp.vim	/^  let s:plain_mf_modes = g:plain_mf_modes$/;"	v
s:pluck	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:plugin_name() abort dict$/;"	f
s:plugin_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_path	plugged/vim-polyglot/autoload/nim.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:pop	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:pop(list) abort$/;"	f
s:popup_cursor	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_cursor(n) abort$/;"	f
s:popup_position	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_position(config) abort$/;"	f
s:popup_visible	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_visible(id) abort$/;"	f
s:pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
s:prefix	plugged/coc.nvim/autoload/coc/list.vim	/^let s:prefix = '[List Preview]'$/;"	v
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:prev_ends_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:prev_ends_with(context, expr)$/;"	f
s:prev_lnum	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:prev_lnum(lnum)$/;"	f
s:prev_non_connected_line	plugged/vim-polyglot/indent/applescript.vim	/^func! s:prev_non_connected_line(line)$/;"	f
s:prev_section	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:prev_section(stop_func_begin) abort$/;"	f
s:prev_starts_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:prev_starts_with(context, expr)$/;"	f
s:prevgood	plugged/vim-polyglot/indent/bst.vim	/^function! s:prevgood(lnum)$/;"	f
s:prevgood	plugged/vim-polyglot/indent/cobol.vim	/^function! s:prevgood(lnum)$/;"	f
s:preview_color	plugged/vim-polyglot/syntax/dircolors.vim	/^function! s:preview_color(linenr) abort$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:prevnonblanknoncomment	plugged/vim-polyglot/indent/css.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
s:prevnonblanknoncomment	plugged/vim-polyglot/indent/ld.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
s:prevnonblanknoncomment	plugged/vim-polyglot/indent/scss.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
s:prevnonblanknoncomment	plugged/vim-polyglot/indent/stylus.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
s:prevnonblanknoncomment	plugged/vim-polyglot/indent/tcl.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
s:process_rtp	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! s:process_rtp(rtp)$/;"	f
s:process_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
s:product	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:product(lists) abort$/;"	f
s:program_end	plugged/vim-polyglot/indent/sas.vim	/^let s:program_end = '\\v%(^|;)\\s*endsas\\s*;'$/;"	v
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:progresschars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:progresschars = get(g:, 'coc_progress_chars', ['░', '▇'])$/;"	v
s:project	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:project(projectPath, cont)$/;"	f
s:project_root	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:prompt	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:prompt(msg)$/;"	f
s:prompt_win_bufnr	plugged/coc.nvim/autoload/coc/float.vim	/^let s:prompt_win_bufnr = 0$/;"	v
s:prompt_win_width	plugged/coc.nvim/autoload/coc/float.vim	/^let s:prompt_win_width = get(g:, 'coc_prompt_win_width', 32)$/;"	v
s:prop_offset	plugged/coc.nvim/autoload/coc/api.vim	/^let s:prop_offset = get(g:, 'coc_text_prop_offset', 1000)$/;"	v
s:property	plugged/vim-polyglot/indent/sass.vim	/^let s:property = '^\\s*:\\|^\\s*[[:alnum:]#{}-]\\+\\%(:\\|\\s*=\\)'$/;"	v
s:ps1xml_cpo_save	plugged/vim-polyglot/syntax/ps1xml.vim	/^let s:ps1xml_cpo_save = &cpo$/;"	v
s:push	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
s:py3exe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:py3exe() dict$/;"	f
s:pyexe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:pyexe() dict$/;"	f
s:query_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
s:quickfix_populate	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:quickfix_populate(data) abort$/;"	f
s:quickfix_toggle	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:quickfix_toggle(...) abort$/;"	f
s:quit	plugged/coc.nvim/autoload/coc/util.vim	/^  let s:quit = "quit"$/;"	v
s:quit	plugged/coc.nvim/autoload/coc/util.vim	/^let s:quit = ""$/;"	v
s:quotable	plugged/vim-polyglot/syntax/julia.vim	/^let s:quotable = '\\%(' . s:idregex . '\\|?\\|' . s:operators . '\\|' . s:float_regex . '\\|' . /;"	v
s:quoting_colon	plugged/vim-polyglot/syntax/julia.vim	/^let s:quoting_colon = '\\%(\\%(^\\s*\\|\\s\\{6,\\}\\|[' . s:nonid_chars . s:uniop_chars . s:bino/;"	v
s:quoting_colonS	plugged/vim-polyglot/syntax/julia.vim	/^let s:quoting_colonS = '\\s\\@'.s:d(1).'<=:'$/;"	v
s:r_env	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_env = '^\\%(\\' . s:r_envflag . '\\s\\+\\)*\\(\\S\\+\\)'$/;"	v
s:r_envflag	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_envflag = '%(\\S\\+=\\S\\+\\|-[iS]\\|--ignore-environment\\|--split-string\\)'$/;"	v
s:r_hashbang	plugged/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_hashbang = '^#!\\s*\\(\\S\\+\\)\\s*\\(.*\\)\\s*'$/;"	v
s:radix_chars	plugged/vim-polyglot/syntax/clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
s:re_escaped	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_escaped='\\%(\\\\\\)\\@<!\\%(\\\\\\\\\\)*\\zs\\\\'$/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{0}='\\\\\\%([^x_]\\|x\\x\\{0,2}\\|_[.$^]\\=\\)'$/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{1}= '\\[:\\%(alnum\\|alpha\\|blank\\|cntrl\\|digit\\|graph\\|lower\\|print\\|pun/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{2}='\\[\\%([^^][^]]*\\|\\^.[^]]*\\)\\]'$/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{3}='{[0-9,]\\+}?\\='$/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{4}='(?[iImM]\\{1,2})'$/;"	v
s:re_factor	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{5}='(\\(?:\\|?=\\|?!\\|?<=\\|?<!\\|?>\\|?[-#ixm]\\)\\=[^()]*)'$/;"	v
s:re_factor_size	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_factor_size=6$/;"	v
s:re_unescaped	plugged/vim-polyglot/scripts/eregex.vim	/^let s:re_unescaped='\\%(\\\\\\)\\@<!\\%(\\\\\\\\\\)*\\zs'$/;"	v
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:reduce_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:reg	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:reg = {}$/;"	v
s:region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:rel	plugged/vim-polyglot/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_ansi_sequences	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
s:remove_continuation	plugged/vim-polyglot/indent/make.vim	/^function s:remove_continuation(line)$/;"	f
s:remove_continuation	plugged/vim-polyglot/indent/omake.vim	/^function s:remove_continuation(line)$/;"	f
s:remove_layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:repair_posix_text	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
s:repeat	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:repeat(str,count)$/;"	f
s:repeated_find	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:repeated_find(ai_mode)$/;"	f
s:replace	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
s:replace_first	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
s:repo_list	plugged/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! s:repo_list() abort$/;"	f
s:request	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
s:request_async	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
s:reset	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:reset() abort$/;"	f
s:reset_colors	plugged/vim-polyglot/syntax/dircolors.vim	/^function! s:reset_colors() abort$/;"	f
s:restore_view	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:restore_view()$/;"	f
s:restorehistory	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:restorehistory(name, history) abort$/;"	f
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:retry_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
s:returnAppleScriptIndent	plugged/vim-polyglot/indent/applescript.vim	/^func! s:returnAppleScriptIndent()$/;"	f
s:returnTypeMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:returnTypeMatcher = '\\%(:\\s*\\w\\+' . s:typeSpecMatcher . '\\?\\)'$/;"	v
s:reverse	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
s:reverse_list	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:revert_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
s:revert_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
s:rgb_colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_colour(x, y, z)$/;"	f
s:rgb_level	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_level(n)$/;"	f
s:rgb_number	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_number(x)$/;"	f
s:right	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:right(s)$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:root	plugged/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/coc/float.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = 'rpcnotify'$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = get(g:, 'yarp_rpcnotify', 'neovim_rpc#rpcnotify')$/;"	v
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = 'rpcrequest'$/;"	v
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = get(g:, 'yarp_rpcrequest', 'neovim_rpc#rpcrequest')$/;"	v
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:ruby_deindent_keywords	plugged/vim-polyglot/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	plugged/vim-polyglot/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
s:ruby_path	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_paths	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:rubycomplete_debug	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rule_rx	plugged/vim-polyglot/indent/make.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:rule_rx	plugged/vim-polyglot/indent/omake.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:run_cmd	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_cmd(cmd) abort$/;"	f
s:run_lli	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:run_lli(...) abort$/;"	f
s:run_processing_procs	plugged/vim-polyglot/indent/sas.vim	/^let s:run_processing_procs = [$/;"	v
s:run_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_spec(root, path, ...) abort$/;"	f
s:run_syntax_fold	plugged/vim-polyglot/syntax/crystal.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
s:run_syntax_fold	plugged/vim-polyglot/syntax/ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
s:running_task	plugged/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:runtime	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:runtime = resolve($VIMRUNTIME)$/;"	v
s:save_cpo	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/after/indent/objc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/autoload/requirements.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/compiler/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/compiler/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/compiler/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/compiler/swift.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/ant.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/csc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/dtd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/hcl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/java.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/jsp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/julia.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/juliadoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/pug.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/raku.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/rust/tagbar.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/sql.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/stylus.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/tex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/toml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/ftplugin/xsd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/ansible.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/fennel.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/yaml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/gdscript3.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/gsl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/named.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-polyglot/syntax/teraterm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_expandtab	plugged/vim-polyglot/ftplugin/bzl.vim	/^let s:save_expandtab = &l:expandtab$/;"	v
s:save_shiftwidth	plugged/vim-polyglot/ftplugin/bzl.vim	/^let s:save_shiftwidth = &l:shiftwidth$/;"	v
s:save_softtabstop	plugged/vim-polyglot/ftplugin/bzl.vim	/^let s:save_softtabstop = &l:softtabstop$/;"	v
s:save_tabstop	plugged/vim-polyglot/ftplugin/bzl.vim	/^let s:save_tabstop = &l:tabstop$/;"	v
s:saved_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:saved_cursor	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
s:saved_line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:saved_linecount	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:saved_ve	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_ve = &t_ve$/;"	v
s:savehistory	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:savehistory(name) abort$/;"	f
s:scalar_value	plugged/vim-polyglot/indent/ansible.vim	/^let s:scalar_value = '\\v:\\s*[>|\\|]\\s*$' " shell: >$/;"	v
s:scan	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
s:script_checks	plugged/vim-polyglot/tests/native.vim	/^let s:script_checks = {$/;"	v
s:script_env_checks	plugged/vim-polyglot/tests/native.vim	/^let s:script_env_checks = {$/;"	v
s:script_root_dir	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:script_root_dir = expand('<sfile>:p:h') . "\/..\/"$/;"	v
s:search	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:search(pattern) abort dict$/;"	f
s:search_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:searchsyn	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_delim_at	plugged/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:section_delim_at(lnum) abort$/;"	f
s:section_end	plugged/vim-polyglot/indent/sas.vim	/^let s:section_end = '\\v%(^|;)\\s*%(quit|enddata)\\s*;'$/;"	v
s:section_run	plugged/vim-polyglot/indent/sas.vim	/^let s:section_run = '\\v%(^|;)\\s*run\\s*;'$/;"	v
s:section_str	plugged/vim-polyglot/indent/sas.vim	/^let s:section_str = '\\v%(^|;)\\s*%(data|proc)>'$/;"	v
s:sectionend	plugged/vim-polyglot/ftplugin/j.vim	/^let s:sectionend = '\\s*)\\s*'$/;"	v
s:sectionmovement	plugged/vim-polyglot/ftplugin/handlebars.vim	/^function! s:sectionmovement(pattern,flags,mode,count)$/;"	f
s:sections	plugged/vim-polyglot/syntax/debcontrol.vim	/^let s:sections = [$/;"	v
s:sectionstart	plugged/vim-polyglot/ftplugin/j.vim	/^let s:sectionstart = '\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|ver/;"	v
s:select_api	plugged/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:select_in_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = function('s:_serveraddr')$/;"	v
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = get(g:, 'yarp_serveraddr', 'neovim_rpc#serveraddr')$/;"	v
s:session_names	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:session_names = []$/;"	v
s:set_guicolors	plugged/vim-polyglot/syntax/dircolors.vim	/^function! s:set_guicolors() abort$/;"	f
s:set_mark_tick	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:set_mark_tick(...)$/;"	f
s:settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:shellescape	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
s:shift	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:shift(list) abort$/;"	f
s:shiftwidth	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:shiftwidth = &shiftwidth$/;"	v
s:shiftwidth	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let s:shiftwidth = ''$/;"	v
s:shiftwidth	plugged/vim-polyglot/indent/pgsql.vim	/^    fun! s:shiftwidth()$/;"	f
s:shiftwidth	plugged/vim-polyglot/indent/rust.vim	/^    function! s:shiftwidth()$/;"	f
s:shortpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:should_register	plugged/vim-polyglot/syntax/vue.vim	/^function! s:should_register(language, start_pattern)$/;"	f
s:show_errors	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! s:show_errors(errors) abort$/;"	f
s:show_toc	plugged/vim-polyglot/ftplugin/help.vim	/^  function! s:show_toc() abort$/;"	f
s:sid2sfuncs	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
s:signature	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:signature(filePath, line, character, cont)$/;"	f
s:signatureData	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:signatureData(filePath, line, character, cont)$/;"	f
s:skip	plugged/vim-polyglot/indent/cobol.vim	/^let s:skip = 'getline(".") =~ "^.\\\\{6\\\\}[*\/$-]\\\\|\\"[^\\"]*\\""'$/;"	v
s:skip	plugged/vim-polyglot/syntax/ledger.vim	/^  let s:skip .= '\\n\\@!'$/;"	v
s:skip	plugged/vim-polyglot/syntax/ledger.vim	/^let s:skip = s:fb > 0 ? '\\|^\\n' : ''$/;"	v
s:skip2	plugged/vim-polyglot/autoload/pony.vim	/^let s:skip2 = '<SID>InLiteral(line("."), col(".")) || <SID>InComment(line("."), col(".")) == 1'$/;"	v
s:skip3	plugged/vim-polyglot/autoload/pony.vim	/^let s:skip3 = '!<SID>InKeyword(line("."), col("."))'$/;"	v
s:skip4	plugged/vim-polyglot/autoload/pony.vim	/^let s:skip4 = '!<SID>InBracket(line("."), col("."))'$/;"	v
s:skipPatterns	plugged/vim-polyglot/indent/julia.vim	/^let s:skipPatterns = '\\<julia\\%(Comprehension\\%(For\\|If\\)\\|RangeKeyword\\|Comment\\%([LM]\\/;"	v
s:skip_after_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	plugged/vim-polyglot/indent/python.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/lua.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~# 'luaComment\\\\|luaString'"$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/solidity.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:skip_if_not	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:skip_if_not(current_lnum, ...)$/;"	f
s:skip_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
s:skip_syntax	plugged/vim-polyglot/indent/nix.vim	/^let s:skip_syntax = '\\%(Comment\\|String\\)$'$/;"	v
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:sort	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sortByLength	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:sortByLength(i1, i2)$/;"	f
s:sort_buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sort_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:span	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawn	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
s:special_chars_syn_pattern	plugged/vim-polyglot/indent/cython.vim	/^let s:special_chars_syn_pattern = "\\\\vstring|comment|^pythonbytes%(contents)=$|pythonTodo|jedi/;"	v
s:special_chars_syn_pattern	plugged/vim-polyglot/indent/python.vim	/^let s:special_chars_syn_pattern = "\\\\vstring|comment|^pythonbytes%(contents)=$|pythonTodo|jedi/;"	v
s:special_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:spell_cluster	plugged/vim-polyglot/syntax/crystal.vim	/^let s:spell_cluster = exists('crystal_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:spell_cluster	plugged/vim-polyglot/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:splat_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:split3	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
s:split_by_displaywidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
s:split_leftright	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
s:split_posix_text	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:st	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:st = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:stack_size	plugged/vim-polyglot/scripts/eregex.vim	/^let s:stack_size=0$/;"	v
s:start	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
s:start	plugged/vim-polyglot/syntax/svelte.vim	/^  let s:start = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr . '\\_[^>]*>'$/;"	v
s:start_col	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:start_col(lnum)$/;"	f
s:start_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
s:start_pattern	plugged/vim-polyglot/syntax/vue.vim	/^  let s:start_pattern = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr_pattern . '\\_[^>]*>'$/;"	v
s:start_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt()$/;"	f
s:start_prompt_vim	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt_vim() abort$/;"	f
s:start_syntax	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:start_syntax(lnum)$/;"	f
s:start_tag	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^let s:start_tag = '<\\_s*\\%(>\\|\\${\\|\\%(\\<[-:._$A-Za-z0-9]\\+\\>\\)\\)'$/;"	v
s:startexp	plugged/vim-polyglot/indent/typescriptreact.vim	/^let s:startexp = '[\\{\\(]\\s*$'$/;"	v
s:starts_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:starts_with(context, expr)$/;"	f
s:starts_with	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:stepmatch	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
s:steps	plugged/vim-polyglot/ftplugin/cucumber.vim	/^function! s:steps(lnum)$/;"	f
s:stop_statement	plugged/vim-polyglot/indent/cython.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:stop_statement	plugged/vim-polyglot/indent/python.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = b:tt2_syn_tags . ' '$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,' \\+',' ','g')$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,'^ \\+','','g')$/;"	v
s:str_compose	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:str_compose(line, idx, text) abort$/;"	f
s:str_modifiers	plugged/vim-polyglot/scripts/eregex.vim	/^let s:str_modifiers='iISCDMm'$/;"	v
s:strchars	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
s:strchars	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:strip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip	plugged/vim-polyglot/indent/bst.vim	/^function! s:strip(lnum)$/;"	f
s:stripComment	plugged/vim-polyglot/indent/haskell.vim	/^function! s:stripComment(line)$/;"	f
s:strip_namespace_and_macro_chars	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
s:stripped	plugged/vim-polyglot/indent/cobol.vim	/^function! s:stripped(lnum)$/;"	f
s:strpart	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:strpart(s, i, l)$/;"	f
s:strwidthpart	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart_reverse	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:substitute_last	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
s:subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
s:suffixesadd	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:suffixesadd	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:supported	plugged/vim-polyglot/syntax/debchangelog.vim	/^let s:supported = [$/;"	v
s:supported	plugged/vim-polyglot/syntax/debsources.vim	/^let s:supported = [$/;"	v
s:sw	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
s:sw	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^  function! s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/crystal.vim	/^  function! s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/crystal.vim	/^  let s:sw = function('shiftwidth')$/;"	v
s:sw	plugged/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/ecrystal.vim	/^  function s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/ecrystal.vim	/^  let s:sw = function('shiftwidth')$/;"	v
s:sw	plugged/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
s:sw	plugged/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:symchar	plugged/vim-polyglot/syntax/fennel.vim	/^let s:symchar = '0-9' . s:symcharnodig$/;"	v
s:symcharnodig	plugged/vim-polyglot/syntax/fennel.vim	/^let s:symcharnodig = '\\!\\$%\\&\\#\\*\\+\\-.\/:<=>?A-Z^_a-z|\\x80-\\U10FFFF'$/;"	v
s:syn	plugged/vim-polyglot/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
s:syn_blocks	plugged/vim-polyglot/indent/hog.vim	/^let s:syn_blocks = '\\<SnortRuleTypeBody\\>'$/;"	v
s:syn_contains	plugged/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! s:syn_contains(lnum, cnum, syn_name)$/;"	f
s:syn_id_name	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:syn_id_name()$/;"	f
s:syn_id_name	plugged/vim-polyglot/indent/fennel.vim	/^	function! s:syn_id_name()$/;"	f
s:syn_name	plugged/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! s:syn_name(lnum, cnum)$/;"	f
s:syng_linecom	plugged/vim-polyglot/autoload/yats.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:syng_linecom	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:syng_multiline	plugged/vim-polyglot/autoload/yats.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_multiline	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/falcon.vim	/^let s:syng_strcom = '\\<falcon\\%(String\\|StringEscape\\|Comment\\)\\>'$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/typescript.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	plugged/vim-polyglot/indent/falcon.vim	/^let s:syng_string = '\\<falcon\\%(String\\|StringEscape\\)\\>'$/;"	v
s:syng_string	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_string	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_string	plugged/vim-polyglot/indent/typescript.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_stringdoc	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:synid	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax_at	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_at(lnum, col)$/;"	f
s:syntax_context	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_context(lnum)$/;"	f
s:syntax_keyword	plugged/vim-polyglot/syntax/clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
s:syntax_name	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:syntax_name(line, col)$/;"	f
s:syntax_stack_at	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_stack_at(lnum, col)$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:system(cmd)$/;"	f
s:system	plugged/vim-polyglot/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
s:system	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:system(str, ...) abort$/;"	f
s:system	plugged/vim-polyglot/autoload/zig/util.vim	/^function! s:system(cmd, ...) abort$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tag	plugged/vim-polyglot/indent/haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	plugged/vim-polyglot/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	plugged/vim-polyglot/indent/slim.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	plugged/vim-polyglot/indent/slime.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tagname	plugged/vim-polyglot/indent/html.vim	/^let s:tagname = '\\w\\+\\(-\\w\\+\\)*'$/;"	v
s:tags	plugged/vim-polyglot/after/syntax/javascript/graphql.vim	/^let s:tags = '\\%(' . join(graphql#javascript_tags(), '\\|') . '\\)'$/;"	v
s:tags	plugged/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:tags = get(g:, 'vim_jsx_pretty_template_tags', ['html', 'jsx'])$/;"	v
s:tags	plugged/vim-polyglot/after/syntax/typescript/graphql.vim	/^let s:tags = '\\%(' . join(graphql#javascript_tags(), '\\|') . '\\)'$/;"	v
s:tags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:take_while	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:temp	plugged/vim-polyglot/syntax/raku.vim	/^    let s:temp = split(s:words_space)$/;"	v
s:temp	plugged/vim-polyglot/syntax/raku.vim	/^let s:temp = split(s:words_space)$/;"	v
s:template_sink	plugged/vim-polyglot/autoload/fzf_gitignore.vim	/^function! s:template_sink(templates) abort$/;"	f
s:ternary	plugged/vim-polyglot/indent/solidity.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary	plugged/vim-polyglot/indent/typescript.vim	/^let s:ternary = '^\\s\\+[?:]'$/;"	v
s:ternary_q	plugged/vim-polyglot/indent/solidity.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
s:ternary_q	plugged/vim-polyglot/indent/typescript.vim	/^let s:ternary_q = '^\\s\\+?[.?]\\@!'$/;"	v
s:test	plugged/vim-polyglot/ftplugin/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	plugged/vim-polyglot/indent/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	plugged/vim-polyglot/syntax/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:texMathDelimList	plugged/vim-polyglot/syntax/tex.vim	/^    let s:texMathDelimList= s:texMathDelimList + [$/;"	v
s:texMathDelimList	plugged/vim-polyglot/syntax/tex.vim	/^  let s:texMathDelimList=[$/;"	v
s:texMathList	plugged/vim-polyglot/syntax/tex.vim	/^    let s:texMathList= s:texMathList + [$/;"	v
s:texMathList	plugged/vim-polyglot/syntax/tex.vim	/^  let s:texMathList=[$/;"	v
s:tex_comment_nospell	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_comment_nospell= 0$/;"	v
s:tex_comment_nospell	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_comment_nospell= 1$/;"	v
s:tex_conceal	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_conceal= 'abdmgsS'$/;"	v
s:tex_conceal	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_conceal= g:tex_conceal$/;"	v
s:tex_excludematcher	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_excludematcher= 0$/;"	v
s:tex_excludematcher	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_excludematcher= g:tex_excludematcher$/;"	v
s:tex_fast	plugged/vim-polyglot/syntax/tex.vim	/^  let s:tex_fast= ""$/;"	v
s:tex_fast	plugged/vim-polyglot/syntax/tex.vim	/^  let s:tex_fast= g:tex_fast$/;"	v
s:tex_fast	plugged/vim-polyglot/syntax/tex.vim	/^let s:tex_fast= "bcmMprsSvV"$/;"	v
s:tex_fold_enabled	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_fold_enabled= 0$/;"	v
s:tex_fold_enabled	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_fold_enabled= 1$/;"	v
s:tex_matchcheck	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_matchcheck= '[({[]'$/;"	v
s:tex_matchcheck	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_matchcheck= g:tex_matchcheck$/;"	v
s:tex_no_error	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_no_error= 0$/;"	v
s:tex_no_error	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_no_error= 1$/;"	v
s:tex_nospell	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_nospell = 0$/;"	v
s:tex_nospell	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_nospell = 1$/;"	v
s:tex_subscripts	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_subscripts= '[0-9aehijklmnoprstuvx,+-\/().]'$/;"	v
s:tex_subscripts	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_subscripts= g:tex_subscripts$/;"	v
s:tex_superscripts	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_superscripts= '[0-9a-zA-W.,:;+-<>\/()=]'$/;"	v
s:tex_superscripts	plugged/vim-polyglot/syntax/tex.vim	/^ let s:tex_superscripts= g:tex_superscripts$/;"	v
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:tmp	plugged/vim-polyglot/scripts/eregex.vim	/^let s:tmp=matchstr("$Revision: 2.60 $", '[0-9.]\\+')$/;"	v
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toend	plugged/vim-polyglot/ftplugin/cobol.vim	/^function! s:toend(direction)$/;"	f
s:token_pattern	plugged/vim-polyglot/indent/dtd.vim	/^let s:token_pattern = '^[^[:space:]]\\+'$/;"	v
s:topLev	plugged/vim-polyglot/after/indent/objc.vim	/^let s:topLev = '^\\s*@\\%(class\\|end\\|implementation\\|interface\\|protocol\\|\\)\\>'$/;"	v
s:topindent	plugged/vim-polyglot/ftplugin/ocaml.vim	/^function s:topindent(lnum)$/;"	f
s:transaction	plugged/vim-polyglot/autoload/ledger.vim	/^let s:transaction = {} "{{{1$/;"	v
s:transaction.format_head	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.format_head() abort dict "{{{2$/;"	f
s:transaction.from_lnum	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.from_lnum(lnum) abort dict "{{{2$/;"	f
s:transaction.new	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.new() abort dict$/;"	f
s:transaction.parse_body	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.parse_body(...) abort dict "{{{2$/;"	f
s:transaction.set_state	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.set_state(char) abort dict "{{{2$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	plugged/coc.nvim/autoload/coc.vim	/^function! s:trim(str)$/;"	f
s:trim	plugged/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:trim(line)$/;"	f
s:trim	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim(str) abort$/;"	f
s:trim_end	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
s:trim_start	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
s:truncate	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate_skipping	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:type	plugged/vim-polyglot/indent/ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
s:type	plugged/vim-polyglot/indent/sml.vim	/^let s:type = '^\\s*\\%(let\\|type\\)\\>.*='$/;"	v
s:typeKeywordIncPattern	plugged/vim-polyglot/indent/plantuml.vim	/^function! s:typeKeywordIncPattern() abort$/;"	f
s:typeSpecMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:typeSpecMatcher = '\\%(\\s*\\[\\_[^\\]]*\\]\\)'$/;"	v
s:types	plugged/vim-polyglot/syntax/raku.vim	/^let s:types = [$/;"	v
s:ulen	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ulen(s)$/;"	f
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/ant.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/ant.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/aspvbs.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/config.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/config.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . ' | ' . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/ecrystal.vim	/^let s:undo_ftplugin = ''$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/hog.vim	/^let s:undo_ftplugin = "setl fo< com< cms< def< inc<"$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/jsp.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/pug.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/pug.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/slim.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/slim.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/slim.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/stylus.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/stylus.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/xhtml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/xsd.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-polyglot/ftplugin/xsd.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_spelllang	plugged/vim-polyglot/extras/menu.vim	/^  let s:undo_spelllang = ['aun &Tools.&Spelling.&Find\\ More\\ Languages']$/;"	v
s:unescape	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
s:unescape_pattern	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
s:unfnameescape	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:unfnameescape(str) abort$/;"	f
s:unformat_ocaml_type	plugged/vim-polyglot/ftplugin/ocaml.vim	/^    function s:unformat_ocaml_type(res)$/;"	f
s:uniop_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:uniop_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜⋆"$/;"	v
s:uniq	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:unload	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:unload() abort dict$/;"	f
s:unmap	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:unmap(function)$/;"	f
s:unshift	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:unsupported	plugged/vim-polyglot/syntax/debchangelog.vim	/^let s:unsupported = [$/;"	v
s:unsupported	plugged/vim-polyglot/syntax/debsources.vim	/^let s:unsupported = [$/;"	v
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_progress	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:update_progress(bufnr, width, ts) abort$/;"	f
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_visual_markers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:urgency	plugged/vim-polyglot/syntax/debchangelog.vim	/^let s:urgency='urgency=\\(low\\|medium\\|high\\|emergency\\|critical\\)\\( [^[:space:],][^,]*\\)/;"	v
s:use_word_boundary	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:val	plugged/vim-polyglot/indent/sml.vim	/^let s:val = '^\\s*\\(val\\|external\\)\\>.*:'$/;"	v
s:valMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:valMatcher = '\\%(' . s:modifierMatcher . '\\|lazy\\s\\+\\)*\\<va[lr]\\>'$/;"	v
s:vala_cpo_save	plugged/vim-polyglot/syntax/vala.vim	/^let s:vala_cpo_save = &cpo$/;"	v
s:var_stmt	plugged/vim-polyglot/indent/solidity.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:var_stmt	plugged/vim-polyglot/indent/typescript.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:variables	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:variables(bufnr) abort$/;"	f
s:version	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:version() abort$/;"	f
s:version	plugged/vim-polyglot/scripts/eregex.vim	/^let s:version = s:maj + s:min$/;"	v
s:version_file	plugged/vim-polyglot/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vimReturnFocus	plugged/vim-polyglot/autoload/fsharp.vim	/^    function! s:vimReturnFocus(window)$/;"	f
s:vim_api_version	plugged/coc.nvim/autoload/coc/util.vim	/^let s:vim_api_version = 8$/;"	v
s:vim_jsx_pretty_colorful_config	plugged/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:vim_jsx_pretty_colorful_config = get(g:, 'vim_jsx_pretty_colorful_config', 0)$/;"	v
s:vital_base_dir	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:vital_files() abort$/;"	f
s:wait_for_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:warn(...) abort$/;"	f
s:warned	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warning_message	plugged/vim-polyglot/autoload/ledger.vim	/^function! s:warning_message(msg) abort$/;"	f
s:warning_sign	plugged/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') ? '⚠️ ' : 'W')$/;"	v
s:watched_keys	plugged/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:when_no_matched_or_others	plugged/vim-polyglot/ftplugin/sql.vim	/^let s:when_no_matched_or_others = '\\%(\\<when\\>\\%(\\s\\+\\%(\\%(\\<not\\>\\s\\+\\)\\?<matched/;"	v
s:wide	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:win_execute	plugged/coc.nvim/autoload/coc/api.vim	/^  function! s:win_execute(win_id, cmd, ...) abort$/;"	f
s:win_gotoid_safe	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:win_gotoid_safe(winid)$/;"	f
s:win_sep	plugged/vim-polyglot/ftplugin/dart.vim	/^let s:win_sep = (has('win32') || has('win64')) ? '\/' : ''$/;"	v
s:win_setview	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:win_setview(winid, topline, lnum) abort$/;"	f
s:windows_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winpos_map	plugged/vim-polyglot/autoload/ledger.vim	/^let s:winpos_map = {$/;"	v
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:with_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:words	plugged/vim-polyglot/autoload/clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-/;"	v
s:words	plugged/vim-polyglot/syntax/raku.vim	/^    let s:words = join(s:temp, "\\\\|")$/;"	v
s:words	plugged/vim-polyglot/syntax/raku.vim	/^let s:words = join(s:temp, "\\\\|")$/;"	v
s:words_space	plugged/vim-polyglot/syntax/raku.vim	/^    let s:words_space = join(s:words_list, " ")$/;"	v
s:words_space	plugged/vim-polyglot/syntax/raku.vim	/^let s:words_space = join(s:alpha_metaops, " ")$/;"	v
s:words_space	plugged/vim-polyglot/syntax/raku.vim	/^let s:words_space = join(s:types, " ")$/;"	v
s:workspace	plugged/vim-polyglot/autoload/fsharp.vim	/^let s:workspace = []$/;"	v
s:workspaceLoad	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:workspaceLoad(files, cont)$/;"	f
s:workspacePeek	plugged/vim-polyglot/autoload/fsharp.vim	/^function! s:workspacePeek(directory, depth, excludedDirs, cont)$/;"	f
s:wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
s:wrap_a	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
s:wrap_around	plugged/vim-polyglot/ftplugin/handlebars.vim	/^function! s:wrap_around()$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrap_i	plugged/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
s:wrap_inside	plugged/vim-polyglot/ftplugin/handlebars.vim	/^function! s:wrap_inside()$/;"	f
s:write_to_preview_window	plugged/vim-polyglot/autoload/julia/doc.vim	/^function! s:write_to_preview_window(content, ftype, buffername)$/;"	f
s:wsh_cpo_save	plugged/vim-polyglot/syntax/wsh.vim	/^let s:wsh_cpo_save = &cpo$/;"	v
s:xml_cpo_save	plugged/vim-polyglot/syntax/xml.vim	/^let s:xml_cpo_save = &cpo$/;"	v
s:yamlKey	plugged/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = "yamlBlockMappingKey"$/;"	v
s:yamlKey	plugged/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = g:ansible_yamlKeyName$/;"	v
s:yank_to_register	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:yesmacro	plugged/vim-polyglot/ftplugin/julia.vim	/^  let s:yesmacro = s:nomacro . '\\%('. s:macro_regex . '\\)\\+'$/;"	v
s:z	plugged/vim-polyglot/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:zip	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip(...) abort$/;"	f
s:zip_fill	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
scala	plugged/vim-polyglot/ctags/scala.ctags	/^--langdef=scala$/;"	l
scala#ConditionalConfirm	plugged/vim-polyglot/indent/scala.vim	/^function! scala#ConditionalConfirm(msg)$/;"	f
scala#CountBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountBrackets(line, openBracket, closedBracket)$/;"	f
scala#CountCurlies	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountCurlies(line)$/;"	f
scala#CountParens	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountParens(line)$/;"	f
scala#CurlyMatcher	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CurlyMatcher()$/;"	f
scala#GetDirForFuzzyFinder	plugged/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetDirForFuzzyFinder(from, addon)$/;"	f
scala#GetLine	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLine(lnum)$/;"	f
scala#GetLineAndColumnThatMatchesBracket	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineAndColumnThatMatchesCurly	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesCurly()$/;"	f
scala#GetLineAndColumnThatMatchesParen	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesParen()$/;"	f
scala#GetLineThatMatchesBracket	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineThatMatchesCurly	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesCurly()$/;"	f
scala#GetLineThatMatchesParen	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesParen()$/;"	f
scala#GetMainDirForFuzzyFinder	plugged/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetMainDirForFuzzyFinder(from)$/;"	f
scala#GetPrevCodeLine	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetPrevCodeLine(lnum)$/;"	f
scala#GetRootDirForFuzzyFinder	plugged/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetRootDirForFuzzyFinder(from)$/;"	f
scala#GetTestDirForFuzzyFinder	plugged/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetTestDirForFuzzyFinder(from)$/;"	f
scala#InvertBracketType	plugged/vim-polyglot/indent/scala.vim	/^function! scala#InvertBracketType(openBracket, closedBracket)$/;"	f
scala#IsParentCase	plugged/vim-polyglot/indent/scala.vim	/^function! scala#IsParentCase()$/;"	f
scala#LineCompletesBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesBrackets(openBracket, closedBracket)$/;"	f
scala#LineCompletesDefValr	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesDefValr(lnum, line)$/;"	f
scala#LineCompletesIfElse	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesIfElse(lnum, line)$/;"	f
scala#LineCompletesXML	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesXML(lnum, line)$/;"	f
scala#LineEndsInIncomplete	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineEndsInIncomplete(line)$/;"	f
scala#LineIsAClosingXML	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineIsAClosingXML(line)$/;"	f
scala#LineIsCompleteIf	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineIsCompleteIf(line)$/;"	f
scala#MatchesIncompleteDefValr	plugged/vim-polyglot/indent/scala.vim	/^function! scala#MatchesIncompleteDefValr(line)$/;"	f
scala#NumberOfBraceGroups	plugged/vim-polyglot/indent/scala.vim	/^function! scala#NumberOfBraceGroups(line)$/;"	f
scala#SanitizeDirForFuzzyFinder	plugged/vim-polyglot/ftplugin/scala.vim	/^    function! scala#SanitizeDirForFuzzyFinder(dir)$/;"	f
scala#SpecificLineCompletesBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#SpecificLineCompletesBrackets(lnum, openBracket, closedBracket)$/;"	f
scala#Test	plugged/vim-polyglot/indent/scala.vim	/^function! scala#Test(lnum, line, openBracket, closedBracket)$/;"	f
scala#Testhelper	plugged/vim-polyglot/indent/scala.vim	/^function! scala#Testhelper(lnum, line, openBracket, closedBracket, iteration)$/;"	f
scripts	plugged/coc.nvim/package.json	/^  "scripts": {},$/;"	o
sed_delimiter	plugged/vim-polyglot/syntax/sed.vim	/^    let __sed_delimiter = escape(nr2char(__sed_i), __sed_metacharacters)$/;"	v
sed_i	plugged/vim-polyglot/syntax/sed.vim	/^    let __sed_i = __sed_i + 1$/;"	v
sed_i	plugged/vim-polyglot/syntax/sed.vim	/^let __sed_i = __sed_i + 1$/;"	v
sed_i	plugged/vim-polyglot/syntax/sed.vim	/^let __sed_i = char2nr(" ") " ASCII: 32, EBCDIC: 64$/;"	v
sed_last	plugged/vim-polyglot/syntax/sed.vim	/^    let __sed_last = 126$/;"	v
sed_last	plugged/vim-polyglot/syntax/sed.vim	/^    let __sed_last = 255$/;"	v
sed_metacharacters	plugged/vim-polyglot/syntax/sed.vim	/^let __sed_metacharacters = '$*.\\^[~'$/;"	v
self.get_completions	plugged/vim-polyglot/autoload/rubycomplete.vim	/^  def self.get_completions(base)$/;"	f
self.preload_rails	plugged/vim-polyglot/autoload/rubycomplete.vim	/^  def self.preload_rails$/;"	f
serveraddr	plugged/nvim-yarp/pythonx/yarp.py	/^        serveraddr, port = serveraddr.split(':')$/;"	v
serveraddr	plugged/nvim-yarp/pythonx/yarp.py	/^serveraddr = sys.argv[1]$/;"	v
set_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
set_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
settings	plugged/coc.nvim/data/schema.json	/^        "settings": {$/;"	o	object:definitions.languageServerBase.properties
settings	plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerCommand.properties
settings	plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerModule.properties
settings	plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerSocket.properties
shell	plugged/coc.nvim/data/schema.json	/^        "shell": {$/;"	o	object:definitions.languageServerCommand.properties
show_warnings	plugged/vim-polyglot/scripts/build	/^def show_warnings(all_filetypes, expected_filetypes)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
signature.enable	plugged/coc.nvim/data/schema.json	/^    "signature.enable": {$/;"	o	object:properties
signature.hideOnTextChange	plugged/coc.nvim/data/schema.json	/^    "signature.hideOnTextChange": {$/;"	o	object:properties
signature.maxWindowHeight	plugged/coc.nvim/data/schema.json	/^    "signature.maxWindowHeight": {$/;"	o	object:properties
signature.maxWindowWidth	plugged/coc.nvim/data/schema.json	/^    "signature.maxWindowWidth": {$/;"	o	object:properties
signature.preferShownAbove	plugged/coc.nvim/data/schema.json	/^    "signature.preferShownAbove": {$/;"	o	object:properties
signature.target	plugged/coc.nvim/data/schema.json	/^    "signature.target": {$/;"	o	object:properties
signature.triggerSignatureWait	plugged/coc.nvim/data/schema.json	/^    "signature.triggerSignatureWait": {$/;"	o	object:properties
site	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*site[[:space:]]*([a-zA-Z0-9_\\-]+)\/\\1\/s,site\/$/;"	k	langdef:puppet
smt2#PrintSolverVersion	plugged/vim-polyglot/autoload/smt2.vim	/^function! smt2#PrintSolverVersion()$/;"	f
smt2#RunSolver	plugged/vim-polyglot/autoload/smt2.vim	/^function! smt2#RunSolver()$/;"	f
smt2#RunSolverAndShowResult	plugged/vim-polyglot/autoload/smt2.vim	/^function! smt2#RunSolverAndShowResult()$/;"	f
snippet	plugged/coc.nvim/data/schema.json	/^        "snippet": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
sort_packages	plugged/vim-polyglot/scripts/build	/^def sort_packages(packages)$/;"	f
spellmenu	plugged/vim-polyglot/extras/menu.vim	/^    augroup spellmenu$/;"	a
square_expansion	plugged/vim-polyglot/scripts/build	/^def square_expansion(s)$/;"	f	method:copy_file.rules_to_code.rule_to_code.generate_ftdetect
square_expansion	plugged/vim-polyglot/scripts/import_vim	/^def square_expansion(s)$/;"	f
stdioEncoding	plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {$/;"	o	object:definitions.languageServerBase.properties
stdioEncoding	plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerCommand.properties
stdioEncoding	plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerModule.properties
stdioEncoding	plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerSocket.properties
struct	plugged/coc.nvim/data/schema.json	/^        "struct": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
structure names	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?struct[ \\t]+([a-zA-Z0-9_]+)\/\\2\/s,structure names\/$/;"	k	langdef:Rust
suggest.acceptSuggestionOnCommitCharacter	plugged/coc.nvim/data/schema.json	/^    "suggest.acceptSuggestionOnCommitCharacter": {$/;"	o	object:properties
suggest.asciiCharactersOnly	plugged/coc.nvim/data/schema.json	/^    "suggest.asciiCharactersOnly": {$/;"	o	object:properties
suggest.autoTrigger	plugged/coc.nvim/data/schema.json	/^    "suggest.autoTrigger": {$/;"	o	object:properties
suggest.completionItemKindLabels	plugged/coc.nvim/data/schema.json	/^    "suggest.completionItemKindLabels": {$/;"	o	object:properties
suggest.defaultSortMethod	plugged/coc.nvim/data/schema.json	/^    "suggest.defaultSortMethod": {$/;"	o	object:properties
suggest.detailField	plugged/coc.nvim/data/schema.json	/^    "suggest.detailField": {$/;"	o	object:properties
suggest.detailMaxLength	plugged/coc.nvim/data/schema.json	/^    "suggest.detailMaxLength": {$/;"	o	object:properties
suggest.disableKind	plugged/coc.nvim/data/schema.json	/^    "suggest.disableKind": {$/;"	o	object:properties
suggest.disableMenu	plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenu": {$/;"	o	object:properties
suggest.disableMenuShortcut	plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenuShortcut": {$/;"	o	object:properties
suggest.echodocSupport	plugged/coc.nvim/data/schema.json	/^    "suggest.echodocSupport": {$/;"	o	object:properties
suggest.enablePreselect	plugged/coc.nvim/data/schema.json	/^    "suggest.enablePreselect": {$/;"	o	object:properties
suggest.enablePreview	plugged/coc.nvim/data/schema.json	/^    "suggest.enablePreview": {$/;"	o	object:properties
suggest.fixInsertedWord	plugged/coc.nvim/data/schema.json	/^    "suggest.fixInsertedWord": {$/;"	o	object:properties
suggest.floatEnable	plugged/coc.nvim/data/schema.json	/^    "suggest.floatEnable": {$/;"	o	object:properties
suggest.highPrioritySourceLimit	plugged/coc.nvim/data/schema.json	/^    "suggest.highPrioritySourceLimit": {$/;"	o	object:properties
suggest.invalidInsertCharacters	plugged/coc.nvim/data/schema.json	/^    "suggest.invalidInsertCharacters": {$/;"	o	object:properties
suggest.keepCompleteopt	plugged/coc.nvim/data/schema.json	/^    "suggest.keepCompleteopt": {$/;"	o	object:properties
suggest.labelMaxLength	plugged/coc.nvim/data/schema.json	/^    "suggest.labelMaxLength": {$/;"	o	object:properties
suggest.languageSourcePriority	plugged/coc.nvim/data/schema.json	/^    "suggest.languageSourcePriority": {$/;"	o	object:properties
suggest.localityBonus	plugged/coc.nvim/data/schema.json	/^    "suggest.localityBonus": {$/;"	o	object:properties
suggest.lowPrioritySourceLimit	plugged/coc.nvim/data/schema.json	/^    "suggest.lowPrioritySourceLimit": {$/;"	o	object:properties
suggest.maxCompleteItemCount	plugged/coc.nvim/data/schema.json	/^    "suggest.maxCompleteItemCount": {$/;"	o	object:properties
suggest.maxPreviewWidth	plugged/coc.nvim/data/schema.json	/^    "suggest.maxPreviewWidth": {$/;"	o	object:properties
suggest.minTriggerInputLength	plugged/coc.nvim/data/schema.json	/^    "suggest.minTriggerInputLength": {$/;"	o	object:properties
suggest.noselect	coc-settings.json	/^  "suggest.noselect": false,$/;"	b
suggest.noselect	plugged/coc.nvim/data/schema.json	/^    "suggest.noselect": {$/;"	o	object:properties
suggest.numberSelect	plugged/coc.nvim/data/schema.json	/^    "suggest.numberSelect": {$/;"	o	object:properties
suggest.preferCompleteThanJumpPlaceholder	plugged/coc.nvim/data/schema.json	/^    "suggest.preferCompleteThanJumpPlaceholder": {$/;"	o	object:properties
suggest.removeDuplicateItems	plugged/coc.nvim/data/schema.json	/^    "suggest.removeDuplicateItems": {$/;"	o	object:properties
suggest.snippetIndicator	plugged/coc.nvim/data/schema.json	/^    "suggest.snippetIndicator": {$/;"	o	object:properties
suggest.timeout	plugged/coc.nvim/data/schema.json	/^    "suggest.timeout": {$/;"	o	object:properties
suggest.triggerAfterInsertEnter	plugged/coc.nvim/data/schema.json	/^    "suggest.triggerAfterInsertEnter": {$/;"	o	object:properties
suggest.triggerCompletionWait	plugged/coc.nvim/data/schema.json	/^    "suggest.triggerCompletionWait": {$/;"	o	object:properties
t	plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.t = function(value, mode) {$/;"	f	function:__webpack_require__
tads_minlines	plugged/vim-polyglot/syntax/tads.vim	/^  let tads_minlines = 15$/;"	v
tads_sync_dist	plugged/vim-polyglot/syntax/tads.vim	/^  let tads_sync_dist = 100$/;"	v
terminateTree	plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
terraform#align	plugged/vim-polyglot/autoload/terraform.vim	/^function! terraform#align() abort$/;"	f
terraform#commands	plugged/vim-polyglot/autoload/terraform.vim	/^function! terraform#commands(ArgLead, CmdLine, CursorPos) abort$/;"	f
terraform#fmt	plugged/vim-polyglot/autoload/terraform.vim	/^function! terraform#fmt() abort$/;"	f
test	plugged/vim-polyglot/Makefile	/^test:$/;"	t
testEnvironment	plugged/coc.nvim/package.json	/^    "testEnvironment": "node",$/;"	s	object:jest
testRegex	plugged/coc.nvim/package.json	/^    "testRegex": "src\/__tests__\/.*\\\\.(test|spec)\\\\.ts$",$/;"	s	object:jest
text	plugged/coc.nvim/data/schema.json	/^        "text": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
trace.server	plugged/coc.nvim/data/schema.json	/^        "trace.server": {$/;"	o	object:definitions.languageServerBase.properties
trace.server	plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerCommand.properties
trace.server	plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerModule.properties
trace.server	plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerSocket.properties
traits	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy)[ \\t]*)*(private[^ ]*|protected)?/;"	k	langdef:scala
traits,traits	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?trait[ \\t]+([a-zA-Z0-9_]+)\/\\2\/t,traits,traits\/$/;"	k	langdef:Rust
transform	plugged/coc.nvim/package.json	/^    "transform": {$/;"	o	object:jest
transform_patterns	plugged/vim-polyglot/scripts/build	/^def transform_patterns(heuristics)$/;"	f
transport	plugged/coc.nvim/data/schema.json	/^        "transport": {$/;"	o	object:definitions.languageServerModule.properties
transportPort	plugged/coc.nvim/data/schema.json	/^        "transportPort": {$/;"	o	object:definitions.languageServerModule.properties
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.filetypes.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.rootPatterns.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerCommand.properties.args.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.args.items
type	plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.execArgv.items
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.filetypes
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.rootPatterns
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerCommand.properties.args
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.args
type	plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.execArgv
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableDynamicRegister
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableSnippetCompletion
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.enable
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.progressOnInitialization
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.detached
type	plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.shell
type	plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerModule.properties.transportPort
type	plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerSocket.properties.port
type	plugged/coc.nvim/data/schema.json	/^          "type": "number",$/;"	s	object:definitions.languageServerBase.properties.formatterPriority
type	plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.env
type	plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
type	plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.settings
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.cwd
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.trace.server
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerCommand.properties.command
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.module
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.runtime
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.transport
type	plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerSocket.properties.host
type	plugged/coc.nvim/data/schema.json	/^        "class": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.class
type	plugged/coc.nvim/data/schema.json	/^        "color": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.color
type	plugged/coc.nvim/data/schema.json	/^        "constant": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constant
type	plugged/coc.nvim/data/schema.json	/^        "constructor": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constructor
type	plugged/coc.nvim/data/schema.json	/^        "default": { "type": "string" }$/;"	s	object:properties.suggest.completionItemKindLabels.properties.default
type	plugged/coc.nvim/data/schema.json	/^        "enum": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enum
type	plugged/coc.nvim/data/schema.json	/^        "enumMember": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enumMember
type	plugged/coc.nvim/data/schema.json	/^        "event": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.event
type	plugged/coc.nvim/data/schema.json	/^        "field": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.field
type	plugged/coc.nvim/data/schema.json	/^        "file": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.file
type	plugged/coc.nvim/data/schema.json	/^        "folder": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.folder
type	plugged/coc.nvim/data/schema.json	/^        "function": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.function
type	plugged/coc.nvim/data/schema.json	/^        "interface": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.interface
type	plugged/coc.nvim/data/schema.json	/^        "keyword": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.keyword
type	plugged/coc.nvim/data/schema.json	/^        "method": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.method
type	plugged/coc.nvim/data/schema.json	/^        "module": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.module
type	plugged/coc.nvim/data/schema.json	/^        "operator": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.operator
type	plugged/coc.nvim/data/schema.json	/^        "property": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.property
type	plugged/coc.nvim/data/schema.json	/^        "reference": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.reference
type	plugged/coc.nvim/data/schema.json	/^        "snippet": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.snippet
type	plugged/coc.nvim/data/schema.json	/^        "struct": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.struct
type	plugged/coc.nvim/data/schema.json	/^        "text": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.text
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.formatOnTypeFiletypes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.rootPatterns.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.around.disableSyntaxes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.buffer.disableSyntaxes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.disableSyntaxes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.ignorePatterns.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.triggerCharacters.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.trimSameExts.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.list.source.outline.ctagsFilestypes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.list.source.symbols.excludes.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.suggest.invalidInsertCharacters.items
type	plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.workspace.ignoredFiletypes.items
type	plugged/coc.nvim/data/schema.json	/^        "typeParameter": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.typeParameter
type	plugged/coc.nvim/data/schema.json	/^        "unit": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.unit
type	plugged/coc.nvim/data/schema.json	/^        "value": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.value
type	plugged/coc.nvim/data/schema.json	/^        "variable": { "type": "string" },$/;"	s	object:properties.suggest.completionItemKindLabels.properties.variable
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.formatOnTypeFiletypes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.rootPatterns
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.around.disableSyntaxes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.buffer.disableSyntaxes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.disableSyntaxes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.ignorePatterns
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.triggerCharacters
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.trimSameExts
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.list.source.symbols.excludes
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.suggest.invalidInsertCharacters
type	plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.workspace.ignoredFiletypes
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.bracketEnterImprove
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.colorSupport
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.enableMarkdown
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.enableMessageDialog
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.floatActions
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.formatOnInsertLeave
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.formatOnType
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.previewAutoClose
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.promptInput
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.promptWorkspaceEdit
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.silentAutoupdate
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.snippets.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.firstMatch
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.firstMatch
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.ignoreHidden
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.codeLens.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.checkCurrentLine
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.displayByAle
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enableHighlightLineNumber
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enableSign
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.locationlistUpdate
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshAfterSave
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.separateRelatedInformationAsDiagnostics
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.showDeprecated
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.showUnused
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.virtualText
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.virtualTextCurrentLineOnly
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.dialog.pickerButtonShortcut
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.dialog.pickerButtons
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.http.proxyStrictSSL
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.alignColumns
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.extendedSearchMode
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.previewSplitRight
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.source.diagnostics.includeCode
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.refactor.saveToFile
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.enable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.hideOnTextChange
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.preferShownAbove
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.asciiCharactersOnly
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableKind
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenu
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenuShortcut
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.echodocSupport
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.enablePreselect
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.enablePreview
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.fixInsertedWord
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.floatEnable
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.keepCompleteopt
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.localityBonus
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.noselect
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.numberSelect
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.removeDuplicateItems
type	plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.triggerAfterInsertEnter
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.preferences.highlightTimeout
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.around.priority
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.buffer.priority
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.file.priority
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.maxWindowWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.triggerSignatureWait
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.highPrioritySourceLimit
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.lowPrioritySourceLimit
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.timeout
type	plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.triggerCompletionWait
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.coc.preferences.previewMaxHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.highlightOffset
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.maxWindowHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.maxWindowWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.messageDelay
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.signPriority
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.virtualTextLines
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.dialog.maxHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.dialog.maxWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.height
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.interactiveDebounceTime
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.limitLines
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.maxPreviewHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.signOffset
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.notification.marginRight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.notification.marginTop
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.notification.maxHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.notification.maxWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.notification.minProgressWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.refactor.afterContext
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.refactor.beforeContext
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.signature.maxWindowHeight
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.detailMaxLength
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.labelMaxLength
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.languageSourcePriority
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxCompleteItemCount
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxPreviewWidth
type	plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.minTriggerInputLength
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerBase
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerCommand
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerModule
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerSocket
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.diagnostic.filetypeMap
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.languageserver
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.insertMappings
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.normalMappings
type	plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.suggest.completionItemKindLabels
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.hoverTarget
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.jumpCommand
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.listOfWorkspaceEdit
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.maxFileSize
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.messageLevel
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.snippetStatusText
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.watchmanPath
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.around.shortcut
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.buffer.shortcut
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.file.shortcut
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.codeLens.separator
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.codeLens.subseparator
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.cursors.cancelKey
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.cursors.nextKey
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.cursors.previousKey
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.enableMessage
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.errorSign
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.format
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.hintSign
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.infoSign
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.level
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.messageTarget
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextPrefix
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.warningSign
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.dialog.confirmKey
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.http.proxy
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.http.proxyCA
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.indicator
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.matchHighlightGroup
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.nextKeymap
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previewHighlightGroup
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previousKeymap
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.selectedSignText
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.source.diagnostics.pathFormat
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.notification.highlightGroup
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.npm.binPath
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.refactor.openCommand
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.signature.target
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.autoTrigger
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.defaultSortMethod
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.detailField
type	plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.snippetIndicator
type	plugged/coc.nvim/data/schema.json	/^      "type": ["array", "null"],$/;"	a	object:properties.list.statusLineSegments
type	plugged/coc.nvim/data/schema.json	/^      "type": ["null", "string"],$/;"	a	object:properties.http.proxyAuthorization
type	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	a	object:properties.dialog.floatBorderHighlight
type	plugged/coc.nvim/data/schema.json	/^      "type": ["string", "null"],$/;"	a	object:properties.dialog.floatHighlight
type	plugged/coc.nvim/package.json	/^    "type": "git",$/;"	s	object:repository
type	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
type	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
type	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*type[[:space:]]*([A-Z][a-zA-Z0-9_:]*)[[:space:]]*=\/\\1\/t,type\/$/;"	k	langdef:puppet
typeParameter	plugged/coc.nvim/data/schema.json	/^        "typeParameter": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
types	plugged/coc.nvim/data/schema.json	/^        "types": "string"$/;"	s	object:properties.list.statusLineSegments.items
types	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*type[ \\t]+([a-zA-Z0-9_]+)\/\\1\/T,types\/$/;"	k	langdef:scala
types	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*(export)?[ \\t]*type[ \\t]+([a-zA-Z0-9_]+)\/\\2\/t,types\/$/;"	k	langdef:typescript
types,type definitions	plugged/vim-polyglot/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?type[ \\t]+([a-zA-Z0-9_]+)\/\\2\/T,types,type definitions\/$/;"	k	langdef:Rust
typescript	plugged/vim-polyglot/ctags/typescript.ctags	/^--langdef=typescript$/;"	l
typescript_props	plugged/vim-polyglot/syntax/yats.vim	/^let typescript_props = 1$/;"	v
uc_minlines	plugged/vim-polyglot/syntax/uc.vim	/^  let uc_minlines = 10$/;"	v
unit	plugged/coc.nvim/data/schema.json	/^        "unit": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
url	plugged/coc.nvim/package.json	/^    "url": "git+https:\/\/github.com\/neoclide\/coc.nvim.git"$/;"	s	object:repository
url	plugged/coc.nvim/package.json	/^    "url": "https:\/\/github.com\/neoclide\/coc.nvim\/issues"$/;"	s	object:bugs
use_mutt_sidebar	plugged/vim-polyglot/syntax/muttrc.vim	/^  let use_mutt_sidebar=0$/;"	v
v	coc-settings.json	/^    "v": "open:vsplit"$/;"	s	object:explorer.keyMappings.global
val	plugged/vim-polyglot/ftplugin/markdown.vim	/^        let val = matchstr(s:filetype, "[^=]*$")$/;"	v
value	plugged/coc.nvim/data/schema.json	/^        "value": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
values	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy|override|private[^ ]*|protected)[ /;"	k	langdef:scala
variable	plugged/coc.nvim/data/schema.json	/^        "variable": { "type": "string" },$/;"	o	object:properties.suggest.completionItemKindLabels.properties
variable	plugged/vim-polyglot/ctags/puppet.ctags	/^--regex-puppet=\/^[[:space:]]*([\\$][a-zA-Z0-9_:]+)[[:space:]]*=\/\\1\/v,variable\/$/;"	k	langdef:puppet
variables	plugged/vim-polyglot/ctags/scala.ctags	/^--regex-scala=\/^[ \\t]*((abstract|final|sealed|implicit|lazy|override|private[^ ]*|protected)[ /;"	k	langdef:scala
variables	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*export[ \\t]+(var|const|let)[ \\t]+([a-zA-Z0-9_]+)\/\\1\/v,variable/;"	k	langdef:typescript
varlambdas	plugged/vim-polyglot/ctags/typescript.ctags	/^--regex-typescript=\/^[ \\t]*var[ \\t]+([a-zA-Z0-9_]+)[ \\t]*=[ \\t]*function[ \\t]*\\(\\)\/\\1\//;"	k	langdef:typescript
vera_comment_strings	plugged/vim-polyglot/syntax/vera.vim	/^let vera_comment_strings = 1$/;"	v
verify	plugged/vim-polyglot/scripts/build	/^def verify(packages, heuristics)$/;"	f
version	plugged/coc.nvim/package.json	/^  "version": "0.0.79",$/;"	s
vim	plugged/vim-polyglot/ftplugin/terraform.vim	/^  augroup vim.terraform.fmt$/;"	a
vim	plugged/vim-polyglot/syntax/go.vim	/^augroup vim-go-hi$/;"	a
vim-multiple-cursors	plugged/vim-multiple-cursors/README.md	/^# vim-multiple-cursors$/;"	c
vim-plug instructions	plugged/vim-multiple-cursors/README.md	/^### vim-plug instructions$/;"	S	section:vim-multiple-cursors""Installation
visual mode when multiple lines are selected	plugged/vim-multiple-cursors/README.md	/^### visual mode when multiple lines are selected$/;"	S	section:vim-multiple-cursors""Quick Start
vital#	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#function(funcname) abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
watchman	plugged/coc.nvim/package.json	/^    "watchman": false,$/;"	b	object:jest
widget_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
widget_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
widget_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'grid/;"	v
workspace.ignoredFiletypes	plugged/coc.nvim/data/schema.json	/^    "workspace.ignoredFiletypes": {$/;"	o	object:properties
wrapped.newsink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
xml_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': /;"	v
yarp	plugged/nvim-yarp/autoload/yarp/core.vim	/^augroup yarp$/;"	a
yarp#core#_nop	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#_nop(...) dict$/;"	f
yarp#core#channel_started	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#channel_started(id, channel)$/;"	f
yarp#core#error	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#error(mod, msg)$/;"	f
yarp#core#jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#jobstart() dict$/;"	f
yarp#core#new	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#new(rp)$/;"	f
yarp#core#notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#notify(method, ...) dict$/;"	f
yarp#core#on_exit	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_exit(chan_id, data, event) dict$/;"	f
yarp#core#on_stderr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_stderr(chan_id, data, event) dict$/;"	f
yarp#core#request	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#request(method, ...) dict$/;"	f
yarp#core#serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#serveraddr()$/;"	f
yarp#core#try_notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#try_notify(method, ...) dict$/;"	f
yarp#core#wait_channel	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#wait_channel() dict$/;"	f
yarp#core#warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#warn(mod, msg)$/;"	f
yarp#py	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py(module)$/;"	f
yarp#py3	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py3(module)$/;"	f
yarp#pyx#init	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! yarp#pyx#init() dict$/;"	f
yarpid	plugged/nvim-yarp/pythonx/yarp.py	/^yarpid = int(sys.argv[2])$/;"	v
yats#IsInMultilineComment	plugged/vim-polyglot/autoload/yats.vim	/^function yats#IsInMultilineComment(lnum, col)$/;"	f
yats#IsLineComment	plugged/vim-polyglot/autoload/yats.vim	/^function yats#IsLineComment(lnum, col)$/;"	f
zig#config#Debug	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#Debug() abort$/;"	f
zig#config#FmtAutosave	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtAutosave() abort$/;"	f
zig#config#FmtCommand	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtCommand() abort$/;"	f
zig#config#FmtExperimental	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtExperimental() abort$/;"	f
zig#config#FmtFailSilently	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtFailSilently() abort$/;"	f
zig#config#ListAutoclose	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListAutoclose() abort$/;"	f
zig#config#ListHeight	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListHeight() abort$/;"	f
zig#config#ListType	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListType() abort$/;"	f
zig#config#ListTypeCommands	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListTypeCommands() abort$/;"	f
zig#config#SetFmtAutosave	plugged/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#SetFmtAutosave(value) abort$/;"	f
zig#fmt#Format	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#Format() abort$/;"	f
zig#fmt#ToggleFmtAutoSave	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#ToggleFmtAutoSave() abort$/;"	f
zig#fmt#run	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#run(bin_name, target)$/;"	f
zig#fmt#update_file	plugged/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#update_file(target)$/;"	f
zig#list#Clean	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Clean(listtype) abort$/;"	f
zig#list#Close	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Close(listtype) abort$/;"	f
zig#list#Get	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Get(listtype) abort$/;"	f
zig#list#JumpToFirst	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#JumpToFirst(listtype) abort$/;"	f
zig#list#Parse	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Parse(listtype, items, title) abort$/;"	f
zig#list#ParseFormat	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#ParseFormat(listtype, errformat, items, title) abort$/;"	f
zig#list#Populate	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Populate(listtype, items, title) abort$/;"	f
zig#list#Type	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Type(for) abort$/;"	f
zig#list#Window	plugged/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Window(listtype, ...) abort$/;"	f
zig#util#EchoError	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoError(msg)$/;"	f
zig#util#EchoInfo	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoInfo(msg)$/;"	f
zig#util#EchoProgress	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoProgress(msg)$/;"	f
zig#util#EchoSuccess	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoSuccess(msg)$/;"	f
zig#util#EchoWarning	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoWarning(msg)$/;"	f
zig#util#Exec	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Exec(cmd, ...) abort$/;"	f
zig#util#GetLines	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#GetLines()$/;"	f
zig#util#HasDebug	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#HasDebug(flag)$/;"	f
zig#util#IsMac	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsMac() abort$/;"	f
zig#util#IsUsingCygwinShell	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsUsingCygwinShell()$/;"	f
zig#util#IsWin	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsWin() abort$/;"	f
zig#util#Join	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Join(...) abort$/;"	f
zig#util#LineEnding	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#LineEnding() abort$/;"	f
zig#util#Offset	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Offset(line, col) abort$/;"	f
zig#util#OffsetCursor	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#OffsetCursor() abort$/;"	f
zig#util#PathListSep	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#PathListSep() abort$/;"	f
zig#util#PathSep	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#PathSep() abort$/;"	f
zig#util#ShellError	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#ShellError() abort$/;"	f
zig#util#Shellescape	plugged/vim-polyglot/autoload/zig/util.vim	/^fu! zig#util#Shellescape(arg)$/;"	f
zig#util#Shelljoin	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Shelljoin(arglist, ...) abort$/;"	f
zig#util#Shelllist	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Shelllist(arglist, ...) abort$/;"	f
zig#util#StripPathSep	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#StripPathSep(path) abort$/;"	f
zig#util#StripTrailingSlash	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#StripTrailingSlash(paths) abort$/;"	f
zig#util#System	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#System(str, ...) abort$/;"	f
zig#util#Windo	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Windo(command) abort$/;"	f
zig#util#camelcase	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#camelcase(word) abort$/;"	f
zig#util#env	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#env(key) abort$/;"	f
zig#util#has_job	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#has_job(...) abort$/;"	f
zig#util#pascalcase	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#pascalcase(word) abort$/;"	f
zig#util#snakecase	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#snakecase(word) abort$/;"	f
zig#util#snippetcase	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#snippetcase(word) abort$/;"	f
zig#util#tempdir	plugged/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#tempdir(prefix) abort$/;"	f
{{	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{ {{}}<left><left>$/;"	m
{{!	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{! {{!}}<left><left>$/;"	m
{{#	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{# {{#}}<cr>{{\/}}<up><left><left>$/;"	m
{{<	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{< {{<}}<left><left>$/;"	m
{{>	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{> {{>}}<left><left>$/;"	m
{{if	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{if {{#if }}<cr>{{\/if}}<up><left>$/;"	m
{{ife	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{ife {{#if }}<cr>{{else}}<cr>{{\/if}}<up><up><left>$/;"	m
{{{	plugged/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{{ {{{}}}<left><left><left>$/;"	m
ç	init.vim	/^map ç \$$/;"	m
